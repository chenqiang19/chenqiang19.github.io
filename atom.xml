<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>编辑尼撑</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-04-03T12:51:40.438Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Qiang Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2021/08/15/hello-world/"/>
    <id>http://yoursite.com/2021/08/15/hello-world/</id>
    <published>2021-08-15T12:35:23.365Z</published>
    <updated>2021-04-03T12:51:40.438Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-location-source-gt-post-directory"><a href="#Create-a-new-post-location-source-gt-post-directory" class="headerlink" title="Create a new post, location: source-&gt;_post directory"></a>Create a new post, location: source-&gt;_post directory</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure><h3 id="Create-a-new-draft-location-source-gt-drafts-directory"><a href="#Create-a-new-draft-location-source-gt-drafts-directory" class="headerlink" title="Create a new draft, location: source-&gt;_drafts directory"></a>Create a new draft, location: source-&gt;_drafts directory</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new  draft <span class="string">"My New Draft"</span></span></pre></td></tr></table></figure><h3 id="Preview-a-new-draft-shut-down-old-server"><a href="#Preview-a-new-draft-shut-down-old-server" class="headerlink" title="Preview a new draft (shut down old server)"></a>Preview a new draft (shut down old server)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo server --draft</span></pre></td></tr></table></figure><h3 id="publish-a-new-draft-shut-down-old-server"><a href="#publish-a-new-draft-shut-down-old-server" class="headerlink" title="publish a new draft (shut down old server)"></a>publish a new draft (shut down old server)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo publish <span class="string">"My New draft"</span></span></pre></td></tr></table></figure><h3 id="Create-a-new-normal-location-source-gt-c-directory"><a href="#Create-a-new-normal-location-source-gt-c-directory" class="headerlink" title="Create a new normal, location: source-&gt;c directory"></a>Create a new normal, location: source-&gt;c directory</h3><h4 id="normal-is-not-blog-page-it-likes-about-or-contact-us-page"><a href="#normal-is-not-blog-page-it-likes-about-or-contact-us-page" class="headerlink" title="normal is not blog page, it likes about or contact us page."></a>normal is not blog page, it likes about or contact us page.</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">"My new Normal"</span></span></pre></td></tr></table></figure><h3 id="Preview-a-new-normal"><a href="#Preview-a-new-normal" class="headerlink" title="Preview a new normal"></a>Preview a new normal</h3><p><a href="http://localhost:4000/c/" target="_blank" rel="noopener">http://localhost:4000/c/</a></p><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Clean-cache"><a href="#Clean-cache" class="headerlink" title="Clean cache"></a>Clean cache</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo clean</span></pre></td></tr></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>If you want to show Chinese, you must make sure md is saved with utf-8</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Neural-Network</title>
    <link href="http://yoursite.com/2021/08/15/Neural-Network/"/>
    <id>http://yoursite.com/2021/08/15/Neural-Network/</id>
    <published>2021-08-15T12:35:23.365Z</published>
    <updated>2021-08-15T10:17:29.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第五章-神经网络（西瓜书学习-笔记）"><a href="#第五章-神经网络（西瓜书学习-笔记）" class="headerlink" title="第五章 神经网络（西瓜书学习-笔记）"></a>第五章 神经网络（西瓜书学习-笔记）</h2><h4 id="一、神经元模型"><a href="#一、神经元模型" class="headerlink" title="一、神经元模型"></a>一、神经元模型</h4><p><img src="/2021/08/15/Neural-Network/M-P-0.png" alt="ML"></p><p>在生物神经网络中，每个神经元与其他神经元相连，当它”兴奋”时，就会向相连的神经元发送化学物质，从而改变这些神经元内的电位；如果某神经元的电位超过了一个”阈值”，那么它就会被激活，即“兴奋”起来，向其他神经元发送化学物质。</p><p>在M-P神经元模型中，神经元接收到来自n个其他神经元传递过来的输入信号，这些输入信号通过带权重的连接进行传递，神经元接收到的总输入值将于神经元的阈值进行比较，然后通过激活函数处理以产生神经元的输出。</p><p>理想的激活函数是阶跃函数，它将输入值映射为输出值0和1，其中1对于神经元兴奋，0对于神经元抑制。然而，阶跃函数具有不连续、不光滑等不太好的性质。因此，常用sigmoid函数作为激活函数。</p><p><img src="/2021/08/15/Neural-Network/M-P-1.png" alt="ML"></p><h4 id="二、感知机与多层网络"><a href="#二、感知机与多层网络" class="headerlink" title="二、感知机与多层网络"></a>二、感知机与多层网络</h4><p>感知机由两层神经元组成，能容易地实现逻辑与、或、非运算。但是只能处理线性可分的问题，对于非线性可分问题，需要考虑使用多层功能神经元，即多层前馈神经网络。</p><p><img src="/2021/08/15/Neural-Network/M-P-2.png" alt="ML"></p><h4 id="三、误差逆传播算法"><a href="#三、误差逆传播算法" class="headerlink" title="三、误差逆传播算法"></a>三、误差逆传播算法</h4><script type="math/tex; mode=display">给定训练集D=\{(x_1,y_1),(x_2,y_2),...,(x_m,y_m)\},x_i\in R^d,y_i\in R^l\\即输入示例由d个属性描述，输出l维实值向量。</script><p><img src="/2021/08/15/Neural-Network/M-P-3.png" alt="ML"></p><script type="math/tex; mode=display">\begin{align}&上图显示了一个拥有d个输入神经元，l个输出神经元，q个隐层神经元的多层前馈神经网络。\\&其中输出层第j个神经元的阈值为\theta_j,隐层第h个神经元的阈值用\gamma_h表示。\\&输入层第i个神经元与隐层第h个神经元之间的连接权为v_{ih},隐层第h个神经元与输出层第j个神经元之间的连接权为w_{hj}\\&记隐层第h个神经元接收到的输入为\alpha_h=\sum^{d}_{i=1}v_{ih}x_i,输出层第j个神经元接收到的输入为\beta_j=\sum^{q}_{h=1}w_{hj}b_h\\&其中b_h为隐层第h个神经元的输出。如果假设隐层和输出层神经元使用sigmoid函数\\&对训练例(x_k,y_k)，假定神经网络的输出为\hat{y}_k=(\hat{y}^k_1,\hat{y}^k_2,...,\hat{y}^k_l),即：\hat{y}^k_j=f(\beta_j-\theta_j)\\&则网络在(x_k,y_k)上的均方误差为：E_k=\frac{1}{2}\sum^{l}_{j=1}(\hat{y}^k_j-y^k_j)^2\\&上图共有d\times q(输入到隐层权值)+l\times q(隐层到输出层权值) + q(隐藏层阈值) + l(输出层阈值)个参数\end{align}</script><p>BP算法基于梯度下降(gradient descent)策略，以目标的负梯度方向对参数进行调整。</p><script type="math/tex; mode=display">\begin{align}&给定误差E_k, 学习率\eta,则\Delta w_{hj}=-\eta\frac{\partial E_k}{\partial w_{hj}}\\&注意到w_{hj}先影响到第j个输出层的神经元的输入值\beta_j，再影响到输出值\hat{y}^k_j,然后影响到E_k\\&也就是根据链式法则有：\frac{\partial E_k}{\partial w_{hj}}=\frac{\partial E_k}{\partial \hat{y}^k_j}\cdot\frac{\partial \hat{y}^k_j}{\partial \beta_j}\cdot\frac{\partial \beta_j}{\partial w_{hj}}\\&\because Sigmoid函数有一个很好的性质：f'(x)=f(x)(1-f(x)),又\beta_j=\sum^{q}_{h=1}w_{hj}b_h \therefore \frac{\partial \beta_j}{\partial w_{hj}}=b_h\\&令g_j=-\frac{\partial E_k}{\partial \hat{y}^k_j}\cdot\frac{\partial \hat{y}^k_j}{\partial \beta_j}=-(\hat{y}^k_j-y^k_j)f'(\beta_j-\theta_j)=(y^k_j-\hat{y}^k_j)[f(\beta_j-\theta_j)(1-f(\beta_j-\theta_j))]=(y^k_j-\hat{y}^k_j)\hat{y}^k_j(1-\hat{y}^k_j) \\&由上式可得BP算法关于w_{hj}的更新公式\Delta w_{hj}=\eta g_j b_h\\&类似可得：\Delta\theta_j=-\eta g_j; \Delta v_{ih}=\eta e_hx_i;\Delta \gamma_h=-\eta e_h\\&e_h=-\frac{\partial E_k}{\partial b_k}\cdot\frac{\partial b_h}{\partial \alpha_h}=-\sum^{l}_{j=1}\frac{\partial E_k}{\partial \beta_j}\cdot\frac{\partial \beta_j}{\partial b_h}f'(\alpha_h-\gamma_h)=\sum^{l}_{j=1}w_{hj}g_jf'(\alpha_h-\gamma_h)=b_h(1-b_h)\sum^{l}_{j=1}w_{hj}g_j\end{align}</script><p><strong>如何缓解神经网络过拟合？</strong></p><ol><li>早停，将数据分成训练集和验证集，训练集用来计算梯度、更新连接权和阈值，验证集用来估计误差，若训练集误差降低，但验证集误差升高，则停止训练，同时返回具有最小验证集误差的连接权和阈值。</li><li>正则化，在误差目标函数中增加一个用于描述网络复杂度的部分，例如，连接权和阈值的平方和。</li></ol><script type="math/tex; mode=display">E=\lambda\frac{1}{m}\sum^{m}_{k=1}E_k+(1-\lambda)\sum_{i}w^2_i</script><p>&lambda;&in;(0,1)用于对经验误差与网络复杂度这两项进行折中。</p><p><strong>累积BP算法</strong>基于<strong>所有样本的累积误差</strong>进行权重更新，<strong>标准BP算法</strong>每次更新只针对<strong>单个样例</strong>，参数更新非常频繁，而且对不同样例进行更新的效果可能出现抵消现象。因此，为了达到同样的累积误差极小点，标准BP算法往往需进行更多次数的迭代。累积BP算法直接针对累积误差最小化，在读取整个训练集D一遍后才对参数进行更新，其参数更新的频率低得多。但在很多任务中，累积误差下降到一定程度之后，进一步下降会非常缓慢，这时标准BP往往会更快获得较好的解。</p><h4 id="四、全局最小与局部极小"><a href="#四、全局最小与局部极小" class="headerlink" title="四、全局最小与局部极小"></a>四、全局最小与局部极小</h4><p>由于负梯度方向是函数值下降最快的方向，因此梯度下降法就是沿着负梯度方向搜索最优解。但误差函数如果到达局部极小，更新量将为零，则参数的迭代更新将在此停止。对于存在多个局部极小值点的情况，<strong>如何跳出局部极小，尽量向全局最小靠近呢？</strong></p><ul><li>以多组不同参数值初始化多个神经网络，按标准方法训练后，取其中误差最小的解作为最终参数。这相当于从多个不同的初始点开始搜索，这样就可能陷入不同的局部极小，从中进行选择有可能获得更接近全局最小的结果。</li><li>使用“模拟退化”技术，模拟退火在每一步都以一定的概率接受比当前解更差的结果，从而有助于跳出局部极小。在每步迭代过程中，接受次优解的概率要随着时间的推移而逐渐降低，从而保证算法稳定。</li><li>使用随机梯度下降。与标准梯度下降法精确计算梯度不同，随机梯度下降法在计算梯度时加入随机因素。于是，即便陷入局部极小点，它计算处的梯度仍可能不为零，这样就可能跳出局部极小值继续搜索。</li></ul><p>上述用于跳出局部极小的计算大多是启发式，理论上缺乏保证。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第五章-神经网络（西瓜书学习-笔记）&quot;&gt;&lt;a href=&quot;#第五章-神经网络（西瓜书学习-笔记）&quot; class=&quot;headerlink&quot; title=&quot;第五章 神经网络（西瓜书学习-笔记）&quot;&gt;&lt;/a&gt;第五章 神经网络（西瓜书学习-笔记）&lt;/h2&gt;&lt;h4 id=&quot;一
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Model-Acceleration-tools</title>
    <link href="http://yoursite.com/2021/08/15/Model-Acceleration-tools/"/>
    <id>http://yoursite.com/2021/08/15/Model-Acceleration-tools/</id>
    <published>2021-08-15T12:35:21.000Z</published>
    <updated>2021-08-15T12:37:33.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模型推理工具学习"><a href="#模型推理工具学习" class="headerlink" title="模型推理工具学习"></a>模型推理工具学习</h2><h4 id="一、MLPerf"><a href="#一、MLPerf" class="headerlink" title="一、MLPerf"></a>一、MLPerf</h4><p><strong>Benchmark</strong>在计算机领域应用最成功的就是性能测试，主要测试负载的<strong>执行时间、传输速度、吞吐量、资源占用率</strong>等。</p><p>性能调优的两大利器是<strong>Benchmark和profile工具</strong>。<strong>Benchmark</strong>用压力测试挖掘整个系统的<strong>性能状况</strong>，而<strong>profile工具</strong>最大限度地呈现系统的运行状态和性能指标，方便用户诊断性能问题和进行调优。</p><p><strong>Benchmark的组成</strong></p><p>Benchmark中除了dataset，应该还包括做对比的基准算法，以及评估标准。有点像做对比实验的感觉。</p><p>Benchmark的核心由3部分组成：数据集、 工作负载、度量指标。</p><ul><li><p>数据集：数据类型分为结构化数据、半结构化数据和非结构化数据。</p><ul><li>结构化数据：传统的关系数据模型</li><li>半结构化数据：类似XML、HTML之类</li><li>非结构化数据：各种文档、图片、视频和音频等</li></ul></li><li><p>工作负载</p><ul><li>密集计算类型：CPU密集型计算、IO密集型计算、网络密集型计算</li><li>计算范式：SQL、批处理、流计算、图计算、机器学习；</li><li>计算延迟：在线计算、离线计算、实时计算</li><li>应用领域：搜索引擎、社交网络、电子商务、地理位置、媒体、游戏</li></ul></li><li><p>度量指标</p><ul><li>工具的使用：perf，nmon等工具和命令</li><li>度量指标：浮点型操纵密度、整数型操纵密度、指令中断、cache命中率、TLB命中率</li></ul><p><a href="https://www.cnblogs.com/sddai/p/7642738.html" target="_blank" rel="noopener">参考资料</a></p></li></ul><h5 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h5><p><code>MLPerf</code>是一套用于测量和提高机器学习软硬件性能的通用基准。主要用来测量<code>训练</code>和<code>推理</code>不同神经网络所需要的时间。<code>MLPerf</code>测试集包含了不同领域的Benchmark子项，主要包括图像分类、物体识别、翻译、推荐、语音识别、情感分析以及强化学习。</p><h5 id="二、MLPerf-Training"><a href="#二、MLPerf-Training" class="headerlink" title="二、MLPerf Training"></a>二、MLPerf Training</h5><p><strong>对于MLPerf Training测试</strong>，每个Benchmark的评价标准是：在特定数据集上训练一个模型使其达到Quality Target时的Clock time。由于机器学习任务的训练时间有很大差异，因此，MLPerf 的最终训练结果是由指定次数的基准测试时间平均得出的，其中会去掉最低和最高的数字，一般是运行5次取平均值，Train测试时间包含了模型构建，数据预处理，训练以及质量测试等时间。</p><p>MLPerf training可以分为封闭模型分区（Closed Model Division）和开放模型分区（Open Model Division）。</p><p><strong>Closed Model Division</strong>具体要求如下：MLPerf为每个领域的Benchmark测试都提供了参考实例</p><ol><li><strong>预处理</strong>必须采用与参考实例相同的预处理步骤，图像必须与参考实现中的大小相同。</li><li><strong>权重和偏差</strong>必须使用与参考实例相同的常数或随机值分布进行初始化。</li><li><strong>损失函数</strong>必须使用与参考实例相同的损失函数。</li><li><strong>优化器</strong>必须使用与参考实例相同的优化器。</li><li>RL环境也需要与参考实例相同，参数相同。</li><li>超参数是可以自己选择的。</li></ol><p><strong>Open Model Division</strong>：</p><p>开放模型分区要求使用相同的数据集解决相同的问题，允许使用任意预处理，模型或训练方法。它旨在推进ML模型和优化的创新。</p><p><strong>MLPerfTraining Result</strong>:</p><p>MLPerf Result被定义为将模型训练到目标质量的时间，这个时间包括模型构建，数据预处理，训练以及质量测试等时间，它通常是数小时或数天。</p><p>加速比: 加速比是当前测试结果和使用一块Pascal P100显卡在未进行任何优化情况下的测试结果的比值。即当前测试结果和参考基准的比值。</p><p><strong>具体的步骤</strong>：</p><ul><li>环境构建</li><li>准备数据</li><li>运行Benchmark</li></ul><h5 id="三、MLPerf-Inference"><a href="#三、MLPerf-Inference" class="headerlink" title="三、MLPerf Inference"></a>三、MLPerf Inference</h5><p><strong>对于MLPerf Inference测试</strong>，每个Benchmark的评价标准是：<code>在特定数据集上测量模型的推理性能，包括延时和吞吐量。</code></p><p>在MLPerf Inference中，主要分为三个部分：</p><ul><li><p>Load Generator: Load Generator是MLPerf的负载生成器，用于启动和控制Inference Benchmark测试。</p><p>MLPerf Inference有三个基本概念: SUT(被测系统)、Sample(inference单位，图像或词)和query(一次推理的样本数)。</p><p>在Inference测试中，LoadGen主要负责以下事情：</p><ol><li>根据测试某个场景生成query</li><li>跟踪query的Latency</li><li>验证结果的准确性</li><li>计算最终的metric</li></ol></li><li><p>Cloud: 云业务场景，MLPerf Inference计划为Cloud环境提供6个领域的Benchmark</p></li><li><p>Edge:  边缘端的业务场景，MLPerf Inference计划为Edge环境提供6个领域的Benchmark</p></li></ul><p>MLPerf Inference也分为封闭分区（Closed Division）和开放分区（Open Division）。</p><ul><li><p>封闭分区需要使用等同于参考实现的预处理，后处理和模型。封闭分区允许校准量化，不允许任何再训练。</p></li><li><p>开放分区只限制使用相同的数据集，它允许使用任意的预处理或后处理和模型，包括再培训</p></li></ul><p><a href="https://blog.csdn.net/han2529386161/article/details/102723482" target="_blank" rel="noopener">参考链接</a></p><h4 id="二、MPI"><a href="#二、MPI" class="headerlink" title="二、MPI"></a>二、MPI</h4><p>在程序中，不同的进程需要相互的数据交换，特别是在科学计算中，需要大规模的计算与数据交换，集群可以很好解决单节点计算力不足的问题，但在集群中大规模的数据交换是很耗费时间的，因此需要一种在多节点的情况下能快速进行数据交流的标准，这就是MPI。</p><p>MPI是一组用于多节点数据通信的标准，而非一种语言或者接口。具体的使用方法需要依赖它的具体实现(mpich or openmpi等)。</p><p>mpi的目标是</p><ol><li>实现较高的通信性能</li><li>好的程序移植性</li><li>强大的功能</li></ol><p><strong>进程</strong></p><p>通俗的说，进程就是运行的程序。一个程序可以含有多个进程，但一个进程不能同属于多个程序。进程拥有独立的运行环境(内存，寄存器，CPU执行时间等)，是操作系统中独立存在的可执行的基本单位。每个进程所占有的资源都是独立的，不与其他的进程共享，不能访问其他进程内存空间，其他进程也无法访问该进程内存空间。但可以通过消息传递来进行通信。</p><p><strong>进程组</strong></p><p>指一个mpi程序中的所有(n个)进程的集合。该程序中所有进程编号从0到n-1，主要是为了标识不同的进程，可以通过进程的编号来索引该进程。不同进程组的进程的编号可以相同。</p><p><strong>通信器(MPI_Comm)</strong></p><p>可以理解为一组进程间可以通信的进程组，通信函数必须在通信器内调用。</p><p><strong>消息</strong></p><p>需要通信的数据。</p><p><strong>mpi对象</strong></p><p>mpi内存的数据结构，包括数据类型(MPI_DOUBLE)，通信器(MPI_COMM)等</p><p><a href="https://zhuanlan.zhihu.com/p/69497154" target="_blank" rel="noopener">参考资料</a></p><h4 id="三、GPU-Director"><a href="#三、GPU-Director" class="headerlink" title="三、GPU Director"></a>三、GPU Director</h4><p>当前深度学习模型越来越复杂，计算数据量暴增，对于大规模深度学习训练任务，单机已经无法满足计算要求，多机多卡的分布式训练成为了必要的需求，这个时候多机间的通信成为了分布式训练性能的重要指标。</p><p><strong>RDMA介绍</strong></p><p>我们先来看看RDMA技术是什么？RDMA即Remote DMA，是Remote Direct Memory Access的英文缩写。</p><p><strong>DMA原理</strong></p><p>DMA（直接内存访问）技术是Offload CPU负载的一项重要技术。DMA的引入，使得原来设备内存与系统内存的数据交换必须要CPU参与，变为交给DMA控制来进行数据传输。</p><p> 直接内存访问(DMA)方式，是一种完全由硬件执行I/O交换的工作方式。在这种方式中，  DMA控制器从CPU完全接管对总线的控制，数据交换不经过CPU，而直接在内存和IO设备之间进行。DMA工作时，由DMA  控制器向内存发出地址和控制信号，进行地址修改，对传送字的个数计数，并且以中断方式向CPU 报告传送操作的结束。</p><p>使用DMA方式的目的是减少大批量数据传输时CPU 的开销。采用专用DMA控制器(DMAC) 生成访存地址并控制访存过程。优点有操作均由硬件电路实现，传输速度快；CPU 基本不干预，仅在初始化和结束时参与，CPU与外设并行工作，效率高。</p><p>传统的TCP/IP协议，应用程序需要要经过多层复杂的协议栈解析，才能获取到网卡中的数据包，而使用RDMA协议，应用程序可以直接旁路内核获取到网卡中的数据包。</p><p>RDMA可以简单理解为利用相关的硬件和网络技术，服务器1的网卡可以直接读写服务器2的内存，最终达到高带宽、低延迟和低资源利用率的效果。</p><p>GPUDirect  RDMA，就是计算机1的GPU可以直接访问计算机2的GPU内存。而在没有这项技术之前，GPU需要先将数据从GPU内存搬移到系统内存，然后再利用RDMA传输到计算机2，计算机2的GPU还要做一次数据从系统内存到GPU内存的搬移动作。GPUDirect RDMA技术使得进一步减少了GPU通信的数据复制次数，通信延迟进一步降低。</p><p><a href="https://blog.csdn.net/weixin_33709609/article/details/89687048" target="_blank" rel="noopener">参考资料</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模型推理工具学习&quot;&gt;&lt;a href=&quot;#模型推理工具学习&quot; class=&quot;headerlink&quot; title=&quot;模型推理工具学习&quot;&gt;&lt;/a&gt;模型推理工具学习&lt;/h2&gt;&lt;h4 id=&quot;一、MLPerf&quot;&gt;&lt;a href=&quot;#一、MLPerf&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Model Acceleration" scheme="http://yoursite.com/categories/Model-Acceleration/"/>
    
    
      <category term="Model Acceleration" scheme="http://yoursite.com/tags/Model-Acceleration/"/>
    
  </entry>
  
  <entry>
    <title>Model-Acceleration-Zero</title>
    <link href="http://yoursite.com/2021/08/15/Model-Acceleration-Zero/"/>
    <id>http://yoursite.com/2021/08/15/Model-Acceleration-Zero/</id>
    <published>2021-08-15T12:32:19.000Z</published>
    <updated>2021-08-15T12:35:04.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模型加速"><a href="#模型加速" class="headerlink" title="模型加速"></a>模型加速</h2><h4 id="一、pytorch-JIT浅解析"><a href="#一、pytorch-JIT浅解析" class="headerlink" title="一、pytorch JIT浅解析"></a>一、pytorch JIT浅解析</h4><p>Torch脚本是一种从PyTorch代码创建可序列化和可优化模型的方法。用Torch脚本编写的代码可以从Python进程中保存，并在没有Python依赖的进程中加载。</p><p>Torch Script中的核心数据结构是ScriptModule。 它是<strong>Torch的nn.Module的类似物</strong>，代表整个模型作为子模块树。 与普通模块一样，ScriptModule中的每个单独模块都可以包含子模块，参数和方法。 在nn.Modules中，方法是作为Python函数实现的，但在ScriptModules方法中通常实现为Torch Script函数，这是一个<strong>静态类型的Python子集</strong>，包含PyTorch的所有内置Tensor操作。 这种差异允许您运行ScriptModules代码而无需Python解释器。</p><p><strong>ScriptModules和Torch Script函数可以通过两种方式创建：</strong></p><p><strong>Tracing:</strong> 使用torch.jit.trace，可以获取现有模块或python函数，提供示例输入，然后运行该函数，记录在所有张量上执行的操作。</p><p>由于跟踪仅记录张量上的操作，因此它不会记录任何控制流操作，如if语句或循环。 当这个控制流在你的模块中保持不变时，这很好，它通常只是内联配置决策。 但有时控制流实际上是模型本身的一部分。 例如，序列到序列转换中的波束搜索是输入的（变化的）序列长度上的循环。 在这种情况下，跟踪不合适，并且应使用脚本编写波束搜索。<br>        <strong>Scripting:</strong>可以使用Python语法直接编写Torch Script代码，以在ScriptModule的子类上使用torch.jit.script批注（对于函数）或torch.jit.script_method批注（对于方法）来执行此操作。</p><p>为什么需要JIT(即时编译)？</p><p>是一种程序优化的方法，JIT 到底带来了哪些好处。</p><ol><li><p>模型部署</p><p>PyTorch 的 1.0 版本发布的最核心的两个新特性就是 JIT 和 C++ API，这两个特性一起发布不是没有道理的，JIT 是  Python 和 C++ 的桥梁，我们可以使用 Python 训练模型，然后通过 JIT 将模型转为语言无关的模块，从而让 C++  可以非常方便得调用，从此「使用 Python 训练模型，使用 C++ 将模型部署到生产环境」对 PyTorch  来说成为了一件很容易的事。而因为使用了 C++，我们现在几乎可以把 PyTorch 模型部署到任意平台和设备上：树莓派、iOS、Android  等等</p></li><li><p>性能提升</p><p>既然是为部署生产所提供的特性，那免不了在性能上面做了极大的优化，如果推断的场景对性能要求高，则可以考虑将模型（torch.nn.Module）转换为 TorchScript Module，再进行推断。</p></li><li><p>模型可视化</p><p>TensorFlow 或 Keras  对模型可视化工具（TensorBoard等）非常友好，因为本身就是静态图的编程模型，在模型定义好后整个模型的结构和正向逻辑就已经清楚了；但  PyTorch 本身是不支持的，所以 PyTorch 模型在可视化上一直表现得不好，但 JIT 改善了这一情况。现在可以使用 JIT 的  trace 功能来得到 PyTorch 模型针对某一输入的正向逻辑，通过正向逻辑可以得到模型大致的结构，但如果在 <code>forward</code>  方法中有很多条件控制语句，这依然不是一个好的方法，所以 PyTorch JIT 还提供了 Scripting 的方式。</p></li></ol><p><a href="https://zhuanlan.zhihu.com/p/370455320" target="_blank" rel="noopener">优秀的参考</a></p><h4 id="二、模型量化"><a href="#二、模型量化" class="headerlink" title="二、模型量化"></a>二、模型量化</h4><p><strong>一种有效降低模型大小和计算量的方法</strong></p><p>模型量化就是将网络中的参数【weight、bias、activation value】从高精度转换成低精度的操作过程，同时我们期望转换后的模型准确率与转换前的相近。</p><h5 id="1、-为什么量化有用？"><a href="#1、-为什么量化有用？" class="headerlink" title="1、 为什么量化有用？"></a>1、 为什么量化有用？</h5><p>网络模型在量化过程中会引入量化噪声，而CNN网络对噪声并不敏感，因此模型量化方法对CNN网络是有效的。</p><h5 id="2、为什么用量化？"><a href="#2、为什么用量化？" class="headerlink" title="2、为什么用量化？"></a>2、为什么用量化？</h5><ul><li>模型太大，比如alexnet就200MB，存储压力大</li><li>每个层的weights范围基本都是确定的，且波动不大，适合量化压缩</li><li>既减少访存又减少计算量</li><li>降低设备的功耗</li></ul><h5 id="3、为什么不直接训练低精度的模型？"><a href="#3、为什么不直接训练低精度的模型？" class="headerlink" title="3、为什么不直接训练低精度的模型？"></a>3、为什么不直接训练低精度的模型？</h5><ul><li>因为你训练是需要反向传播和梯度下降的，int8就非常不好做了，举个例子就是我们的学习率一般都是零点几零点几的，int8没法做。</li><li>大部分模型都是浮点类型的，可以直接转换</li></ul><p><a href="https://github.com/Ewenwan/MVision/tree/master/CNN/Deep_Compression/quantization" target="_blank" rel="noopener">量化综述</a></p><h5 id="4、int8量化原理"><a href="#4、int8量化原理" class="headerlink" title="4、int8量化原理"></a>4、int8量化原理</h5><p><img src="/2021/08/15/Model-Acceleration-Zero/quantified-0.jpg" alt="ML"></p><p>非饱和量化是最本质也是最暴力的方法。即通过统计网络模型中每一个layer中weight或activation value的absmax value计算出缩放因子scale。然后使用线性映射的方式将原始的浮点数据转换到INT8的数据域中，量化公式如下所示：</p><script type="math/tex; mode=display">R=scale*(q-z)</script><p>当模型数据分布不均匀的时候，使用这种量化方式，会导致量化后的模型精度与量化前的模型精度相差甚远，为了解决该问题，很多情况下是采用饱和方式进行量化：</p><p><img src="/2021/08/15/Model-Acceleration-Zero/quantified-1.jpg" alt="ML"></p><p>该量化方法是从浮点数据分布中寻找一个最优阈值T作为absmax value的值，然后采用上述公式进行量化。大概的最优阈值的选取过程如下：</p><ul><li>收集激活值得直方图</li><li>基于不用的阈值产生不同的量化分布</li><li>计算每个分布与元分布的相对熵，然后选择熵最少的一个</li></ul><p><a href="https://zhuanlan.zhihu.com/p/362976429" target="_blank" rel="noopener">参考资料</a></p><p><a href="https://zhuanlan.zhihu.com/p/71881443" target="_blank" rel="noopener">参考资料</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模型加速&quot;&gt;&lt;a href=&quot;#模型加速&quot; class=&quot;headerlink&quot; title=&quot;模型加速&quot;&gt;&lt;/a&gt;模型加速&lt;/h2&gt;&lt;h4 id=&quot;一、pytorch-JIT浅解析&quot;&gt;&lt;a href=&quot;#一、pytorch-JIT浅解析&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Model Acceleration" scheme="http://yoursite.com/categories/Model-Acceleration/"/>
    
    
      <category term="Model Acceleration" scheme="http://yoursite.com/tags/Model-Acceleration/"/>
    
  </entry>
  
  <entry>
    <title>Faster-R-CNN-Code-Analyse</title>
    <link href="http://yoursite.com/2021/08/15/Faster-R-CNN-Code-Analyse/"/>
    <id>http://yoursite.com/2021/08/15/Faster-R-CNN-Code-Analyse/</id>
    <published>2021-08-15T12:25:30.000Z</published>
    <updated>2021-08-15T12:28:30.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Faster-R-CNN源码分析-1"><a href="#Faster-R-CNN源码分析-1" class="headerlink" title="Faster R-CNN源码分析(1)"></a>Faster R-CNN源码分析(1)</h2><h4 id="一、预备知识"><a href="#一、预备知识" class="headerlink" title="一、预备知识"></a>一、预备知识</h4><h5 id="1、Cython构建python的build-in模块"><a href="#1、Cython构建python的build-in模块" class="headerlink" title="1、Cython构建python的build-in模块"></a>1、Cython构建python的build-in模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#Cython库可将已有的Python代码转化为C语言的代码，并作为Python的built-in模块扩展。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">python setup.py build_ext --inplace</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#build_ext把ext_modules指定的一些模块，编译和链接成动态库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#--inplace指示 将编译后的扩展模块直接放在与setup.py同级的目录中</span></span></pre></td></tr></table></figure><p>目前Python代码的执行过程是将Python代码转变成一行行指令，然后解释器解释指令的执行，调用到C代码层。如果去掉指令解释这个阶段，直接进入C代码层，效率就比较高了。Cython 是 Python 编程语言和扩展 Cython 编程语言（基于 Pyrex）的优化静态编译器。 它使得为 Python 编写 C 扩展就像 Python 本身一样简单。 </p><p><strong>整个Cython工作的流程分两步：</strong></p><ol><li>.py文件使用Cython被编译为.c文件；</li><li>.c文件使用C编译器生成.pyd(windos)或.so(linux)文件。</li></ol><p><img src="/2021/08/15/Faster-R-CNN-Code-Analyse/Cython.png" alt="Cython"></p><p>上图来自博客园<a href="https://home.cnblogs.com/u/SsoZhNO-1/" target="_blank" rel="noopener">SsoZh</a></p><p><a href="https://www.jianshu.com/p/cfcc2c04a6f5" target="_blank" rel="noopener">Cythhon入门经典</a></p><p><strong>构建Cython代码的几种方法：</strong></p><ul><li>写一个 distutils / setuptools setup.py。推荐的方式(下面主要学习这种方式)<ul><li>如果您使用 setuptools 而不是 distutils，则需要注意，运行python setup.py install时的默认操作是创建一个压缩的egg文件，当您尝试从依赖包中使用它们时，这些文件无法与pxd文件一起用于pxd文件。为防止这种情况，请在setup()的参数中包含zip_safe=False。使用 setuptools 时，您应该在 Cython 之前导入它，因为 setuptools 可能会替换 distutils 中的Extension类</li></ul></li><li>使用 Pyximport，导入 Cython .pyx文件就像它们是.py文件一样</li><li>手动运行cython命令行实用程序，从.pyx文件生成.c文件，然后手动将.c文件编译成适合从 Python 导入的共享库或 DLL</li><li>使用 [Jupyter] 笔记本或 [Sage] 笔记本，两者都允许 Cython 代码内联</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#distutils 构建 Cython 模块</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">setup(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">name = <span class="string">""</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    ext_module = ext_modues,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    cmdclass = &#123;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#name: site-package安装文件夹下的egg文件。假设不指定，将会以UNKNOW命名：/usr/lib64/python2.6/site-packages/UNKNOWN-0.0.0-py3.8.egg-info</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#ext_module: 是一个包括Extension实例的列表</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#Extension实力列表</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. name: 扩展包的名字，供python导入import时使用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#2. source: 源文件组成的列表，源文件能够是C，C++等特定的资源文件或其他有build_ext确定的Python扩展，如.pyx文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#3. language：扩展语言名称，默认是c,如果要用C++，可以改成C++</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#4. include_dirs： 提供搜索C/C++头文件的文件夹组成的列表（比方：*.h），gcc的-I参数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#5. library_dirs：提供搜索C/C++库文件的文件夹组成的列表（比方：*.a），gcc的-L参数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#6. libraries：库名组成的列表</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#7. extra_cpmpile_args: 就是传给 gcc 的额外的编译参数，比方说你可以传一个 -std=c++11</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#8. extra_link_args: 就是传给 gcc 的额外的链接参数,如：-pthread</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#cmdclass: 定制化命令，通过继承 setuptools.command 下的命令类来进行定制化</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadCommand</span><span class="params">(Command)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"""Support setup.py upload."""</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            self.status(<span class="string">'Removing previous builds…'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            rmtree(os.path.join(here, <span class="string">'dist'</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">except</span> OSError:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">pass</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        self.status(<span class="string">'Building Source and Wheel (universal) distribution…'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        os.system(<span class="string">'&#123;0&#125; setup.py sdist bdist_wheel --universal'</span>.format(sys.executable))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        self.status(<span class="string">'Uploading the package to PyPI via Twine…'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        os.system(<span class="string">'twine upload dist/*'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        self.status(<span class="string">'Pushing git tags…'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        os.system(<span class="string">'git tag v&#123;0&#125;'</span>.format(about[<span class="string">'__version__'</span>]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">        os.system(<span class="string">'git push --tags'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">        sys.exit()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">setup(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># $ setup.py publish support.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">    cmdclass=&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">        <span class="string">'upload'</span>: UploadCommand,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#这样可以通过 python setup.py upload 运行打包上传代码</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果您需要指定编译器选项、要链接的库或其他链接器选项，您将需要手动创建扩展实例Extension（请注意，仍然可以使用 glob 语法在一行中指定多个扩展）： </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> Extension, setup</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">extensions = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">    Extension(<span class="string">"primes"</span>, [<span class="string">"primes.pyx"</span>],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">        include_dirs=[...],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">        libraries=[...],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">        library_dirs=[...]),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># Everything but primes.pyx is included here.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">    Extension(<span class="string">"*"</span>, [<span class="string">"*.pyx"</span>],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">        include_dirs=[...],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">        libraries=[...],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">        library_dirs=[...]),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">setup(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">    name=<span class="string">"My hello app"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">    ext_modules=cythonize(extensions),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#from Cython.Distutils import build_ext</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过自定义类继承build_ext，来自定义distutils构建方式,如下：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">custom_build_ext</span><span class="params">(build_ext)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_extensions</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">#self.compiler是Cython.Distutils-》build_ext中的属性</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">        customize_compiler_for_nvcc(self.compiler)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">        build_ext.build_extensions(self)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">setup(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">    name=<span class="string">'faster_rcnn'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">    ext_modules=ext_modules,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># inject our custom trigger</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">    cmdclass=&#123;<span class="string">'build_ext'</span>: custom_build_ext&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/24311879" target="_blank" rel="noopener">优秀的参考资料</a></p><p><a href="https://www.bookstack.cn/read/cython-doc-zh/docs-29.md" target="_blank" rel="noopener">Cython 3.0中文文档</a></p><p><a href="https://stackoverflow.com/questions/41169711/python-setuptools-distutils-custom-build-for-the-extra-package-with-makefile" target="_blank" rel="noopener">具有非常大的参考价值的链接</a></p><p><a href="https://github.com/python/cpython/blob/main/Lib/distutils/command/build_ext.py" target="_blank" rel="noopener">Distutils-Cammond源码</a></p><h5 id="2、NVCC编译学习"><a href="#2、NVCC编译学习" class="headerlink" title="2、NVCC编译学习"></a>2、NVCC编译学习</h5><p>下图给出了NVCC支持的编译阶段的命令以及输出的文件格式</p><p><img src="/2021/08/15/Faster-R-CNN-Code-Analyse/nvcc-0.png" alt="NVCC"></p><p>CUDA 编译的工作原理如下：输入程序经过预处理以供Device编译器编译，并编译为 CUDA 二进制（cubin）和/或 PTX 中间代码，这些代码放在一个 fatbinary 中。 输入程序再次预处理以供HOST编译，并与嵌入的fatbinary合成在一起，并将 CUDA 特定 C++ 扩展转换为标准 C++ 构造。 然后 C++ 主机编译器将带有嵌入的 fatbinary 的合成主机代码编译成主机Object。 为实现这一目标所遵循的确切步骤如图 1 所示。 </p><p><img src="/2021/08/15/Faster-R-CNN-Code-Analyse/nvcc-1.png" alt="NVCC"></p><p>上图来自于Nvidia官网<a href="https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html" target="_blank" rel="noopener">入口</a></p><p>每个 <strong>nvcc 选项</strong>都有一个<strong>长名称</strong>和一个<strong>短名称</strong>，它们可以相互互换。 这两种变体的区别在于选项名称前面必须有多少个连字符：长名称前面必须有两个连字符，而短名称前面必须有一个连字符。 例如，-I 是 —include-path 的简称。长名称描述性价值更高，短名称交互性价值更高。</p><p><strong>nvcc</strong> 识别<strong>三种类型的命令选项</strong>：布尔选项、单值选项和列表选项。 </p><p>布尔选项没有参数； 它们要么在命令行上指定，要么不指定(就是要么有这个选项或者没有，如：加—verbosse或不加)。 单值选项最多只能指定一次(不能出现多次，如：—output-file xxx —output-file xxx)，列表选项可以重复。 每个选项类型的示例分别是：—verbose（切换到详细模式）、—output-file（指定输出文件）和—include-path（指定包含路径）。 </p><p><strong>单值选项</strong>和<strong>列表选项</strong>必须有参数，该参数必须跟在选项本身的名称后面，后面是多个空格之一或等号字符。 当使用<strong>单字符短名称</strong>（例如 -I、-l 和 -L）时，<strong>选项的值也可以紧跟在选项本身之后，而不用空格或等号字符分隔</strong>。 列表选项的各个值可以在选项的单个实例中用逗号分隔，或者选项可以重复，或者这两种情况的任意组合。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">合法的例子</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">-o file</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">-o=file</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">-Idir1,dir2 -I=dir3 -I dir4,dir5</span></pre></td></tr></table></figure><p><strong>File and Path Specifications</strong></p><ol><li>—output-file <em>file</em> (-o)：指定输出文件的名称和位置。 </li><li>—pre-include file,…,(-include): 指定在预处理期间必须预先包含的头文件。</li><li>—library library,… (-l): 指定要在链接阶段使用的库，不带库文件扩展名。 在使用选项 —library-path 指定的库搜索路径上搜索库。</li><li>—define-macro def,… (-D): 定义要在预处理期间使用的宏。 def 可以是 name 或 name=definition。 </li><li>—undefine-macro def,… (-D): 在预处理或编译期间取消定义现有宏。 </li><li>—include-path path,… (-I): 指定包含搜索路径。 </li><li>—system-include path,… (isystem): 指定系统包含搜索路径。 </li><li>—library-path path,… (-L): 指定库搜索路径。</li><li>—cudart {none | shared | static} (-cudart): 指定要使用的 CUDA 运行时库的类型：无 CUDA 运行时库、共享/动态 CUDA 运行时库或静态 CUDA 运行时库。 </li><li>—cudadevrt {none | static } {-cudadevrt}: 指定要使用的 CUDA 设备运行时库的类型：无 CUDA 设备运行时库或静态 CUDA 设备运行时库。 </li></ol><p><strong>Options for Specifying the Compilation Phase</strong></p><p>此类别的选项指定输入文件必须编译到哪个阶段。 </p><ol><li>—link (-link): 指定默认行为：编译并链接所有输入文件。 </li><li>—lib (-lib): 如有必要，将所有输入文件编译为目标文件，并将结果添加到指定的库输出文件中。 </li><li>—device-link (-dlink): 将具有可重定位设备代码的目标文件和 .ptx、.cubin 和 .fatbin 文件链接到具有可执行设备代码的目标文件中，该目标文件可以传递给主机链接器。 </li><li>—device-c (-dc): 将每个 .c、.cc、.cpp、.cxx 和 .cu 输入文件编译为包含可重定位设备代码的目标文件。 </li><li>—device-w (-dw): 将每个 .c、.cc、.cpp、.cxx 和 .cu 输入文件编译为包含可执行设备代码的目标文件。 </li><li>—cuda (-cuda): 将每个 .cu 输入文件编译为 .cu.cpp.ii 文件。 </li><li>—compile (-c): 将每个 .c、.cc、.cpp、.cxx 和 .cu 输入文件编译为目标文件。 </li><li>—fatbin (-fatbin): 将所有 .cu、.ptx 和 .cubin 输入文件编译为仅限设备的 .fatbin 文件。 。nvcc 使用此选项丢弃每个 .cu 输入文件的主机代码。</li><li>—cubin (-cubin): 将所有 .cu 和 .ptx 输入文件编译为仅限设备的 .cubin 文件。 nvcc 使用此选项丢弃每个 .cu 输入文件的主机代码。 </li><li>—ptx (-ptx): 将所有 .cu 输入文件编译为仅限设备的 .ptx 文件。 nvcc 使用此选项丢弃每个 .cu 输入文件的主机代码。</li><li>—preprocess (-E): 预处理所有 .c、.cc、.cpp、.cxx 和 .cu 输入文件。 </li><li>—generate-dependencies (-M): 为 .c、.cc、.cpp、.cxx 和 .cu 输入文件生成可包含在 Makefile 中的依赖文件。 </li><li>—run (-run): 将所有输入文件编译并链接到一个可执行文件中，然后执行它。 </li></ol><p><strong>Options for Passing Specific Phase Options(用于传递特定阶段选项的选项 )</strong></p><p>说白了就是，比如nvcc中没有的一些执行，但要使用的话可以通过该选项中的一些参数进行传递。这些允许将特定选项直接传递给 nvcc 封装的内部编译工具，而不会给 nvcc 带来关于这些工具的过于详细的知识。</p><ol><li>—compiler-options options,… (-Xcompiler): 直接向编译器/预处理器指定选项。 如：-Xcompiler -fPIC</li><li>—linker-options options,… (-Xlinker): 直接为主机链接器指定选项。 </li><li>—archive-options options,… (-Xarchive): 直接向库管理器指定选项。 </li><li>—ptxas-options options,… (-Xptxas): 直接为 PTX 优化汇编器 ptxas 指定选项。 </li><li>—nvlink-options options,… (-Xnvlink): 直接为设备链接器 nvlink 指定选项。 </li></ol><p><strong>Option for Specifying Behavior of Compiler/Linker(用于指定编译器/链接器行为的选项 )</strong></p><ol><li>—profile (-pg): 仪器生成的代码/可执行文件供 gprof 使用。 </li><li>—debug (-g): 为主机代码生成调试信息。 </li><li>—device-debug (-G): 为设备代码生成调试信息。 此选项关闭对设备代码的所有优化。 它不用于分析； 使用 —generate-line-info 代替分析。 </li><li>—optimize level (-O): 指定主机代码的优化级别。 </li><li>—shared (-shared): 在链接期间生成共享库。 </li><li>—x {c | c++ | cu} (-x): 明确指定输入文件的语言，而不是让编译器根据文件名后缀选择默认语言。 </li><li>—std {c++03 | c++11 | c++14 | c++17} (-std): 选择一个特定的C++ Dialect。</li><li>—machine {32 | 64} (-m): 指定 32 位与 64 位架构。 </li></ol><p><strong>Options for Guiding the Compiler Driver(引导编译器驱动程序的选项 )</strong></p><ol><li>—dont-use-profile (-noprof): 不要使用 nvcc.profile 文件中的配置进行编译。 </li><li>—threads number (-t): 指定用于并行执行编译步骤的最大线程数。 多架构编译时，该选项可用于提高编译速度。 编译器创建多个线程来并行执行编译步骤。 如果 number 为=1，则忽略此选项。 如果 number = 0，则使用的线程数是机器上的 CPU 数。 </li><li>—dryrun (-dryrun): 列出编译子命令而不执行它们。</li><li>—verbose (-v): 在执行时列出编译子命令。 </li><li>—keep (-keep): 保留在内部编译步骤中生成的所有中间文件。 </li><li>—keep-dir directory (-keep-dir): 将内部编译步骤中生成的所有中间文件保存在此目录中。 </li></ol><p><strong>Opetions for Steering GPU Code Generation(用于引导 GPU 代码生成的选项 )</strong></p><ol><li>—gpu-architecture arch (-arch): 指定编译 CUDA 输入文件的 NVIDIA 虚拟 GPU 架构类的名称。通常，单独使用此选项不会触发为真实架构组装生成的 PTX，它的目的是控制 PTX 输入的预处理和编译。如果未指定选项 —gpu-code 的值，则此选项的值默认为 —gpu-architecture 的值。 在这种情况下，作为上述描述的唯一例外，为 —gpu-architecture 指定的值可能是真实架构（例如 sm_50），在这种情况下，nvcc 使用指定的真实架构及其最接近的虚拟架构作为有效架构 值。 例如，nvcc —gpu-architecture=sm_50 等价于 nvcc —gpu-architecture=compute_50 —gpu-code=sm_50,compute_50。 </li><li>—gpu-code code,… (-code): 指定要为其组装和优化 PTX 的 NVIDIA GPU 的名称。 nvcc 在生成的每个指定代码架构的可执行文件中嵌入一个编译后的代码映像，它是每个真实架构（例如 sm_50）的真正二进制加载映像，以及虚拟架构（例如 compute_50）的 PTX 代码。 在运行时，如果没有找到当前 GPU 的二进制加载图像，则 CUDA 运行时系统会动态编译此类嵌入式 PTX 代码。 </li><li>—generate-code specification (-gencode): 此选项提供了 —gpu-architecture=arch —gpu-code=code,… 选项组合的概括，用于指定与代码生成相关的 nvcc 行为。 使用前面的选项为不同的真实架构生成代码，而 PTX 用于相同的虚拟架构，选项 —generate-code 允许为不同的虚拟架构生成多个 PTX。 事实上， —gpu-architecture=arch —gpu-code=code,… 等价于 —generate-code=arch=arch,code=code,… 。 </li></ol><p><strong>Generic Tool Options</strong></p><ol><li>—disable-warnings (-w): 禁止所有警告消息。 </li><li>—Wno-deprecated-gpu-targets (-Wno-deprecated-gpu-targets): 禁止有关已弃用的 GPU 目标架构的警告。 </li><li>—Wno-deprecated-declarations (-Wno-deprecated-declarations): 禁止在使用已弃用实体时发出警告。 </li></ol><p><strong>NVCC Environment Variables</strong></p><p>如果设置了以下环境变量，可以使用以下环境变量来扩充 nvcc 命令行标志： </p><p>NVCC_PREPEND_FLAGS: 在正常 nvcc 命令行之前注入的标志。 </p><p>NVCC_APPEND_FLAGS: 在正常 nvcc 命令行之后注入的标志。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">export NVCC_PREPEND_FLAGS='-G -keep -arch=sm_60'</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">export NVCC_APPEND_FLAGS='-DNAME=" foo "'</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">The following invocation(以下调用): </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">nvcc foo.cu -o foo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Becomes equivalent to:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">nvcc -G -keep -arch=sm_60 foo.cu -o foo -DNAME=" foo "</span></pre></td></tr></table></figure><p><strong>兼容性</strong></p><p>CPU各代之间的二进制代码兼容性，以及已发布的指令集体系结构，是确保该领域的分布式应用程序在新版本CPU成为主流时继续运行的常用机制。</p><p>这种情况对于 GPU 来说是不同的，因为 NVIDIA 无法在不牺牲 GPU 改进的常规机会的情况下保证二进制兼容性。 相反，正如图形编程领域的常规做法，nvcc 依赖于两阶段编译模型来确保应用程序与未来 GPU 代的兼容性。 </p><p><img src="/2021/08/15/Faster-R-CNN-Code-Analyse/nvcc-2.png" alt="NVCC"></p><p><strong>Further Mechanisms</strong></p><ul><li>Just-in-Time Compilation(即时编译)</li><li>Fatbinaries</li></ul><p><strong>NVCC Example</strong></p><p>nvcc 提供选项 —gpu-architecture 和 —gpu-code 用于指定两个转换阶段的目标架构。 除了下面描述的允许的简写外，—gpu-architecture 选项采用单个值，该值必须是虚拟计算架构的名称，而选项 —gpu-code 则采用一个值列表，这些值都必须是虚拟计算架构的名称 实际的 GPU。 nvcc 为这些 GPU 中的每一个执行阶段 2 转换，并将结果嵌入到编译结果中（通常是主机目标文件或可执行文件）。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">nvcc x.cu --gpu-architecture=compute_50 --gpu-code=sm_50,sm_52</span></pre></td></tr></table></figure><h5 id="3、Pytorch扩展"><a href="#3、Pytorch扩展" class="headerlink" title="3、Pytorch扩展"></a>3、Pytorch扩展</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">torch.utils.ffi.create_extension(name, headers, sources, verbose&#x3D;True, with_cuda&#x3D;False, package&#x3D;False, relative_to&#x3D;&#39;.&#39;, **kwargs)</span></pre></td></tr></table></figure><p>创建并配置一个cffi.FFI对象,用于PyTorch的扩展。参数解析如下：</p><ul><li><strong>name</strong> (<em>str</em>) – 包名。可以是嵌套模块，例如 <code>.ext.my_lib</code>。</li><li><strong>headers</strong> (<em>str</em> or List[<em>str</em>]) – 只包含导出函数的头文件列表</li><li><strong>sources</strong> (List[<em>str</em>]) – 用于编译的sources列表</li><li><strong>verbose</strong> (<em>bool</em>, optional) – 如果设置为False，则不会打印输出（默认值：<code>True</code>）。</li><li><strong>with_cuda</strong> (<em>bool</em>, optional) – 设置为True以使用CUDA头文件进行编译（默认值：<code>False</code>）。</li><li><strong>package</strong> (<em>bool</em>, optional) – 设置为True以在程序包模式下构建（对于要作为pip程序包安装的模块）（默认值：<code>False</code>）。</li><li><strong>relative_to</strong> (<em>str</em>, optional) –构建文件的路径。<code>package</code>为<code>True</code>时需要。最好使用<code>__file__</code>作为参数。</li><li><strong>kwargs</strong> – 传递给ffi以声明扩展的附加参数。有关详细信息，请参阅<a href="https://docs.python.org/3/distutils/apiref.html#distutils.core.Extension" target="_blank" rel="noopener">Extension API reference</a>。</li></ul><p><a href="https://blog.csdn.net/manong_wxd/article/details/78720182" target="_blank" rel="noopener">参考示例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Faster-R-CNN源码分析-1&quot;&gt;&lt;a href=&quot;#Faster-R-CNN源码分析-1&quot; class=&quot;headerlink&quot; title=&quot;Faster R-CNN源码分析(1)&quot;&gt;&lt;/a&gt;Faster R-CNN源码分析(1)&lt;/h2&gt;&lt;h4 id=
      
    
    </summary>
    
    
      <category term="Deep Learning" scheme="http://yoursite.com/categories/Deep-Learning/"/>
    
    
      <category term="Deep Learning" scheme="http://yoursite.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Mask-R-CNN</title>
    <link href="http://yoursite.com/2021/08/15/Mask-R-CNN/"/>
    <id>http://yoursite.com/2021/08/15/Mask-R-CNN/</id>
    <published>2021-08-15T12:22:35.000Z</published>
    <updated>2021-08-15T12:24:33.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mask-RCNN论文学习笔记"><a href="#Mask-RCNN论文学习笔记" class="headerlink" title="Mask-RCNN论文学习笔记"></a>Mask-RCNN论文学习笔记</h2><h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4><p><img src="/2021/08/15/Mask-R-CNN/Mask-RCNN-0.png" alt="Mask-R-CNN"></p><p>Mask R-CNN是一个概念上简单、灵活和通用的对象实例分割框架。该框架有效地检测图像中的对象，同时为每个实例生成高质量的分割掩码。其通过添加一个分支来与现有的边界框识别分支并行预测对象掩码，从而扩展了 Faster R-CNN。</p><p> Mask R-CNN，通过添加用于预测每个感兴趣区域 (RoI) 上的分割掩码的分支来扩展 Faster R-CNN，与用于分类和边界框回归的现有分支并行（图 1） . 掩码分支是应用于每个 RoI 的小 FCN，以像素到像素的方式预测分割掩码。</p><p>Faster R-CNN 并不是为网络输入和输出之间的像素到像素对齐而设计的。这在<code>RoIPool</code>如何为特征提取执行粗略的空间量化中最为明显。为了修复错位，我们提出了一个简单的、无量化的层，称为<code>RoIAlign</code>，它忠实地保留了精确的空间位置。尽管看似很小的变化，<code>RoIAlign</code>却产生了巨大的影响：它将掩码准确度提高了 10% 到 50%。其次，作者发现将<strong>掩码和类别预测解耦</strong>至关重要：他们独立地为每个类别预测一个二元掩码，类别之间没有竞争，并依靠网络的 RoI 分类分支来预测类别。</p><h4 id="二、Mask-R-CNN"><a href="#二、Mask-R-CNN" class="headerlink" title="二、Mask R-CNN"></a>二、Mask R-CNN</h4><p>在训练期间，作者将每个采样的 RoI 上的多任务损失定义为 L = L<sub>cls</sub> + L<sub>box</sub> + L<sub>mask</sub>。 分类损失 L<sub>cls</sub>和边界框损失 L<sub>box与 <code>Faster R-CNN</code> 中定义的相同。 掩码分支对每个 RoI 都有一个 Km<sup>2</sup> 维的输出，它编码 K 个分辨率为 m ×m 的二进制掩码，K为类别数。同时，为每像素应用了 sigmoid，并将 L<sub>mask</sub>定义为平均二元交叉熵损失。对于与真实类别 k 相关联的 RoI，L<sub>mask</sub>仅在第 k 个掩码上定义（其他掩码输出对损失没有贡献）。 </sub></p><p>其次，作者对 L<sub>mask</sub>的定义允许网络为每个类生成掩码，而无需类之间的竞争； 依靠专用的分类分支来预测用于选择输出掩码的类标签。 这将掩码和类别预测解耦。并得出这种方式是获得良好实例分割结果的关键。</p><p><code>Mask R-CNN</code> 的关键要素，包括像素到像素对齐，这是 Fast/Faster R-CNN 的主要缺失部分。 mask分支使用 <code>FCN</code>从每个 RoI 预测 m ×m 掩码，这种像素到像素的行为要求RoI特征（它们本身是小特征图）能够很好地对齐(因为<code>RoI Pooling</code>，将feature map分成7&times;7的时候，如果不能整除，那么余数将被下取整，但是下取整的部分对应回原图可能有几十个像素的偏差，这对分割任务极为不利)，以忠实地保留明确的每像素空间对应关系。 这促使了<code>RoIAlign</code>层的开发，它在掩码预测中起着关键作用。 </p><h4 id="三、ROIAlign"><a href="#三、ROIAlign" class="headerlink" title="三、ROIAlign"></a>三、ROIAlign</h4><p><code>RoIPool</code>是从每个 RoI 中提取小特征图（例如，7×7）的标准操作。 <code>RoIPool</code> 首先将一个浮点数的 RoI 量化为特征图的离散粒度，然后将这个量化的 RoI 细分为自己量化的空间 bin，最后聚合每个 bin 覆盖的特征值（通常通过最大池化）。 例如，通过计算 [x/16] 在<strong>连续坐标</strong> x 上执行量化，其中 16 是特征图步幅，[·] 是舍入； 同样，在划分为 bin 时执行量化（例如，7×7）。 这些量化会在 RoI 和提取的特征之间<strong>引入错位</strong>。 虽然这可能不会影响分类，这对小平移具有鲁棒性，但它对预测像素准确的掩码有很大的负面影响。 </p><p>为了解决这个问题，作者提出了一个<code>RoIAlign</code>层，它去除了<code>RoIPool</code>的粗糙量化，正确地将提取的<strong>特征</strong>与<strong>输入</strong>对齐。在这里作者提出了一个简单的方案，即避免对 RoI 边界或 bin 进行任何量化（用使用 x/16 代替 [x/16]）。 并且二使用双线性插值来计算每个 <code>RoI bin</code> 中四个定期采样位置的输入特征的精确值，并聚合结果（使用最大值或平均值），详情参见图 3。 注意到，只要不执行量化，结果对确切的采样位置或采样的点数并不敏感。 </p><p><img src="/2021/08/15/Mask-R-CNN/Mask-RCNN-1.png" alt="Mask-R-CNN"></p><p>虚线网格表示特征图，实线表示 RoI（在本例中为 2×2 个 bin），点表示每个 bin 中的 4 个采样点。 <code>RoIAlign</code> 从特征图上的附近网格点通过<strong>双线性插值计算每个采样点的值</strong>。 不对 RoI、其 bin 或采样点中涉及的任何坐标执行量化。 </p><h4 id="四、网络的HEAD"><a href="#四、网络的HEAD" class="headerlink" title="四、网络的HEAD"></a>四、网络的HEAD</h4><p><img src="/2021/08/15/Mask-R-CNN/Mask-RCNN-2.png" alt="Mask-R-CNN"></p><p> 上图左/右面板分别显示了 <code>ResNet C4</code> 和 <code>FPN</code> 主干的头部，其中添加了掩码分支。</p><h4 id="五、Training"><a href="#五、Training" class="headerlink" title="五、Training"></a>五、Training</h4><p>就像在 <code>Fast R-CNN</code> 中一样，如果 RoI 具有至少 0.5 的真实值框的 IoU，则它被认为是正的，否则被认为是负的。 掩码损失 L<sub>mask</sub>仅在正 RoI 上定义。 掩码目标是 RoI 与其关联的真实掩码之间的<strong>交集</strong>。 </p><p><a href="https://arxiv.org/pdf/1703.06870.pdf" target="_blank" rel="noopener">论文链接</a></p><p><a href="https://zhuanlan.zhihu.com/p/73138740#:~:text=ROI%20Pooling%20%E4%B8%8E%20ROI%20Align%20ROI%20Pooling%20%E6%98%AF%E5%9C%A8Faster,Align%E6%98%AF%E5%9C%A8Mask%20RCNN%E4%B8%AD%E6%8F%90%E5%87%BA%E6%9D%A5%E7%9A%84%E7%94%A8%E4%BA%8E%E6%94%B9%E8%BF%9BROI%20Pooling%E7%9A%84%E7%BC%BA%E9%99%B7%E3%80%82%20%E5%81%87%E8%AE%BE%E5%8E%9F%E5%9B%BE%E5%B0%BA%E5%AF%B8%E5%A4%A7%E5%B0%8F%E4%B8%BA256%C3%97256%EF%BC%8C%E9%A2%84%E6%B5%8BROI%E7%9A%84%E5%9D%90%E6%A0%87%E4%B8%BA%20%286.4%2C%2012.8%2C%20153.6%2C%20172.8%29%2C%E7%89%B9%E5%BE%81%E5%9B%BE%E2%80%A6" target="_blank" rel="noopener">ROI Align</a></p><p><a href="https://www.aiuai.cn/aifarm1404.html" target="_blank" rel="noopener">待参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mask-RCNN论文学习笔记&quot;&gt;&lt;a href=&quot;#Mask-RCNN论文学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Mask-RCNN论文学习笔记&quot;&gt;&lt;/a&gt;Mask-RCNN论文学习笔记&lt;/h2&gt;&lt;h4 id=&quot;一、概述&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="Deep Learning" scheme="http://yoursite.com/categories/Deep-Learning/"/>
    
    
      <category term="Deep Learning" scheme="http://yoursite.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>R-FCN</title>
    <link href="http://yoursite.com/2021/08/15/R-FCN/"/>
    <id>http://yoursite.com/2021/08/15/R-FCN/</id>
    <published>2021-08-15T12:19:17.000Z</published>
    <updated>2021-08-15T12:22:16.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="R-FCN-论文学习"><a href="#R-FCN-论文学习" class="headerlink" title="R-FCN:论文学习"></a>R-FCN:论文学习</h2><h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4><p>R-FCN，基于区域的全卷积网络框架，用于目标检测。该网络由共享的、完全卷积的架构组成。<a href="https://papers.nips.cc/paper/2016/file/577ef1154f3240ad5b9b413aa7346a1e-Paper.pdf" target="_blank" rel="noopener">论文链接</a></p><h4 id="二、为什么要提出该网络？"><a href="#二、为什么要提出该网络？" class="headerlink" title="二、为什么要提出该网络？"></a>二、为什么要提出该网络？</h4><p>因为，像Faster RCNN类的目标检测算法，在第一阶段得到RoIs和对应的scores后，会从原图和feature map上mapping每一个RoI，并做RoI Pooling，最后用两个全连接层去对每个类别分类和边界框回归(也就是资料中说的<strong>RoI-wise subnetwork</strong>)。作者认为这种使用全连接层的做法丢掉了对于目标位置信息的敏感性，会降低检测精度，并且对检测速度也有影响。所以，作者希望通过<strong>全卷积的方式</strong>去<strong>共享</strong>整个图像的<strong>计算</strong>，并且加强对<strong>位置的敏感性</strong>。</p><h4 id="三、如何修正已有网络的缺陷？"><a href="#三、如何修正已有网络的缺陷？" class="headerlink" title="三、如何修正已有网络的缺陷？"></a>三、如何修正已有网络的缺陷？</h4><p><strong>起源：</strong>在开创性的分类网络中如AlexNet, VGG中在卷积层后加一层最大池化层，然后后接几层全连接层。</p><p><strong>进展：</strong>最近最先进的分类网络中，已经开始设计全卷积网络，如ResNets-101、GoogLeNets。</p><p><strong>引入检测网络存在的问题：</strong>实验得出直接使用全卷积网络后，检测进度相当低，与网络卓越的分类精度不匹配。</p><p><strong>已有的修正方法：</strong>ResNet论文中，将Faster R-CNN检测器的RoI池化层被不自然地插入到两组卷积层之间，创建了一个更深的RoI-wise子网络。尽管提高了精度，但是降低了计算速度(由于per-ROI不共享)。</p><p><strong>对ResNet中不自然的设计如何解释？</strong></p><p>作者们认为，将RoI Pooling插入到两组卷积层之间是为了照顾物体检测时对平移变化的响应。但这种操作打破了图像分类的平移不变性(图像内目标的移动对分类结果应该是无差别的)。</p><p>同时，根据全卷积网络在ImageNet分类的领先结果表明，尽可能具有平移不变性在深度全卷积架构更可取(即，不论物体位置如何变化都能分类正确)。但目标检测任务需要在一定程度上具有平移可变的定位表示。例如：候选框内对象的平移应获得有意义的响应。</p><p><strong>那么如何在分类任务的平移不变性和检测任务中的平移可变性之间做出权衡呢？</strong></p><p>在ResNet中，假设越深的分类网络对于平移的敏感性越低(个人感觉有两个原因，第一是感受野变大，窗口大了看的东西多了，在哪里对分类任务无所谓；第二是越深的网络拟合的特征越细，辨识性越高)。所以较深的卷积层后可以损失分类对平移不变性的关注度，而提升检测任务对定位的敏感度。因此，ResNet论文在检测管道中，在RoI层后多了一组卷积层。当跨不同区域评估是，post-RoI卷积层不在具有平移不变性(这个可能与边界回归smootL1损失函数有关系，就是多个mapping后的RoI区域有共有部分是在统计边界回归是会累计误差，<strong>待确认</strong>)。</p><p><strong>那么R-FCN中是怎么做的呢？</strong></p><p>作者为了将目标检测中对位置的敏感性加入FCN中，设计了一组专门的卷积层作为FCN输出来构建一组位置敏感的分数图(score map)。这些分数图中的每一个都对相对空间位置信息进行编码。如：在对象的左侧。在FCN之后，附加了一个位置敏感的RoI池化层，让它从这些分数图中引导信息，后面没有权重(卷积/fc)层。该架构是端到端学习的。所有可学习层都是卷积层，并在整个图像上共享，但对目标检测所需的空间信息进行编码。</p><p><img src="/2021/08/15/R-FCN/R-FCN-0.png" alt="R-FCN"></p><p>R-FCN还是采用了两阶段的目标检测策略，先用RPN提取候选区域，并且RPN和R-FCN之间共享特征。系统的概览如下图所示(文本的图都来自于R-FCN<a href="https://papers.nips.cc/paper/2016/file/577ef1154f3240ad5b9b413aa7346a1e-Paper.pdf" target="_blank" rel="noopener">论文</a>)：</p><p><img src="/2021/08/15/R-FCN/F-RCN-1.png" alt="R-FCN"></p><p>对于RPN给出的RoIs，R-FCN架构旨在将RoI分类为目标类别和背景。在R-FCN中，所有可学习的权重层都是卷积层，并在整个图像上计算。最后一个卷积层为每个类别生成一组k<sup>2</sup>位置敏感分数图，因此具有k<sup>2</sup>(C+1)个输出通道，其中包含C个目标类别+一个背景类。k<sup>2</sup>得分图库对应于描述相对位置的k&times;k的空间网格。例如，当k&times;k=3&times;3时，9个分数图对目标的类别{左上、中上、右上、…、右下}的情况进行编码。</p><p>上面的讲法有点晕，其实，R-FCN的核心思想就是<strong>Position-sensitive score maps</strong>和<strong>Position-sensitive RoI pooling</strong>。那么简单来说<strong>Position-sensitive score maps</strong>就是要对RoI中的某些子区域定位的同时，学习子区域中的内容。比如将RoI划分成3&times;3=9个子区域，用左上、中上、右上、左中、中、右中、右左、右中、右下9个区域表示，每个区域可以看作目标的不同部位。那么假设C+1个类别，每个类别都会在9个子区域上去学习，这样就会生成9&times;(C+1)个channel，如图1所示，9个score maps，每个中有C+1个类。<strong>那么如何取定位每个子区域呢</strong>？这就需要用到<strong>Position-sensitive RoI pooling</strong>了，比如9个子区域中第i个子区域对应的是第i个score map，而第i个score map同样也有3&times;3=9个区域，那么RoI中第i个子区域对应的就是第i个score map中的第i个子区域(每个类有一个子区域，C+1各类有C+1个子区域)，对每个子区域取平均池化得到C+1个value，那么RoI中k&times;k个子区域就有k&times;k&times;(C+1)个value。</p><h4 id="四、具体的Position-sensitive-score-maps-amp-Position-sensitive-RoI-pooling如何做的？"><a href="#四、具体的Position-sensitive-score-maps-amp-Position-sensitive-RoI-pooling如何做的？" class="headerlink" title="四、具体的Position-sensitive score maps &amp; Position-sensitive RoI pooling如何做的？"></a>四、具体的Position-sensitive score maps &amp; Position-sensitive RoI pooling如何做的？</h4><p>R-FCN在共享卷积层的最后再接上一层卷积层，也就是位置敏感得分图(Position-sensitive score maps)，它其实是一层卷积层，他的height和width和共享卷积层的一样，但是它的channel=k<sup>2</sup>(C+1)。</p><p>为了将位置信息显式地编码到每个 RoI 中，将每个 RoI 矩形通过规则网格划分为 k ×k 个 bin。 对于大小为 w×h 的 RoI 矩形， 一个bin的尺寸大致为w/k&times;h/k。R-FCN构造最后一个卷积层来为每个类别生成 k<sup>2</sup> 得分图，也就对应到了k&times;k个区域。在第 (i,j) 个 bin (0 ≤i,j ≤k −1) 内，定义了一个<strong>位置敏感的 RoI 池化操作</strong>，该操作仅在第 (i,j) 个得分图上进行池化(Position-sensitive RoI pooling)： </p><script type="math/tex; mode=display">r_c(i,j|\Theta)=\sum_{(x,y)\in bin(i,j)}z_{i,j,c}(x+x_0,y+y_0|\Theta)/n\\r_c(i,j)是第 (i,j) 个 bin 中第 c 个类别的池化响应，z_{i,j,c} 是 k^2(C + 1) 个得分图中的一个得分图 \\(x0,y0) 表示 RoI 的左上角，n 是 bin 中的像素数， Θ 表示网络的所有可学习参数 \\第i个bin的跨度为\lfloor i\frac{w}{k} \rfloor\le x\le \lfloor (i+1)\frac{w}{k} \rfloor,\lfloor j\frac{h}{k} \rfloor\le y\le \lfloor (j+1)\frac{h}{k} \rfloor</script><p><img src="/2021/08/15/R-FCN/R-FCN-2.png" alt="R-FCN"></p><p>对于每个类别，它都有k<sup>2</sup>个score maps，那么按照上述的池化方式，可以RoI针对该类别可以得到k<sup>2</sup>个值，那么一共有C+1个类别，那么一个RoI就得到 k<sup>2</sup>(C+1)个值。那么对于每个类别，该类别的 k<sup>2</sup> 个值都表示该RoI属于该类别的响应值，那么将这 k<sup>2</sup>个数相加求平均就得到该类别的score(论文中的术语是对k<sup>2</sup>进行vote，averaging the score)，那么一共有C+1个scores，那么将这C+1个数使用简单的softmax函数就可以得到属于各个类别的概率了。</p><script type="math/tex; mode=display">r_c(\Theta)=\sum_{i,j}r_c(i,j|\Theta),S_c(\Theta)=e^{r_c(\Theta)}/\sum^{C}_{c'=0}e^{r_c(\Theta)}</script><p>上述概率用于评估训练期间的交叉熵损失和推理期间的 RoI 排名。 </p><p><img src="/2021/08/15/R-FCN/R-FCN-4.png" alt="R-FCN"></p><h4 id="五、如何回归边框？"><a href="#五、如何回归边框？" class="headerlink" title="五、如何回归边框？"></a>五、如何回归边框？</h4><p>按照“position-sensitive score map”+“Position-sensitive RoI pooling”思路，其会让每一个RoI得到 C+1 个数作为每个类别的score，那么现在每个RoI还需要 4 个数作为”回归的偏移量”，也就是“坐标和长宽”的偏移量，所以仿照分类设计的思想，还需要一个类似于position-sensitive  score map的用于回归的score  map。那么现在就这样设计：在ResNet的共享卷积层的最后一层上，接上一个与position-sensitive score  map并行的（sibling）score maps，该score maps用于regression，而该regression score map的维度应当是4k<sup>2</sup>，那么在经过Position-sensitive RoI pooling操作后还是4k<sup>2</sup>维的向量，通过平均投票将其聚合为一个4维向量(k<sup>2</sup>个t<sub>x</sub>,t<sub>y</sub>,t<sub>w</sub>,t<sub>h</sub>，每个t<sub>*</sub>求和/k<sup>2</sup>，*表示x,y,w,h)。每一个RoI就会得到4个数作为该RoI的坐标和长宽的偏移量(这里执行了与类无关的边界框回归)。</p><h4 id="六、网络的训练"><a href="#六、网络的训练" class="headerlink" title="六、网络的训练"></a>六、网络的训练</h4><p>在每个 RoI 上定义的损失函数是交叉熵损失和框回归损失的总和：</p><script type="math/tex; mode=display">L(s,t_{x,y,w,h})=L_{cls}(S_{c^*})+\lambda[c^*\gt0]L_{reg}(t,t^*)\\c^*是RoI的ground-truth标签，L_{cls}(S_{c^*})=-log(S_{c^*})是分类的cross-entropy \,\,loss\\L_{reg}是边界回归损失，t^*表示ground \,\,truth \,\,box,[c^*\gt1]是指示函数条件满足为1，否则为0\\平衡参数\lambda设置为1，定义正样本为RoI与GT的IoU\ge0.5</script><p>在训练的时候不会对所有的RoI进行处理，而是评估所有N个RoI的损失。然后按损失对所有正负RoI进行排序，并选择具有最高损失的B=128个RoIs。</p><p><a href="https://zhuanlan.zhihu.com/p/30867916" target="_blank" rel="noopener">参考链接</a></p><p><a href="https://zhuanlan.zhihu.com/p/24780433" target="_blank" rel="noopener">扩展链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;R-FCN-论文学习&quot;&gt;&lt;a href=&quot;#R-FCN-论文学习&quot; class=&quot;headerlink&quot; title=&quot;R-FCN:论文学习&quot;&gt;&lt;/a&gt;R-FCN:论文学习&lt;/h2&gt;&lt;h4 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Deep Learning" scheme="http://yoursite.com/categories/Deep-Learning/"/>
    
    
      <category term="Deep Learning" scheme="http://yoursite.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Faster-R-CNN</title>
    <link href="http://yoursite.com/2021/08/15/Faster-R-CNN/"/>
    <id>http://yoursite.com/2021/08/15/Faster-R-CNN/</id>
    <published>2021-08-15T11:37:33.000Z</published>
    <updated>2021-08-15T11:41:57.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Faster-RCNN"><a href="#Faster-RCNN" class="headerlink" title="Faster RCNN"></a>Faster RCNN</h2><h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4><p>在测试阶段，使用选择性搜索获取区域提议成为了算法的性能瓶颈。其次，卷积等处理在GPU上运行，而选择性搜索在CPU上运行，导致了运行时比较并不公平 。</p><p>一种可以想到的解决策略是将selective search通过GPU实现一遍，但是这种实现方式忽略了接下来的检测网络可以与区域建议方法共享计算的问题。因此Faster RCNN从提高区域建议的速度出发提出了region proposal network 用以通过GPU实现快速的区域建议。</p><p>作者观察到，基于区域的检测器（如 Fast RCNN）使用的卷积特征图也可用于生成区域提议。 在这些卷积特征之上，我们通过添加一些额外的卷积层来构建 RPN，这些卷积层同时回归常规网格上每个位置的区域边界和目标分数。 因此，RPN 是一种全卷积网络 (FCN) ，可以专门针对生成检测建议的任务进行端到端的训练。 Faster RCNN的整体结构如下：</p><h4 id="二、Faster-RCNN"><a href="#二、Faster-RCNN" class="headerlink" title="二、Faster RCNN"></a>二、Faster RCNN</h4><p>Faster R-CNN，由两个模块组成。 第一个模块是提取区域的深度全卷积网络，第二个模块是使用建议区域的 Fast R-CNN 检测器。 </p><p><img src="/2021/08/15/Faster-R-CNN/Faster-RCNN.png" alt="Faster-R-CNN"></p><ul><li><p>输入图片</p></li><li><p>backbone: 卷积特征提取，共享基础卷积层。例如VGG16，或Resnet101，去除其中的全连接层，只留下卷基层，输出下采样后的特征图。</p></li><li><p>RPN产生proposals</p><p>利用最后卷积层的feature map外接几个卷积层构成全卷积网络，通过softmax判断anchors属于positive或者negative，再利用bounding box regression修正anchors获得精确的proposals。</p></li><li><p>Fast RCNN分类proposals: 利用卷积提取到的特征+RPN提取出的region proposals</p><ul><li>Roi Pooling：该层收集输入的feature maps和proposals，综合这些信息后提取proposal feature maps，送入后续全连接层判定目标类别。</li><li>Classification：利用proposal feature maps计算proposal的类别，同时再次bounding box regression获得检测框最终的精确位置。</li></ul></li></ul><h4 id="三、Region-Proposal-Networks"><a href="#三、Region-Proposal-Networks" class="headerlink" title="三、Region Proposal Networks"></a>三、Region Proposal Networks</h4><p>区域提议网络 (RPN) 将图像（任意大小）作为输入并输出一组矩形对象提议，每个提议都有一个目标得分。 整个RPN过程使用全卷积网络进行建模，由于为了与Fast RCNN目标检测网络进行共享计算，所以RPN和Fast RCNN共享一组公共卷积层。</p><p><strong>如何产生区域提议？</strong></p><ul><li>在最后的共享卷积层输出的卷积feature map上滑动一个小网络n*n</li><li>将n*n 空间窗口作为输入映射到一个低维特征(ZF为256维，VGG为512维，后面接ReLU)</li><li>低维特征被输入到两个子全连接层：一个边界框回归层（reg）和一个边界框分类层（cls）</li></ul><p><img src="/2021/08/15/Faster-R-CNN/Faster-RCNN-1.png" alt="Faster-R-CNN"></p><p><img src="/2021/08/15/Faster-R-CNN/Faster-RCNN-2.png" alt="Faster-R-CNN"></p><p>从上图中可以看到，n为3的卷积核对最后一层feature map做卷积后生成1*256 / 1*512维的特征，经过Relu后，使用两个1*1的卷积层生成两个子网络，分别用于分类anchor获得正类或负类。另一个子网络用于回归anchor的bounding box，已获得较精准的proposal。最后的Proposal层负责综合position anchors和对应的bounding box regression偏移量获取proposals。此时已完成了目标定位的功能。</p><h5 id="3-1-Anchors"><a href="#3-1-Anchors" class="headerlink" title="3.1 Anchors"></a>3.1 Anchors</h5><p>在每个滑动窗口位置，同时预测多个区域提议，其中每个位置的最大可能提议数表示为 k。 因此，reg 层有 4k 个输出编码用于表示k个框的坐标，cls 层输出 2k 个分数，用于估计区域提议是目标或背景的概率 。</p><p> 锚点位于相关滑动窗口的中心，并与缩放尺度和纵横比相关联。 默认情况下，我们使用 3 个缩放尺度和 3 个纵横比，在每个滑动位置产生 k = 9 个锚点。 对于大小为 W × H的卷积特征图，总共有 WHk 个锚点。 </p><p><strong>Translation-Invariant Anchors</strong></p><p>由于采用RPN去获取anchors，所以保证了待定位物体的平移不变性。同时，因为anchors是以滑动窗口的位置(针对最后一层feature map)去产生固定尺度和纵横比的anchor，所以减少了模型的大小。稳重例举了MultiBox中的例子，其中MultiBox需要(4+1)*800维全连接输出层。而基于anchors的方法，因为k=9，每个anchor有4+2个输出，所以总共(4+2)&times;9维的卷积输出。</p><p><strong>Multi-Scale Anchors as Regression References</strong></p><p>由于目标检测的目标尺度可能相差很大，因此我们需要尽可能产生不同尺寸的region proposals，常见的有两种方法，加上本文的一共三种方法：</p><ul><li>图像金字塔：通过将图像放缩到不同的尺寸，然后提取特征去做或先对于图像提取卷积特征，然后将卷积特征放缩到不同的尺寸。</li><li>滤波器金字塔：在特征图上使用多个尺度（和/或纵横比）的滑动窗口。 例如：DPM中使用不同的过滤器尺寸分别训练不同纵横比的模型(5&times;7 and 7&times;5)。</li><li>anchor金字塔：多个尺度和纵横比的锚框对边界框进行分类和回归。 它只依赖单一尺度的图像和特征图，并使用单一尺寸的过滤器（特征图上的滑动窗口）。</li></ul><p><img src="/2021/08/15/Faster-R-CNN/Faster-RCNN-3.png" alt="Faster-R-CNN"></p><h5 id="3-2-Loss-Function"><a href="#3-2-Loss-Function" class="headerlink" title="3.2 Loss Function"></a>3.2 Loss Function</h5><p>RPN包含两个网络分支，分类层以及回归层。分类层给出一个二分类label，也就是这个region是否包含目标，回归层产生目标的位置。其中与任意ground-truth box的IOU大于0.7即认为是包含目标的或anchor与真实的box重叠的IoU最大(论文中说如果只考虑IoU&gt;0.7有些情况找不到正样例)。如果anchor与所有真值框的 IoU 比率低于 0.3，为anchor分配负标签。 既不是正面也不是负面的锚点对训练目标没有贡献。 (这里相当于给anchor生成label，为了与之后的预测值计算损失)</p><p><strong>RPN还是采用多任务损失：</strong></p><script type="math/tex; mode=display">L(\{p_i\},\{t_i\})=\frac{1}{N_{cls}}\sum_{i}L_{cls}(p_i,p^*_i)+\lambda\frac{1}{N_{reg}}\sum_ip^*_iL_{reg}(t_i,t^*_i)\\i是mini-batch中anchor的索引，p_i是anchor_i预测的目标概率，p^*_i是groud\quad truth\\t_i是预测边界框的坐标(也就是anchor放大16倍后在原图中对应的坐标)，t^*_i是groud \quad truth\\p^*_iL_{reg}指出回归损失仅仅对正的anchors有用，即p^*_i=1\\N_{cls}是正则化项，等于mini-batch的大小，N_{reg}也是正则化项，等于anchor的数量</script><p>L<sub>cls</sub>用的是log loss用于区分目标或背景。L<sub>reg</sub>用的是smooth L<sub>1</sub>损失。</p><p><strong>边界回归使用下面四个参数：</strong></p><script type="math/tex; mode=display">t_x=(x-x_a)/w_a,t_y=(y-y_a)/h_a\\t_w=\log(w/w_a),t_h=\log(h/h_a)\\t^*_x=(x^*-x_a)/w_a,t^*_y=(y^*-y_a)/h_a\\t^*_w=\log(w^*/w_a),t^*_h=\log(h^*/h_a)\\其中，x，y,w,h分别代表box的中心坐标和它的宽、高\\x对应的是预测框，x_a对应的是anchor框，x^*对应的是真实框\\从回归框的损失函数看出，以anchor框为参照物(t_i^a)，让t_x，t_y,t_h,t_w接近t_i^*</script><p>下面摘录<a href="https://zhuanlan.zhihu.com/p/31426458" target="_blank" rel="noopener">知乎白裳</a>给出的bounding box regression原理介绍</p><p><img src="/2021/08/15/Faster-R-CNN/Faster-RCNN-6.png" alt="Faster-R-CNN"></p><p>上图来自<a href="https://www.zhihu.com/people/george-zhang-84" target="_blank" rel="noopener">白裳</a>，图中绿色框为飞机的Ground Truth(GT)，红色为提取的positive  anchors，即便红色的框被分类器识别为飞机，但是由于红色的框定位不准，这张图相当于没有正确的检测出飞机。所以我们希望采用一种方法对红色的框进行微调，使得positive anchors和GT更加接近。</p><p>对于窗口一般使用四维向量(x,y,w,h)表示，分别表示窗口的中心点坐标和宽高。对于上图，红色的框A代表原始的positive Anchors，绿色的框G代表目标的GT，我们的目标是寻找一种关系，使得<strong>输入原始的anchor A</strong>经过<strong>映射</strong>得到一个跟<strong>真实窗口G更接近的回归窗口G’</strong>，即：</p><p><img src="/2021/08/15/Faster-R-CNN/Faster-RCNN-4.png" alt="Faster-R-CNN"></p><ul><li><p>给定anchor A=(A<sub>x</sub>，A<sub>y</sub>，A<sub>w</sub>，A<sub>h</sub>)和GT=[G<sub>x</sub>，G<sub>y</sub>，G<sub>w</sub>，G<sub>h</sub>]</p></li><li><p>寻找一种变换F，使得：F(A<sub>x</sub>，A<sub>y</sub>，A<sub>w</sub>，A<sub>h</sub>)=(G’<sub>x</sub>，G’<sub>y</sub>，G’<sub>w</sub>，G’<sub>h</sub>)，其中</p><p>(G’<sub>x</sub>，G’<sub>y</sub>，G’<sub>w</sub>，G’<sub>h</sub>)&approx;(G<sub>x</sub>，G<sub>y</sub>，G<sub>w</sub>，G<sub>h</sub>)</p></li></ul><p><strong>那么如何变换呢？</strong></p><script type="math/tex; mode=display">先平移：G'_x=A_w\cdot d_x(A)+A_x;G'_y=A_h\cdot d_y(A)+A_y\\再缩放：G'_w=A_w\cdot exp(d_x(A));G'_y=A_h\cdot exp(d_y(A))</script><p>注意：当输入的Proposal和Groud Truth相差较小时(RCNN设置的是IoU&gt;0.6)，可以认为这种变幻是一种线性变幻，那么可以用线性回归来建模对窗口进行微调。否则就变成了复杂的非线性问题(可以查看G-CNN:an iterative Grid Based Object Detector来定位)</p><p><strong>那么如何使用线性回归获得d<sub>x</sub>(A),d<sub>y</sub>(A),d<sub>w</sub>(A),d<sub>h</sub>(A)?</strong></p><p>线性回归就是给定输入的特征向量X，学习一组参数W，使得经过线性回归后的值跟真实值Y非常接近。即：Y=WX</p><p>对于上述的问题，输入为：</p><ol><li>cnn feature map, 定义为&Phi;</li><li>anchors和groud Truth，用于计算gt与anchor的变换量(t<em><sub>x</sub>,t\</em><sub>y</sub>,t*<sub>w</sub>,t*<sub>h</sub>)作为监督信号</li></ol><p>输出为：d<sub>x</sub>(A),d<sub>y</sub>(A),d<sub>w</sub>(A),d<sub>h</sub>(A)</p><p><strong>目标函数：</strong></p><script type="math/tex; mode=display">d_*(A)=W^T_*\cdot \phi(A),\phi(A)是对应anchor的feature\,\,map组成的特征向量,W_*是需要学习的参数\\d_*(A)是得到的预测值，*表示x,y,w,h,说明每一个变换对应一个上述的目标函数\\为了让预测值d_x(A)与真实值t_x差距最小，设计L1损失函数：Loss=\sum^{N}_{i}|t^i_*-W^T_*\cdot \phi(A^i)|\\函数优化的目标为:\hat{W_x}=argmin_{W*}\sum^{n}_{i}|t^i_x-W^T_*\cdot\phi(A^i)|+\lambda||W_x||</script><h5 id="3-3-Proposal-Layer"><a href="#3-3-Proposal-Layer" class="headerlink" title="3.3 Proposal Layer"></a>3.3 Proposal Layer</h5><p>Proposal Layer负责综合所有d<sub>x</sub>(A),d<sub>y</sub>(A),d<sub>w</sub>(A),d<sub>h</sub>(A)变换量和positive anchors，计算出精准的proposal，送入后续RoI Pooling Layer。</p><p>输入：1.分类器结果；2、边界回归d<sub>x</sub>(A),d<sub>y</sub>(A),d<sub>w</sub>(A),d<sub>h</sub>(A)；3、im_info；4、feat_stride=16</p><p>im_info=[M,N,scale_factor]保存了Faster RCNN传入reshape到固定M&times;N时缩放的所有信息</p><p>处理顺序：</p><ol><li>生成anchors，利用d<sub>x</sub>(A),d<sub>y</sub>(A),d<sub>w</sub>(A),d<sub>h</sub>(A)对所有的anchors做bbox regression回归（这里的anchors生成和训练时完全一致)</li><li>按照输入的positive softmax scores由大到小排序anchors，提取前pre_nms_topN(e.g. 6000)个anchors，即提取修正位置后的positive anchors</li><li>限定超出图像边界的positive anchors为图像边界，防止后续roi pooling时proposal超出图像边界</li><li>剔除尺寸非常小的positive anchors</li><li>对剩余的positive anchors进行NMS（nonmaximum suppression）</li></ol><h5 id="3-4-训练RPNs"><a href="#3-4-训练RPNs" class="headerlink" title="3.4 训练RPNs"></a>3.4 训练RPNs</h5><p>首先，读取RBG提供的预训练好的model（本文使用VGG），开始迭代训练。如stage1_rpn_train.pt网络结构</p><p><img src="/2021/08/15/Faster-R-CNN/0.jpg" alt="Faster-R-CNN"></p><p>与检测网络类似的是，依然使用Conv Layers提取feature maps。整个网络使用的Loss如下：</p><script type="math/tex; mode=display">L(\{p_i\},\{t_i\})=\frac{1}{N_{cls}}\sum_{i}L_{cls}(p_i,p^*_i)+\lambda\frac{1}{N_{reg}}\sum_ip^*_iL_{reg}(t_i,t^*_i)\\i是anchor的索引，p_i表示positive\,\,softmax\,\,probability就是anchors中有的不会被用到，有的是negative,有的是positive。\\p^*_i代表对应的GT \,\,predict概率即当第i个anchor与GT间IoU\gt0.7时，认为该anchor为positive,p^*_i=1；反之IoU\lt0.3时，认为该anchor是negative,p^*_i=0;\\那些0.3\lt IoU\lt0.7的anchor不参与训练。t代表predict\,\,bounding\,\,box,t^*_i代表对应的positive\,\,anchor对应的GT\,\,box。可以看到，整个Loss分为2个部分：\\cls-loss，即rpn_cls_loss层计算的softmax loss，用于分类anchors为positive与negative的网络训练;\\reg-loss，即rpn_loss_bbox层计算的soomth L1 loss，用于bounding box regression网络训练。该loss中乘了p^*_i，相当于只关心positive\,\,anchors的回归\\由于在实际过程中，N_{cls}和N_{reg}差距过大，用参数λ平衡二者（如N_{cls}=256，N_{reg}=2400时,设置\lambda=\frac{N_{reg}}{N_{cls}}\approx10）</script><h5 id="3-5-收集Proposals"><a href="#3-5-收集Proposals" class="headerlink" title="3.5 收集Proposals"></a>3.5 收集Proposals</h5><p><img src="/2021/08/15/Faster-R-CNN/1.jpg" alt="Faster-R-CNN"></p><p>利用之前的RPN网络，获取proposal rois，同时获取positive softmax probability，然后将获取的信息保存在python pickle文件中。</p><h4 id="四、训练Faster-RCNN网络"><a href="#四、训练Faster-RCNN网络" class="headerlink" title="四、训练Faster RCNN网络"></a>四、训练Faster RCNN网络</h4><ol><li>在已经训练好的model上，训练RPN网络，对应stage1_rpn_train.pt</li><li>利用步骤1中训练好的RPN网络，收集proposals，对应rpn_test.pt</li><li>第一次训练Fast RCNN网络，对应stage1_fast_rcnn_train.pt</li><li>第二训练RPN网络，对应stage2_rpn_train.pt</li><li>再次利用步骤4中训练好的RPN网络，收集proposals，对应rpn_test.pt</li><li>第二次训练Fast RCNN网络，对应stage2_fast_rcnn_train.pt</li></ol><p>可以看到训练过程类似于一种“迭代”的过程，不过只循环了2次。至于只循环了2次的原因是应为作者提到：”A similar alternating  training can be run for more iterations, but we have observed negligible improvements”，即循环更多次没有提升了。</p><p><img src="/2021/08/15/Faster-R-CNN/2.jpg" alt="Faster-R-CNN"></p><p>读取之前保存的pickle文件，获取proposals与positive probability。从data层输入网络，然后：</p><ol><li>将提取的proposals作为rois传入网络</li><li>计算bbox_inside_weights+bbox_outside_weights，作用与RPN一样，传入soomth_L1_loss layer</li></ol><p>​    <a href="https://zhuanlan.zhihu.com/p/31426458" target="_blank" rel="noopener">推荐阅读知乎-白裳</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Faster-RCNN&quot;&gt;&lt;a href=&quot;#Faster-RCNN&quot; class=&quot;headerlink&quot; title=&quot;Faster RCNN&quot;&gt;&lt;/a&gt;Faster RCNN&lt;/h2&gt;&lt;h4 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Deep Learning" scheme="http://yoursite.com/categories/Deep-Learning/"/>
    
    
      <category term="Deep Learning" scheme="http://yoursite.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Fast-R-CNN</title>
    <link href="http://yoursite.com/2021/08/15/Fast-R-CNN/"/>
    <id>http://yoursite.com/2021/08/15/Fast-R-CNN/</id>
    <published>2021-08-15T11:26:06.000Z</published>
    <updated>2021-08-15T11:37:22.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Fast-R-CNN学习笔记"><a href="#Fast-R-CNN学习笔记" class="headerlink" title="Fast R-CNN学习笔记"></a>Fast R-CNN学习笔记</h2><p><strong>目标检测主要需要解决两个问题：1、必须处理大量候选框；2、必须对候选框进行细化以实现精确定位。</strong></p><h4 id="一、R-CNN和SPPnet的问题"><a href="#一、R-CNN和SPPnet的问题" class="headerlink" title="一、R-CNN和SPPnet的问题"></a>一、R-CNN和SPPnet的问题</h4><p>1、R-CNN有如下明显的缺陷：</p><ul><li>训练一个多阶段的pipeline</li><li>训练在空间和时间上都是昂贵的。</li><li>物体检测很慢 </li></ul><p>2、SPPnet有如下缺陷：</p><ul><li>训练一个多阶段的pipeline<ul><li>特征提取</li><li>使用log loss微调一个网络</li><li>训练SVMs</li><li>拟合回归边界框</li></ul></li><li>论文中提出的fine-tune很难更新spatial pyramid pooling层之前的卷据层，对于更深的网络不适用</li></ul><h4 id="二、Fast-RCNN的架构和训练"><a href="#二、Fast-RCNN的架构和训练" class="headerlink" title="二、Fast RCNN的架构和训练"></a>二、Fast RCNN的架构和训练</h4><ol><li>输入为一整个图像和一组候选框</li><li>网络首先使用卷积和最大池化层处理整个图像，生成一组特征图</li><li>将每个候选框(region of interest)映射到特征图中，使用特征图中的RoI做RoI pooling，生成一个固定尺寸的特征向量(每个RoI对应一个特征向量)</li><li>每个特征向量后面接一系列的全连接层</li><li>全连接层后分两个子分支输出层：一个分支用softmax概率估计K+1个目标的类别，K个目标加一个背景类；另一个分支对于K个目标中的每个输出4个实数，每组 4 个值编码 K 个类别之一的精细边界框位置 。</li></ol><p><img src="/2021/08/15/Fast-R-CNN/FastRCNN-1.png" alt="Fast-R-CNN"></p><h4 id="2-1-The-RoI-pooling-layer"><a href="#2-1-The-RoI-pooling-layer" class="headerlink" title="2.1 The RoI pooling layer"></a>2.1 The RoI pooling layer</h4><p>RoI 池化层使用最大池化将任何有效感兴趣区域内的特征转换为具有固定空间范围 H × W（例如，7 × 7）的小特征图，其中 H 和 W 是层超参数，它们是 独立于任何特定的RoI。论文中指出每个感兴趣区域被定义为一个四元组(r,c,h,w)，指出长方形窗口的左上角坐标，宽和高。</p><ul><li>划分特征图中hxw的RoI窗口为HxW个子窗口网格，共有h/h x w/W个子窗口</li><li>每个子窗口运用最大池化，相当于吧h x w尺寸的图像缩放为H x W</li><li>每个RoI根据网络有多个channel，对每个channel分别进行网格的划分和最大池化</li></ul><h4 id="2-2-Initializing-from-pre-trained-networks"><a href="#2-2-Initializing-from-pre-trained-networks" class="headerlink" title="2.2  Initializing from pre-trained networks"></a>2.2  Initializing from pre-trained networks</h4><ul><li>使用ImageNet预训练的网络初始化Fast R-CNN网络</li><li>最后一层池化层用RoI池化层代替，并根据第一层全连接层的输入，设置H和W的值以便于池化操作</li><li>网络的最后的全连接层和softmax用两个兄弟层代替，分别用于分类和回归</li><li>网络的输入修改为两个：一个为图像的列表，一个为每个图像对应的RoIs列表 </li></ul><h4 id="2-3-Fine-tuning-for-detection"><a href="#2-3-Fine-tuning-for-detection" class="headerlink" title="2.3  Fine-tuning for detection"></a>2.3  Fine-tuning for detection</h4><p>用反向传播训练所有网络权重是 Fast R-CNN 的一个重要能力。 首先，让我们阐明为什么 SPPnet 无法更新空间金字塔池化层以下的权重。 </p><p>根本原因是当每个训练样本（即 RoI）来自不同的图像时，通过 SPP 层的反向传播效率非常低，这正是 R-CNN 和 SPPnet 网络的训练方式。 </p><p>作者在这里提出了更有效的训练方法，在Fast R-CNN训练时，采用分层mini-batch的随机梯度下降法。首先，选取N张图像，然后从N张图像中每张选取R/N个RoIs。<strong>来自同一图像的 RoI 在前向和后向传递中共享计算和内存。 使 N 小会减少小批量计算。</strong> 例如：N=2，R=128。选取两张图像每张图像选取64个RoIs的效率要比选取128张不同的图像在训练时更快。(作者实验得出同一张图像的RoI并不影响训练的收敛速度，反而效果更好)</p><p>除了分层采样之外，Fast R-CNN 还使用了带有微调阶段的简化训练过程，该阶段<strong>联合优化</strong>了 softmax 分类器和边界框回归器，而不是在三个单独的阶段训练 softmax 分类器、SVM 和回归器。</p><h5 id="Multi-task-loss"><a href="#Multi-task-loss" class="headerlink" title="Multi-task loss"></a>Multi-task loss</h5><p>Fast R-CNN有两个兄弟输出层。</p><ul><li>一个针对每个RoI输出K+1个类别离散的概率分布。p=(p<sub>0</sub>,…,p<sub>K</sub>)。像往常一样，p由全连接层的 K +1 个输出上的 softmax 计算得到。</li><li>第二个兄弟层为K个目标类中的每个输出边界框回归偏移量</li></ul><script type="math/tex; mode=display">t^k=(t^k_x,t^k_y,t^k_w,t^k_h)，索引为k(其中 t_k 指定相对于对象提议的尺度不变平移和对数空间高度/宽度偏移。 )</script><p>每个训练 RoI 都标有真实类别 u 和真实边界框回归目标 v。在每个标记的 RoI 上使用多任务损失 L 来联合训练分类和边界框回归： </p><script type="math/tex; mode=display">L(p,u,t^u,v)=L_{cls}(p,u)+\lambda[\mu\ge1]L_{loc}(t^u,v)\\L_{cls}(p,u)=-logp_u是真实类u的log损失；\\L_{loc}被定义为回归目标u类上真实边界框的一个元组，v=(v_x,v_y,v_w,v_h),t^u=(t^k_x,t^k_y,t^k_w,t^k_h)是对类u预测的元组\\[u\ge1]是Iverson\quad bracket\quad indicator\quad function,当u\ge 时，为1；否则为0\\</script><p>按照惯例，所有被预测的背景类标记为 u = 0。对于背景 RoI，没有真实边界框的概念，因此忽略 L<sub>loc</sub>。对于边界回归使用如下损失：</p><script type="math/tex; mode=display">L_{loc}(t^u,v)=\sum_{i\in{x,y,w,h}}smooth_{L1}(t^u_i-v_i),其中\\smooth_{L1}(x)=\begin{cases}0.5\cdot x^2\quad \quad if |x|\lt1\\|x|-0.5\quad otherwise.\end{cases}</script><p>论文中指出smooth<sub>L1</sub>一个稳健的 L1 损失，对异常值的敏感度低于 R-CNN 和 SPPnet 中使用的 L2 损失。 当回归目标无界时，使用 L2 损失进行训练可能需要仔细调整学习率，以防止梯度爆炸。 smooth<sub>L1</sub>消除了这种敏感性。 </p><p>方程中的超参数λ控制两个任务损失之间的平衡。由于作者将真实回归目标 v<sub>i</sub> 归一化为具有零均值和单位方差。 所有实验都使用 λ = 1。</p><h5 id="Mini-batch-sampling"><a href="#Mini-batch-sampling" class="headerlink" title="Mini-batch sampling"></a>Mini-batch sampling</h5><p>在微调期间，每个 SGD mini-batch 由 N = 2 个图像构成，随机均匀选择（按照惯例，实际上迭代数据集的排列）。 我们使用大小为 R = 128 的小批量，从每个图像中采样 64 个 RoI。与论文Rich feature hierarchies for accurate object detection and semantic segmentation中一样，我们从与真实边界框重叠IoU&ge; 0.5 的对象提议中获取 25% 的 RoI。 这些 RoI 包括标有前景对象类的示例，即 u ≥ 1。其余的 RoI 是从目标建议与真实边界框IoU在区间[0.1,0.5)的最大值中采样，与SPPNet一致。 这些是背景示例，并用 u = 0 标记。 0.1 的较低阈值似乎充当了启发式的困难示例挖掘(ject detection with discriminatively trained part based models.)。 在训练期间，图像以 0.5 的概率水平翻转。 没有使用其他数据增强。 <strong>来自相同图像的RoI在向前和向后传播中共享计算和内存。</strong></p><h5 id="Back-propagation-through-RoI-pooling-layers"><a href="#Back-propagation-through-RoI-pooling-layers" class="headerlink" title="Back-propagation through RoI pooling layers"></a>Back-propagation through RoI pooling layers</h5><p>为清楚起见，作者假设每个小批量（N = 1）只有一张图像，但对 N &gt; 1 的扩展很简单，因为前向传递独立处理所有图像。 设 x<sub>i</sub> ∈ R 是输入到 RoI 池化层的第 i 个激活输入(这里有点晕，网上查了很多解释，应该是整个feature map中的输入层节点)，让 y<sub>rj</sub> 是来自第 r 个 RoI 的第 j 个输出(也就是候选区域中的第j个输出层节点)。 RoI 池化层计算使用下面的式子获取RoI Pooling层的输出：</p><script type="math/tex; mode=display">y_{rj}=x_{i*(r,j)},其中，i*(r,j)=argmax_{i'\in R(r,j)}x_{i'}</script><p>R(r, j) 是输出单元 y<sub>rj</sub> 最大池化所对应的输入子窗口中的索引集(指示那个候选区域的那个最大值点被选中作为输出)。 单个 x<sub>i</sub> 可以分配给几个不同的输出 y<sub>rj</sub>(就是多个候选区域有重叠的时候，x<sub>i</sub> 为重叠的像素点集) 。 </p><p>首先看看，普通的max pooling层如何求导？</p><script type="math/tex; mode=display">设x_i为输入层节点，y_i为输出层节点，那么损失函数L对输入层节点x_i的梯度为：\\\frac{\partial L}{\partial x_i}=\begin{cases}0,\quad \quad \delta(i,j)=false\\\frac{\partial L}{\partial y},\quad \delta(i,j)=true\end{cases}\\判决函数\delta(i,j)表示输入i节点是否被输出j节点选为最大值输出\\不选中有两种可能\delta(i,j)=false;x_i不在y_i范围内，或者x_i不是最大值\\选中\delta(i,j)=true;由链式规则可知损失函数L相对 x_i的梯度等于损失函数L相对 y_i的梯度\times y_i对x_i的梯度(y_i对x_i的梯度恒等于1)</script><p><img src="/2021/08/15/Fast-R-CNN/fast-rcnn.png" alt="Fast-R-CNN"></p><p>对于RoI max pooling层，设 x<sub>i</sub>为输入层的节点， y<sub>rj</sub> 为第r个候选区域的第j个输出节点，一个输入节点可能和多个输出节点相关连，如下图所示，输入节点7和两个候选区域输出节点相关连；</p><p><img src="/2021/08/15/Fast-R-CNN/ROI-Pooling1.png" alt="Fast-R-CNN"></p><p>对于输出节点<strong>7</strong>的反向传播如下图所示：</p><p><img src="/2021/08/15/Fast-R-CNN/ROI-Pooling2.png" alt="Fast-R-CNN"></p><p>对于同一个feature map中不同的候选区域，节点7都存在梯度。所以反向传播中损失函数L对输入节点x<sub>i</sub>的梯度为损失函数L对各个<strong>有可能的</strong>候选区域r输出y<sub>rj</sub>[x<sub>i</sub>中候选区域r的第j个输出节点被选为最大值 ]梯度的累加。</p><p>RoI 池化层的向后函数通过计算损失函数关于每个输入变量 xi 及通过下式argmax所选择的值偏导数： </p><script type="math/tex; mode=display">\frac{\partial L}{\partial x_i}=\sum_{r}\sum_{j},[i=i*(r,j)]指示函数\frac{\partial L}{\partial y_{rj}},[i=i*(r,j)]上文提到的指示函数</script><p>判决函数  [i=i∗(r,j)] 表示  <strong>i</strong> 节点是否被候选区域 <strong>r</strong> 的第 <strong>j</strong> 个输出节点选为最大值输出，若是，则由链式规则可知损失函数L相对  xi 的梯度等于(损失函数 L 相对 yri 的梯度)&times;( yrj 对 xi 的梯度),其中， yrj 对 xi 的梯度恒等于1。</p><p><a href="https://blog.csdn.net/Wonder233/article/details/53671018" target="_blank" rel="noopener">参考链接</a></p><h5 id="SGD-hyper-parameters"><a href="#SGD-hyper-parameters" class="headerlink" title="SGD hyper-parameters"></a>SGD hyper-parameters</h5><ul><li>除了修改增加的层，原有的层参数已经通过预训练方式初始化；</li><li>用于分类的全连接层以均值为0、标准差为0.01的高斯分布初始化，用于回归的全连接层以均值为0、标准差为0.001的高斯分布初始化，偏置都初始化为0；</li><li>针对PASCAL VOC 2007和2012训练集，前30k次迭代全局学习率为0.001，每层权重学习率为1倍，偏置学习率为2倍(这里就是说明权重和偏置设置的学习率分别为0.001和0.002，至于为什么，网上说是偏置的学习率设为2倍能够使网络收敛)，后10k次迭代全局学习率更新为0.0001；</li><li>动量设置为0.9，权重衰减设置为0.0005。</li></ul><h5 id="Scale-invariance"><a href="#Scale-invariance" class="headerlink" title="Scale invariance"></a>Scale invariance</h5><p>作者探索了两种实现尺度不变目标检测的方法：</p><ul><li><p>通过brute-force(单一尺度)</p><p>在单一尺度中，每个图像在训练和测试期间都以预定义的像素大小进行处理。 期望网络能够直接从训练数据中学习尺度不变性。 </p></li><li><p>通过image pyramids(多尺度)</p><p>1、多尺度在<strong>训练阶段</strong>期间，随机从图像中采样金字塔尺寸的一些图像进行训练[缩放图片的scale得到，得到多尺度图片，相当于扩充数据集]，通过一个图像金字塔向网络提供一个近似的尺度不变。训练阶段每次采样一个图像就随机采样一个金字塔尺度。</p><p>2、在<strong>测试阶段</strong>图像金字塔用来对每个object proposal近似尺度归一化</p></li></ul><h5 id="Fast-R-CNN-detection"><a href="#Fast-R-CNN-detection" class="headerlink" title="Fast R-CNN detection"></a>Fast R-CNN detection</h5><p> 一旦Fast R-CNN网络被微调，检测相当于运行正向传播（假设对象建议框object proposal是预先计算的）。网络将图像（或图像金字塔，编码为图像列表）和待给得分的 R 对象建议框（object proposal）列表作为输入。</p><p>在测试阶段，R 大约为 2K个，但作者会考虑它更大（≈ 45k）的情况。当使用图像金字塔的时候，每个RoI被指定尺度使得接近 224*224。对于每个测试 RoI r，前向传递输出一个类后验概率分布 p 和一组相对于 r 的预测边界框bbox偏移量（K 个类中的每一个都有自己的细化边界框预测）。</p><script type="math/tex; mode=display">然后使用估计概率:Pr(class=k|r)\triangleq p_k给 r 赋予关于 k 个对象类的检测置信度</script><p>最后给每个类都实施一个非极大值抑制。</p><h5 id="Truncated-SVD-for-faster-detection-截断SVD以加快检测速度"><a href="#Truncated-SVD-for-faster-detection-截断SVD以加快检测速度" class="headerlink" title="Truncated SVD for faster detection(截断SVD以加快检测速度)"></a>Truncated SVD for faster detection(截断SVD以加快检测速度)</h5><p>对于全图像分类，与卷积层相比，计算全连接层所花费的时间很小。 相反，为了检测，要处理的 RoI 数量很大，前向传递时间的近一半用于计算全连接层（见图 2）。 通过使用截断的 SVD 压缩它们，可以轻松地加速大型完全连接层。 </p><p><img src="/2021/08/15/Fast-R-CNN/SVD.png" alt="Fast-R-CNN"></p><p>上图来源于Fast R-CNN论文<a href="https://blog.csdn.net/Wonder233/article/details/53671018" target="_blank" rel="noopener">论文链接</a></p><p>具体的实现方式：</p><ol><li><p>物体分类和bbox回归都是通过全连接层实现的，假设全连接层输入数据为X，输出数据为Y，全连接层权值矩阵为W，尺寸为 u × v ，那么该层全连接计算为:Y=W &times; X</p></li><li><p>若将W进行SVD分解（奇异值分解），并用前t个特征值近似代替，即:</p><script type="math/tex; mode=display">W\approx U\Sigma_tV^T</script></li></ol><p>U是 u × t 的左奇异矩阵， Σ<sub>t</sub>是 t × t 的对角矩阵 ，V是 v × t 的右奇异矩阵。 截断SVD将参数量由原来的 u × v 减少到 t × (u + v) ，当 t 远小于 min(u,v) 的时候降低了很大的计算量。</p><p>在实现时，相当于把一个全连接层拆分为两个全连接层，第一个全连接层使用权值矩阵&Sigma;<sub>t</sub>V<sup>T</sup>（不含偏置），第二个全连接层使用矩阵U（含偏置)；当RoI的数量大时，这种简单的压缩方法有很好的加速。 </p><p><a href="https://blog.csdn.net/Wonder233/article/details/53671018" target="_blank" rel="noopener">部分内容：参考博客</a></p><h5 id="Which-layers-to-fine-tune-那些层需要被微调"><a href="#Which-layers-to-fine-tune-那些层需要被微调" class="headerlink" title="Which layers to fine-tune?(那些层需要被微调)"></a>Which layers to fine-tune?(那些层需要被微调)</h5><p>作者实验得出，仅仅向SPPNet一样，微调全连接层的话，mAP的减少了很多。证明通过 RoI 池化层进行训练对于非常深的网络很重要。 </p><p><strong>那么所有的卷积层都应被为微调吗？</strong></p><p>实验得出：</p><ul><li>在较小的网络（S 和 M）中，作者发现 conv1 是通用的且与任务无关（ ImageNet clas-<br>sification with deep convolutional neural networks.）。 允许 conv1 学习与否对 mAP 没有有意义的影响。 </li><li>与从 conv3 1 学习相比，从 conv2 1 更新使训练速度降低了 1.3 倍（12.5 对 9.5 小时）；     </li><li>从 conv1 1 更新超过 GPU 内存。 从 conv2 1 开始学习时，mAP 的差异仅为 +0.3 分（表 5，最后一列）。 </li></ul><p>所以论文推荐所有 Fast R-CNN 结果均使用 VGG16 微调层 conv3 1 及以上。</p><h5 id="Scale-invariance-to-brute-force-or-finesse"><a href="#Scale-invariance-to-brute-force-or-finesse" class="headerlink" title="Scale invariance: to brute force or finesse?"></a>Scale invariance: to brute force or finesse?</h5><p>实验发现：深度卷积网络擅长直接学习尺度不变性。 多尺度方法仅提供少量的 mAP 增加，但计算时间成本很高 。</p><h5 id="Are-more-proposals-always-better"><a href="#Are-more-proposals-always-better" class="headerlink" title="Are more proposals always better?"></a>Are more proposals always better?</h5><p>广义上，有两种类型的对象检测器</p><ul><li>那些使用稀疏对象提议集（例如，选择性搜索）<ul><li>是cascade的一种类型：其中提议机制首先拒绝大量候选，让分类器留下一个小的集合进行评估</li></ul></li><li>使用密集集和（例如，DPM）的对象检测器</li></ul><p><a href="https://www.jianshu.com/p/fbbb21e1e390" target="_blank" rel="noopener">部分参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Fast-R-CNN学习笔记&quot;&gt;&lt;a href=&quot;#Fast-R-CNN学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Fast R-CNN学习笔记&quot;&gt;&lt;/a&gt;Fast R-CNN学习笔记&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;目标检测主要需要解决两个问题
      
    
    </summary>
    
    
      <category term="Deep Learning" scheme="http://yoursite.com/categories/Deep-Learning/"/>
    
    
      <category term="Deep Learning" scheme="http://yoursite.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Connected-Component-Analysis-Labeling</title>
    <link href="http://yoursite.com/2021/08/15/Connected-Component-Analysis-Labeling/"/>
    <id>http://yoursite.com/2021/08/15/Connected-Component-Analysis-Labeling/</id>
    <published>2021-08-15T10:22:08.000Z</published>
    <updated>2021-08-15T10:24:02.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像处理学习笔记"><a href="#图像处理学习笔记" class="headerlink" title="图像处理学习笔记"></a>图像处理学习笔记</h2><h4 id="一、连通域提取"><a href="#一、连通域提取" class="headerlink" title="一、连通域提取"></a>一、连通域提取</h4><p><img src="/2021/08/15/Connected-Component-Analysis-Labeling/connect.png" alt="Connect-Extract"></p><p>如上图所示，需要将连通域提取出来。用不同的数字标记。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XDIM 10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YDIM 10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">#深度优先搜索</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> arr[XDIM][YDIM], <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;visited, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> label)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    visited[row][col] = label;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> xLeft = col<span class="number">-1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> xRight = col+<span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> yTop = row<span class="number">-1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> yBottom = row+<span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span>(xLeft&gt;<span class="number">0</span> &amp;&amp; arr[row][xLeft]==<span class="number">1</span>  &amp;&amp; visited[row][xLeft]==<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        dfs(arr, visited, row, xLeft, label);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span>(xRight&lt;XDIM &amp;&amp; arr[row][xRight]==<span class="number">1</span> &amp;&amp; visited[row][xRight]==<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        dfs(arr, visited, row, xRight, label);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span>(yTop&gt;<span class="number">0</span> &amp;&amp; arr[yTop][col]==<span class="number">1</span> &amp;&amp; visited[yTop][col]==<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        dfs(arr, visited, yTop, col, label);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span>(yBottom&lt;YDIM &amp;&amp; arr[yBottom][col]==<span class="number">1</span> &amp;&amp; visited[yBottom][col]==<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        dfs(arr, visited, yBottom, col, label);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;outVec)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;outVec.<span class="built_in">size</span>(); ++ i)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;outVec[<span class="number">0</span>].<span class="built_in">size</span>(); ++j)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; outVec[i][j] &lt;&lt; <span class="string">" "</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> type=<span class="number">1</span>; <span class="comment">//type=1表示4领域，type=2表示8领域</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[XDIM][YDIM]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">                           <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">                          <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">                          <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">                           <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">                           <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">                           <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">                           <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">                           <span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">                           <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> rows = XDIM;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> cols = YDIM;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//std::vector&lt;int*&gt; input;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//for(int i=0; i&lt;rows; ++i)&#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//    input.push_back(array[i]);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//打标记的输出</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="title">out</span><span class="params">(rows,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(cols,<span class="number">0</span>))</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> label=<span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> r=<span class="number">0</span>; r&lt;rows; ++r)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>; c&lt;cols; ++c)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(<span class="built_in">array</span>[r][c]!=<span class="number">0</span> &amp;&amp; out[r][c]==<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">                dfs(<span class="built_in">array</span>, out, r, c, label);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">                label++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">            &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">print</span>(out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">g++ ./test.cpp -o test</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">./test</span></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2021/08/15/Connected-Component-Analysis-Labeling/connect-component.png" alt="Connect-Component"></p><h4 id="二、连通性分析法"><a href="#二、连通性分析法" class="headerlink" title="二、连通性分析法"></a>二、连通性分析法</h4><p>一个连通区域是由具有相同像素值的相邻像素组成像素集合，指将图像中的各个连通区域找出并标记。连通区域分析是一种在CVPR和图像分析处理的众多应用领域中较为常用和基本的方法。例如：OCR识别中字符分割提取（车牌识别、文本识别、字幕识别等）、视觉跟踪中的运动前景目标分割与提取（行人入侵检测、遗留物体检测、基于视觉的车辆检测与跟踪等）、医学图像处理（感兴趣目标区域提取）等等。也就是说，在需要将前景目标提取出来以便后续进行处理的应用场景中都能够用到连通区域分析方法，通常连通区域分析处理的对象是一张二值化后的图像。<a href="https://blog.csdn.net/icvpr/article/details/10259577" target="_blank" rel="noopener">参考文档</a></p><h5 id="1、Two-pass-相当于广度搜索"><a href="#1、Two-pass-相当于广度搜索" class="headerlink" title="1、Two-pass(相当于广度搜索)"></a>1、Two-pass(相当于广度搜索)</h5><p>两遍扫描法，指的就是通过扫描两遍图像，就可以将图像中存在的所有连通区域找出并标记。第一遍扫描时赋予每个像素位置一个label，扫描过程中同一个连通区域内的像素集合中可能会被赋予一个或多个不同label，因此需要将这些属于同一个连通区域但具有不同值的label合并，也就是记录它们之间的相等关系；第二遍扫描就是将具有相等关系的equal_labels所标记的像素归为一个连通区域并赋予一个相同的label（通常这个label是equal_labels中的最小值）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">icvprCcaByTwoPass</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; _binImg, cv::Mat&amp; _lableImg)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// connected component analysis (4-component)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// use two-pass algorithm</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. first pass: label each foreground pixel with a label</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. second pass: visit each labeled pixel and merge neighbor labels</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// foreground pixel: _binImg(x,y) = 1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// background pixel: _binImg(x,y) = 0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_binImg.empty() || _binImg.type() != CV_8UC1)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. first pass</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">_lableImg.<span class="built_in">release</span>() ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">_binImg.convertTo(_lableImg, CV_32SC1) ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> label = <span class="number">1</span> ;  <span class="comment">// start by 2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; labelSet ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">labelSet.push_back(<span class="number">0</span>) ;   <span class="comment">// background: 0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">labelSet.push_back(<span class="number">1</span>) ;   <span class="comment">// foreground: 1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> rows = _binImg.rows - <span class="number">1</span> ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cols = _binImg.cols - <span class="number">1</span> ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rows; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* data_preRow = _lableImg.ptr&lt;<span class="keyword">int</span>&gt;(i<span class="number">-1</span>) ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* data_curRow = _lableImg.ptr&lt;<span class="keyword">int</span>&gt;(i) ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; cols; j++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (data_curRow[j] == <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; neighborLabels ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">neighborLabels.reserve(<span class="number">2</span>) ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> leftPixel = data_curRow[j<span class="number">-1</span>] ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> upPixel = data_preRow[j] ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( leftPixel &gt; <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">neighborLabels.push_back(leftPixel) ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (upPixel &gt; <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">neighborLabels.push_back(upPixel) ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (neighborLabels.empty())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">labelSet.push_back(++label) ;  <span class="comment">// assign to a new label</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">data_curRow[j] = label ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">labelSet[label] = label ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::sort(neighborLabels.<span class="built_in">begin</span>(), neighborLabels.<span class="built_in">end</span>()) ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> smallestLabel = neighborLabels[<span class="number">0</span>] ;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">data_curRow[j] = smallestLabel ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// save equivalence</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> k = <span class="number">1</span>; k &lt; neighborLabels.<span class="built_in">size</span>(); k++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tempLabel = neighborLabels[k] ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>&amp; oldSmallestLabel = labelSet[tempLabel] ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (oldSmallestLabel &gt; smallestLabel)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">labelSet[oldSmallestLabel] = smallestLabel ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">oldSmallestLabel = smallestLabel ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oldSmallestLabel &lt; smallestLabel)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">labelSet[smallestLabel] = oldSmallestLabel ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// update equivalent labels</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// assigned with the smallest label in each equivalent label set</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">2</span>; i &lt; labelSet.<span class="built_in">size</span>(); i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> curLabel = labelSet[i] ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> preLabel = labelSet[curLabel] ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (preLabel != curLabel)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line">curLabel = preLabel ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">98</span></pre></td><td class="code"><pre><span class="line">preLabel = labelSet[preLabel] ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">99</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">100</span></pre></td><td class="code"><pre><span class="line">labelSet[i] = curLabel ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">101</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">102</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">103</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">104</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. second pass</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">105</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">106</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">107</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* data = _lableImg.ptr&lt;<span class="keyword">int</span>&gt;(i) ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">108</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">109</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">110</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>&amp; pixelLabel = data[j] ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">111</span></pre></td><td class="code"><pre><span class="line">pixelLabel = labelSet[pixelLabel] ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">112</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">113</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">114</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_size = <span class="number">1000</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> parent[max_size] = &#123; <span class="number">0</span> &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找到label x的根节点</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> parent[])</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    assert(x &lt; max_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> i = x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> (<span class="number">0</span> != parent[i])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        i = parent[i];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将label x 和 label y合并到同一个连通域</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> parent[])</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    assert(x &lt; max_size &amp;&amp; y &lt; max_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> i = x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> j = y;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> (<span class="number">0</span> != parent[i])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        i = parent[i];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> (<span class="number">0</span> != parent[j])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        j = parent[j];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (i != j)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        parent[i] = j;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">twoPassConnectComponent</span><span class="params">(cv::Mat &amp;binaryImg)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> imgW = binaryImg.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> imgH = binaryImg.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> channel = binaryImg.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> type = binaryImg.type();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// first pass</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> label = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    cv::Mat dst = cv::Mat::zeros(cv::Size(imgW, imgH), CV_32SC1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; imgH; y++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; imgW; x++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (binaryImg.at&lt;uchar&gt;(y, x) != <span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">int</span> left = (x - <span class="number">1</span> &lt; <span class="number">0</span>) ? <span class="number">0</span> : dst.at&lt;<span class="keyword">int</span>&gt;(y, x - <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">int</span> up = (y - <span class="number">1</span> &lt; <span class="number">0</span>) ? <span class="number">0</span> : dst.at&lt;<span class="keyword">int</span>&gt;(y - <span class="number">1</span>, x);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">                 <span class="keyword">if</span> (left != <span class="number">0</span> || up != <span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">                 &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">                     <span class="keyword">if</span> (left != <span class="number">0</span> &amp;&amp; up != <span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">                     &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">                         dst.at&lt;<span class="keyword">int</span>&gt;(y, x) = <span class="built_in">min</span>(left, up);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">                         <span class="keyword">if</span> (left &lt;= up)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">                             Union(up, left, parent);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">                         <span class="keyword">else</span> <span class="keyword">if</span> (up&lt;left)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">                             Union(left, up, parent);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">                     &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">                     <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">                         dst.at&lt;<span class="keyword">int</span>&gt;(y, x) = <span class="built_in">max</span>(left, up);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">                 &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">                 <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">                 &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">                     dst.at&lt;<span class="keyword">int</span>&gt;(y, x) = ++label;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">                 &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">             &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">         &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">     &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">     <span class="comment">//second pass </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; imgH; y++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">     &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; imgW; x++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">         &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">             <span class="keyword">if</span> (binaryImg.at&lt;uchar&gt;(y, x) != <span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">                 dst.at&lt;<span class="keyword">int</span>&gt;(y, x) = Find(dst.at&lt;<span class="keyword">int</span>&gt;(y, x), parent);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">         &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">     &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">     <span class="keyword">return</span> dst;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/icvpr/article/details/10259577" target="_blank" rel="noopener">第一个代码一不容易看懂: 来源</a></p><p><a href="https://www.cnblogs.com/riddick/p/8280883.html" target="_blank" rel="noopener">第二个代码教委清晰: 来源</a></p><p><a href="http://www.cse.msu.edu/~stockman/Book/2002/Chapters/ch3.pdf" target="_blank" rel="noopener">可参考的书籍</a></p><h5 id="2、Seed-Filling-相当于深度搜索"><a href="#2、Seed-Filling-相当于深度搜索" class="headerlink" title="2、Seed-Filling(相当于深度搜索)"></a>2、Seed-Filling(相当于深度搜索)</h5><p>种子填充方法来源于计算机图形学，常用于对某个图形进行填充。思路：选取一个前景像素点作为种子，然后根据连通区域的两个基本条件（像素值相同、位置相邻）将与种子相邻的前景像素合并到同一个像素集合中，最后得到的该像素集合则为一个连通区域。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">icvprCcaBySeedFill</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; _binImg, cv::Mat&amp; _lableImg)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// connected component analysis (4-component)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// use seed filling algorithm</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. begin with a foreground pixel and push its foreground neighbors into a stack;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. pop the top pixel on the stack and label it with the same label until the stack is empty</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// foreground pixel: _binImg(x,y) = 1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// background pixel: _binImg(x,y) = 0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_binImg.empty() || _binImg.type() != CV_8UC1)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">_lableImg.<span class="built_in">release</span>() ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">_binImg.convertTo(_lableImg, CV_32SC1) ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> label = <span class="number">1</span> ;  <span class="comment">// start by 2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> rows = _binImg.rows - <span class="number">1</span> ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cols = _binImg.cols - <span class="number">1</span> ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rows<span class="number">-1</span>; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* data= _lableImg.ptr&lt;<span class="keyword">int</span>&gt;(i) ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; cols<span class="number">-1</span>; j++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (data[j] == <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; neighborPixels ;   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">neighborPixels.push(<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(i,j)) ;     <span class="comment">// pixel position: &lt;i,j&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">++label ;  <span class="comment">// begin with a new label</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!neighborPixels.empty())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// get the top pixel on the stack and label it with the same label</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; curPixel = neighborPixels.top() ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> curX = curPixel.first ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> curY = curPixel.second ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">_lableImg.at&lt;<span class="keyword">int</span>&gt;(curX, curY) = label ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// pop the top pixel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">neighborPixels.pop() ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// push the 4-neighbors (foreground pixels)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_lableImg.at&lt;<span class="keyword">int</span>&gt;(curX, curY<span class="number">-1</span>) == <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">// left pixel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">neighborPixels.push(<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(curX, curY<span class="number">-1</span>)) ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_lableImg.at&lt;<span class="keyword">int</span>&gt;(curX, curY+<span class="number">1</span>) == <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">// right pixel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">neighborPixels.push(<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(curX, curY+<span class="number">1</span>)) ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_lableImg.at&lt;<span class="keyword">int</span>&gt;(curX<span class="number">-1</span>, curY) == <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">// up pixel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">neighborPixels.push(<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(curX<span class="number">-1</span>, curY)) ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_lableImg.at&lt;<span class="keyword">int</span>&gt;(curX+<span class="number">1</span>, curY) == <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">// down pixel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">neighborPixels.push(<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(curX+<span class="number">1</span>, curY)) ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/icvpr/article/details/10259577" target="_blank" rel="noopener">第一个代码一不容易看懂</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图像处理学习笔记&quot;&gt;&lt;a href=&quot;#图像处理学习笔记&quot; class=&quot;headerlink&quot; title=&quot;图像处理学习笔记&quot;&gt;&lt;/a&gt;图像处理学习笔记&lt;/h2&gt;&lt;h4 id=&quot;一、连通域提取&quot;&gt;&lt;a href=&quot;#一、连通域提取&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/categories/Image-Processing/"/>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/tags/Image-Processing/"/>
    
  </entry>
  
  <entry>
    <title>Support-Vector-Machine</title>
    <link href="http://yoursite.com/2021/08/15/Support-Vector-Machine/"/>
    <id>http://yoursite.com/2021/08/15/Support-Vector-Machine/</id>
    <published>2021-08-15T10:20:37.000Z</published>
    <updated>2021-08-15T10:21:31.559Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第六章-支持向量机（西瓜书学习-笔记）"><a href="#第六章-支持向量机（西瓜书学习-笔记）" class="headerlink" title="第六章 支持向量机（西瓜书学习-笔记）"></a>第六章 支持向量机（西瓜书学习-笔记）</h2><p>假设输入空间与特征空间为两个不同的空间。输入空间为欧式空间或离散集合，特征空间为欧式空间或希尔伯特空间。线性可分支持向量机、线性支持向量机假设这两个空间的元素一一对应，并将输入空间中的输入映射为特征空间中的特征向量。<strong>非线性支持向量机</strong>利用一个<strong>从输入空间</strong>到<strong>特征空间</strong>的<strong>非线性映射</strong>将<strong>输入映射为特征向量</strong>。<strong>所以，输入都由输入空间转换到特征空间，支持向量机的学习是在特征空间进行的。</strong>[参考：统计学习方法-李航]</p><h4 id="6-1-间隔与支持向量"><a href="#6-1-间隔与支持向量" class="headerlink" title="6.1 间隔与支持向量"></a>6.1 间隔与支持向量</h4><p>给定训练样本集D={(x<sub>1</sub>, y<sub>1</sub>)，(x<sub>2</sub>, y<sub>2</sub>),…, (x<sub>m</sub>, y<sub>m</sub>)}，y<sub>i</sub>&in;{-1,+1}，分类学习最基本的想法就是基于训练集D在样本空间中找到一个划分超平面，将不同类别的样本分开。但能将训练样本分开的划分超平面可能有很多。如下图所示，<strong>那么如何找到最合适的超平面呢？</strong></p><p><img src="/2021/08/15/Support-Vector-Machine/SVM.png" alt="ML"></p><p>上图中，中间那根粗线这个划分超平面所产生的分类结果是最鲁邦的，对未见示例的泛化能力最高。</p><p>在样本空间中，划分超平面可通过如下线性方程来描述：w<sup>T</sup>x+b=0，其中w=(w<sub>1</sub>;w<sub>2</sub>;…;w<sub>d</sub>)为法向量，决定了超平面的方向；b为位移项，决定了超平面与原点之间的距离。</p><p>由于超平面可由法向量w和位移b确定，记为(w,b)。则样本空间中任意点x到超平面(w,b)的距离可写为：</p><script type="math/tex; mode=display">r=\frac{|w^Tx+b|}{||w||}\\\begin{align}&在n维空间中，设任意点坐标为:x=[x^{(1)},x^{(2)},...,x^{(n)}]\in R^n,超平面参数为w=[w^{(1)}，w^{(2)},...,w^{(n)}]\in R^n,b\in R\\&则超平面方程可表示为w^Tx+b=0。超平面的法向量满足：超平面中任意向量都与该法向量垂直\\&设超平面上的两个点x_1,x_2,分别满足：w^Tx_1+b=0;w^Tx_2+b=0,两式相减，得：\\&w^T(x_1-x_2)=0,记\vec v=(x_1-x_2),由于x_1,x_2是任意两点，所以\vec v表示超平面上的任意向量\\&\because w^T\cdot\vec v=\vec 0,\therefore w是w^Tx+b=0的法向量\\&记超平面外一点x_0,其在超平面w^Tx+b=0上的投影点为x'_0,满足w^Tx'_0+b=0\\&则有向量\vec u=(x_0-x'_0)与平面w^Tx+b=0的法向量w互相平行，则两者的数量级为：\\&w^T(x_0-x'_0)=w\cdot (x_0-x'_0)=|w|*|x_0-x'_0|*\cos(0\,or\,\pi)=\pm|w|*d，d=|x_0-x'_0|即为待求点到超平面间的距离\\&又w^T(x_0-x'_0)=w^Tx_0-w^Tx'_0=w^Tx_0-(-b)=w^Tx_0+b,\because d \ge0,\therefore d=\frac{|w^Tx_0+b|}{|w|}\\&这里上式中的 ∣ w ∣ w 的模长，模长作为绝对值概念的推广,在欧式空间中，模长常常称为L2范数\\&（也称为Euclidean范数或者Frobenius范数）：||w||_F=\sqrt{(w^{1})^2+(w^{2})^2+...+(w^{n})^2}\end{align}</script><p>通过|wx+b|近似表示点x距离超平面的远近(因为还要除以模)，而wx+b的符号与类标记y的符号是否一致来表示分类是否正确。那么可用y(wx+b)来表示分类的正确性与确定度。这就是函数间隔：</p><script type="math/tex; mode=display">\hat\gamma_i=y_i(w\cdot x_i+b)</script><p>但由于函数间隔中，如果成比例的改变w和b，那么即便x<sub>i</sub>距离平面的距离没有变化，函数间隔也将随着w和b而改变。所以需要对分离超平面的法向量w增加约束，如令|w|=1。从而引出了几何间隔：</p><script type="math/tex; mode=display">\gamma_i=y_i\Big(\frac{w}{||w||}\cdot x_i+\frac{b}{||w||}\Big),||w||为w的L_2范数</script><p><strong>支持向量机学习</strong>的<strong>基本思想</strong>是求解能够正确划分训练数据集并且几何间隔最大的分离超平面。那么如何寻找几何间隔最大的分离超平面呢？即为求解下面的约束最优化问题：</p><script type="math/tex; mode=display">\max_{w,b}\quad\gamma\\s.t.\quad y_i\Big(\frac{w}{||w||}\cdot x_i+\frac{b}{||w||}\Big)\ge\gamma,i=1,2,...,N\\约束条件表示超平面(w,b)关于每个训练样本点的几何间隔至少为\gamma,转化为函数间隔：\\\max_{w,b}\quad\frac{\hat \gamma}{||w||}\\s.t.\quad y_i(w\cdot x_i+b)\ge\hat \gamma,i=1,2,...,N\\因为函数间隔\hat \gamma 的取值并不影响优化问题的解(同时放大w和b对解没有影响)。\\令\hat \gamma=1,则上式的最优化问题变成：最大化\frac{1}{||w||}和\frac{1}{2}||w||^2,于是得到下式最优化问题：\\\min_{w,b}\quad \frac{1}{2}||w||^2\\s.t.\quad y_i(w\cdot x_i+b)-1\ge0,i=1,2,...,N</script><p>在线性可分的情况下，训练数据集的样本点中与分离超平面距离最近的样本点的实例称为<strong>支持向量</strong>。两个异类支持向量到超平面的距离称为<strong>间隔</strong>：</p><script type="math/tex; mode=display">\gamma=\frac{2}{||w||}</script><p><img src="/2021/08/15/Support-Vector-Machine/SVM-0.png" alt="SVM"></p><h4 id="6-2-对偶问题"><a href="#6-2-对偶问题" class="headerlink" title="6.2 对偶问题"></a>6.2 对偶问题</h4><p>对于上式凸二次规划问题，可以利用拉格朗日乘子的对偶性进行求解。先求出对偶问题的解a<sup>*</sup>，在求原始问题的解w<sub>*</sub>和b。对于拉格朗日乘子&alpha;<sub>i</sub>&ge;0，则拉格朗日函数可写为：</p><script type="math/tex; mode=display">L(w,b,\alpha)=\frac{1}{2}||w||^2+\sum^{m}_{i=1}\alpha_i(1-y_i(w^Tx_i+b)),m为样本数</script><p>根据拉格朗日对偶性，原始问题的对偶问题是极大极小问题：</p><script type="math/tex; mode=display">\max_{a}\min_{w,b} L(w,b,\alpha)</script><p>所以先求L(w,b,&alpha;)对w,b的极小，再求&alpha;的极大。</p><script type="math/tex; mode=display">(1)\quad求\min_{w,b}L(w,b,\alpha),分别对w,b求偏导并令其等于0\\\bigtriangledown_wL(w,b,\alpha)=w-\sum^{m}_{i=1}\alpha_iy_ix_i=0, w=\sum^{m}_{i=1}\alpha_iy_ix_i\\\bigtriangledown_bL(w,b,\alpha)=\sum^{m}_{i=1}\alpha_iy_i=0,将w和\sum^{m}_{im=1}\alpha_iy_i=0带入L(w,b,\alpha)\\\begin{align}L(w,b,\alpha)=&\frac{1}{2}\sum^{m}_{i=1}\sum^{m}_{j=1}\alpha_i\alpha_jy_iy_j(x_i\cdot x_j)-\sum^{m}_{i=1}\alpha_iy_i\Big(\big(\sum^{m}_{j=1}\alpha_jy_jx_j\big)\cdot x_i+b\Big)+\sum^{m}_{i=1}\alpha_i\\=&-\frac{1}{2}\sum^{m}_{i=1}\sum^{m}_{j=1}\alpha_i\alpha_jy_iy_j(x_i\cdot x_j)+\sum^{m}_{i=1}\alpha_i\\\end{align}\\上式中，\sum^{m}_{i=1}\alpha_iy_ib=0,所以，\min_{w,b}L(w,b,\alpha)=-\frac{1}{2}\sum^{m}_{i=1}\sum^{m}_{j=1}\alpha_i\alpha_jy_iy_j(x_i\cdot x_j)+\sum^{m}_{i=1}\alpha_i\\(2)\quad 求\min_{w,b}L(w,b,\alpha)对\alpha的极大，即是对偶问题\\\max_{\alpha}-\frac{1}{2}\sum^{m}_{i=1}\sum^{m}_{j=1}\alpha_i\alpha_jy_iy_j(x_i\cdot x_j)+\sum^{m}_{i=1}\alpha_i\\s.t.\quad \sum^{m}_{i=1}\alpha_iy_i=0\\\alpha_i\gt0,i=1,2,...,m\\等价于：\min_{\alpha}\frac{1}{2}\sum^{m}_{i=1}\sum^{m}_{j=1}\alpha_i\alpha_jy_iy_j(x_i\cdot x_j)-\sum^{m}_{i=1}\alpha_i\\s.t.\quad \sum^{m}_{i=1}\alpha_iy_i=0\\\alpha_i\gt0,i=1,2,...,m\\对于线性可分训练数据集，假设对偶最优化问题对\alpha^*=(\alpha^*_u1r,\alpha^*_2,...,\alpha^*_m),那么如何求原始最优化问题的解w^*,b^*</script><p>因为原始最优化问题，满足KKT条件，所以：</p><script type="math/tex; mode=display">\begin{align}&\bigtriangledown_wL(w^*,b^*,\alpha^*)=w^*-\sum^{m}_{i=1}\alpha^*_iy_ix_i=0\\&\bigtriangledown_bL(w^*,b^*,\alpha^*)=-\sum^{m}_{i=1}\alpha^*_iy_i=0\\&\alpha^*_i(y_i(w^*\cdot x_i+b^*)-1)=0,i=1,2,...,m\\&y_i(w^*\cdot x_i+b^*)-1=0,i=1,2,...,m\\&a^*_i\ge0,i=1,2,...,m\\&可得：w^*=\sum_{i}\alpha^*_iy_ix_i\\&由于其中至少有一个\alpha^*_j\gt0,否则，利用反证法得，w^*=0，矛盾\\&所以对于\alpha^*_j\gt0得j,y_i(w^*\cdot x_j+b^*)-1=0,将w^*代入:\\&y_jb^*=1-y^*\sum^{m}_{i=1}\alpha^*_iy_i(x_i\cdot x_j),两边同乘y_j,因为y\in\{1,-1\},y^2_j=1\\&所以，b^*=y_j-\sum^{m}_{i=1}\alpha^*_iy_i(x_i\cdot x_j)\end{align}</script><p><strong>那么如何求出&alpha;<sup>*</sup>的值呢？</strong></p><p>可以利用SMO (Sequential Minimal Optimization)算法。SMO的基本思路是先固定&alpha;<sub>i</sub>之外的所有参数，然后求&alpha;<sub>i</sub>上的极值。由于存在约束sum&alpha;<sub>i</sub>y<sub>i</sub>=0 i=1,…,m，所以如果固定&alpha;<sub>i</sub>之外的变量，则&alpha;<sub>i</sub>可由其他变量导出。</p><p>SMO不断执行一下步骤，直至收敛：</p><ul><li>选取一对需要更新的变量&alpha;<sub>i</sub>,&alpha;<sub>j</sub>;</li><li>固定&alpha;<sub>i</sub>和&alpha;<sub>j</sub>以外的参数，求解下式，获得更新后的&alpha;<sub>i</sub>和&alpha;<sub>j</sub>:</li></ul><script type="math/tex; mode=display">\min_{\alpha}\frac{1}{2}\sum^{m}_{i=1}\sum^{m}_{j=1}\alpha_i\alpha_jy_iy_j(x_i\cdot x_j)-\sum^{m}_{i=1}\alpha_i</script><h4 id="6-3-核函数"><a href="#6-3-核函数" class="headerlink" title="6.3 核函数"></a>6.3 核函数</h4><p>之前假设训练样本线性可分，但实现任务中，原始样本空间内也许并不存在一个能正确划分两类样本的超平面。例如：异或问 题。</p><p>解决办法是：可将样本从原始空间映射到一个更高维的特征空间，使样本在这个特征空间内线性可分。幸运的是，如果原始空间是有限维，那么一定存在一个高维特征空间使样本可分。</p><p><img src="/2021/08/15/Support-Vector-Machine/SVM-1.png" alt="SVM"></p><p>令&Phi;(x)表示将x映射后的特征向量，则在特征空间中划分超平面所对应的模型可表示为：</p><script type="math/tex; mode=display">f(x)=w^T\phi(x)+b,w和b是模型参数，有；\\\min_{w,b}\frac{1}{2}||w||^2\\s.t.\quad y_i(w^T\phi(x_i)+b)\ge1,i=1,2,...,m\\对偶问题为：\max_{\alpha}\sum^{m}_{i=1}\alpha_i-\frac{1}{2}\sum^{m}_{i=1}\sum^{m}_{i=1}\alpha_i\alpha_jy_iy_j\phi(x_i)^T\phi(x_j)\\s.t.\quad\sum^{m}_{i=1}\alpha_iy_i=0,\alpha_i\ge1,i=1,2,...,m\\\phi(x_i)^T\phi(x_j)是样本x_i与x_j映射到特征空间之后的内积。当特征空间维度过高时，求解很困难。\\所以设想一个函数：k(x_i,x_j)=\langle\phi(x_i),\phi(x_j)\rangle=\phi(x_i)^T\phi(x_j)\\x_i与x_j在特征空间的内积等于它们在原始样本空间中通过函数k(\cdot,\cdot)计算的结果</script><p><strong>那么核函数一定存在吗？什么样的函数能做核函数？</strong></p><script type="math/tex; mode=display">令\chi为输入空间，k(\cdot,\cdot)是定义在\chi\times\chi上的对称函数，\\则k是核函数当且仅当对于任意数据D=\{x_1,x_2,...,x_m\},核矩阵K总是半正定的：\\\left[\begin{matrix}k(x_1,x_1) \cdots & k(x_1,x_k) & \cdots & k(x_1,x_m)\\\vdots & \vdots & \ddots & \vdots\\k(x_i,x_1) & k(x_i,x_j) & \cdots & k(x_i,x_m)\\\vdots & \vdots & \ddots & \vdots\\k(x_m,x_1) & k(x_m,x_j) & \cdots & k(x_m,x_m)\end{matrix}\right]\tag{5}</script><p><img src="/2021/08/15/Support-Vector-Machine/SVM-2.png" alt="SVM"></p><p>此外，还可以通过函数组合得到。</p><h4 id="6-4-软间隔与正则化"><a href="#6-4-软间隔与正则化" class="headerlink" title="6.4 软间隔与正则化"></a>6.4 软间隔与正则化</h4><p>由于在现实任务中，往往很难确定合适的核函数使得训练样本在特征空间中线性可分。即便，使用的核函数使训练样本在特征空间线性可分，但是不确定是不是由于过拟合造成的。缓解该问题的一个办法是允许支持向量在一些样本上出错，即引入软间隔：</p><p><img src="/2021/08/15/Support-Vector-Machine/SVM-3.png" alt="SVM"></p><p>软间隔则是允许某些样本不满足约束：</p><script type="math/tex; mode=display">y_i(w^Tx_i+b)\ge1</script><p>但是，在最大间隔的同时，不满足约束的样本应尽可能少，于是优化目标写为：</p><script type="math/tex; mode=display">\min_{w,b}\frac{1}{2}||w||^2+C\sum^{m}_{i=1}l_{0/1}(y_i(w^Tx_i+b)-1 )</script><p>其中C&gt;0是一个常数，l<sub>0/1</sub>是0/1损失函数。</p><script type="math/tex; mode=display">l_{0/1}(z)=\begin{cases}1,\quad z\lt 0;\\0, \quad otherwise\end{cases}\tag{1}</script><p>由于，l<sub>0/1</sub>非凸、非连续、数学性质不好。于是，通常用其他一些函数来代替l<sub>0/1</sub>称为替代损失。如下给出三种常用的替代损失函数：</p><script type="math/tex; mode=display">hinge损失：l_{hinge}(z)=max(0,1-z)\\指数损失(exponential\,\,loss):l_{exp}(z)=exp(-z)\\对率损失(logistic\,\,loss):l_{log}(z)=log(1+exp(-z))</script><p>若采用hinge损失，则优化目标为：</p><script type="math/tex; mode=display">\min_{w,b}\frac{1}{2}||w||^2+C\sum^{m}_{i=1}max(0,1-y_i(w^Tx_i+b))</script><p>引入松弛变量&xi;<sub>i</sub>&ge;0，则上式重写为：</p><script type="math/tex; mode=display">\min_{w,b,\xi_i}\frac{1}{2}||w||^2+C\sum^{m}_{i=1}\xi_i\\s.t.\quad y_i(w^Tx_i+b)\ge1-\xi_i\\\xi_i\ge0,i=1,2,...,m</script><p>上面中每个样本都有一个对应的松弛变量，用以表征样本不满足约束的程度。但仍然是一个二次规划问题，通过拉格朗日乘子法可得如下的拉格朗日函数：</p><script type="math/tex; mode=display">L(w,b,\xi,\mu)=\frac{1}{2}||w||^2+C\sum^{m}_{i=1}\xi_i+\sum^{m}_{i=1}\alpha_i(1-\xi_i-y_i(w^Tx_i+b))-\sum^{m}_{i=1}\mu_i\xi_i,其中\alpha_i\ge0,\mu_i\ge0</script><p><img src="/2021/08/15/Support-Vector-Machine/SVM-4.png" alt="SVM"></p><p>上面的0/1损失函数可以换成别的替代损失函数，但它们具有一个共性：优化目标中的第一项用来描述划分超平面的间隔大小，另一项用来表述训练集上的误差，可写为更一般的形式：</p><script type="math/tex; mode=display">\min_{f}\Omega(f)+C\sum^{m}_{i=1}l(f(x_i),y_i),\Omega(f)为结构风险，\sum^{m}_{i=1}l(f(x_i),y_i)称为经验风险，C对二者进行折中</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第六章-支持向量机（西瓜书学习-笔记）&quot;&gt;&lt;a href=&quot;#第六章-支持向量机（西瓜书学习-笔记）&quot; class=&quot;headerlink&quot; title=&quot;第六章 支持向量机（西瓜书学习-笔记）&quot;&gt;&lt;/a&gt;第六章 支持向量机（西瓜书学习-笔记）&lt;/h2&gt;&lt;p&gt;假设
      
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Machine-Learning-Desision-Tree</title>
    <link href="http://yoursite.com/2021/08/15/Machine-Learning-Desision-Tree/"/>
    <id>http://yoursite.com/2021/08/15/Machine-Learning-Desision-Tree/</id>
    <published>2021-08-15T10:10:41.000Z</published>
    <updated>2021-08-15T10:13:31.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第四章-决策树（西瓜书学习-笔记）"><a href="#第四章-决策树（西瓜书学习-笔记）" class="headerlink" title="第四章 决策树（西瓜书学习-笔记）"></a>第四章 决策树（西瓜书学习-笔记）</h2><h4 id="一、基本流程"><a href="#一、基本流程" class="headerlink" title="一、基本流程"></a>一、基本流程</h4><p>决策树学习的目的是为了产生一颗泛化能力强的决策树。一般，一颗决策树包含一个根结点、若干个内部结点和若干个叶结点；叶结点对应于决策结果，其他每个结点则对应于一个属性测试；每个结点包含的样本集合根据属性测试的结果被划分到子结点中；根结点包含样本全集。从根结点到每个叶节点的路径对应了一个判定测试序列。</p><p><img src="/2021/08/15/Machine-Learning-Desision-Tree/DesisionTree_0.png" alt="ML"></p><h4 id="二、划分选择"><a href="#二、划分选择" class="headerlink" title="二、划分选择"></a>二、划分选择</h4><p>一般而言，随着划分过程的不断进行，希望决策树的分支结点所包含的样本尽可能属于同一类，即结点的”纯度”越来越高。</p><h5 id="2-1-信息增益"><a href="#2-1-信息增益" class="headerlink" title="2.1 信息增益"></a>2.1 信息增益</h5><p>“信息熵”是度量样本集合纯度最常用的一种指标。假设当前样本集合D中第k类样本所占的比例为p<sub>k</sub>(k=1,2,…,|y|),则D的信息熵定义为：</p><script type="math/tex; mode=display">Ent(D)=-\sum^{|y|}_{k=1}p_k\log_2p_k,Ent(D)的值越小，D的纯度越高</script><p>假定离散属性a有V个可能的取值{a<sup>1</sup>,a<sup>2</sup>,…,a<sup>V</sup>}，若使用a来对样本集D进行划分，则会产生V个分支结点，其中第v个分支结点包含了D中所有在属性a上取值为a<sup>v</sup>的样本，记为D<sup>v</sup>。划分步骤如下：</p><ol><li>计算出D<sup>v</sup>的信息熵</li><li>不同分支结点包含不同的样本数，给分支结点赋予权重|D<sup>v</sup>|/D</li><li>计算属性a对样本集D进行划分所获得的”信息增益”</li></ol><script type="math/tex; mode=display">Gain(D,a)=Ent(D)-\sum^{V}_{v=1}\frac{|D^v|}{|D|}Ent(D^v)</script><p>一般，信息增益越大，则意味着使用属性a来进行划分所获得的“纯度提升”越大。所以上面选择属性时使用下式选择最佳属性(ID3)：</p><script type="math/tex; mode=display">a_*=arg\,\max_{a\in A}Gain(D,a)</script><p><img src="/2021/08/15/Machine-Learning-Desision-Tree/Desision-Tree-2.png" alt="ML"></p><p><strong>如何选择最优划分属性？</strong></p><p>上图中共包含17个样本，因为是二分类，所以|y|=2。</p><ol><li>根结点包含D中所有的样例，计算根结点的信息熵：</li></ol><script type="math/tex; mode=display">Ent(D)=-\sum^{2}_{k=1}p_k\log_2p_k=-(\frac{8}{17}\log_2\frac{8}{17}+\frac{9}{17}\log_2\frac{9}{17})=0.998,其中，正例占p_1=\frac{8}{17},反例占p_2=\frac{9}{17}</script><ol><li><p>计算当前属性集合{色泽，根蒂，敲声，纹理，脐部，触感}中每个属性的信息增益。以属性”色泽”为例。色泽有三个取值：{青绿色，乌黑，浅白}，使用这三个取值对D进行划分，得到3个子集，分别记为：D<sup>1</sup>(色泽=青绿),D<sup>2</sup>(色泽=乌黑)，D<sup>3</sup>(色泽=浅白)。</p><p>D<sub>1</sub>包含6个样例，正例占比p<sub>1</sub>=4/6，反例占比p<sub>2</sub>=2/6。D<sub>3</sub>包含5个样例，正例占比p<sub>1</sub>=1/5，反例占比p<sub>2</sub>=4/5。</p></li></ol><script type="math/tex; mode=display">Ent(D^1)=-(\frac{3}{6}\log_2\frac{3}{6}+\frac{3}{6}\log_2\frac{3}{6})=1.000,\\Ent(D^2)=-(\frac{4}{6}\log_2\frac{4}{6}+\frac{2}{6}\log_2\frac{2}{6})=0.918,\\Ent(D^3)=-(\frac{1}{5}\log_2\frac{1}{5}+\frac{4}{5}\log_2\frac{4}{5})=0.772,\\</script><ol><li>计算”色泽”的信息增益为：</li></ol><script type="math/tex; mode=display">Gain(D,色泽)=Ent(D)-\sum^{3}_{v=1}\frac{|D^v|}{|D|}Ent(D^v)=0.998-(\frac{6}{17}\times1.000+\frac{6}{17}\times0.918+\frac{5}{17}\times0.772)=0.109</script><ol><li>类似的，计算出其他属性的信息增益：</li></ol><script type="math/tex; mode=display">Gain(D,根蒂)=0.143，Gain(D,敲声)=0.141，Gain(D,纹理)=0.381，Gain(D,脐部)=0.289，Gain(D,触感)=0.006，</script><ol><li>选取信息增益最大的属性，上例中为”纹理”</li></ol><p><img src="/2021/08/15/Machine-Learning-Desision-Tree/Desision-Tree-3.png" alt="ML"></p><ol><li>根据选取的最大增益的属性划分数据集，如上图纹理=清晰有9个样例。可用属性集合为{色泽，根蒂，敲声，脐部，触感}</li><li>基于清晰划分的新集合的D<sub>1</sub>计算各属性的信息增益：</li></ol><script type="math/tex; mode=display">Gain(D^1,色泽)=0.043，Gain(D^1,根蒂)=0.458，Gain(D^1,敲声)=0.331，Gain(D^1,脐部)=0.458，Gain(D^1,触感)=0.458，</script><p>若有多个属性均取得了最大的信息增益，可任选其中之一作为划分属性</p><ol><li>对每个结点进行上述操作</li></ol><h5 id="2-2-增益率"><a href="#2-2-增益率" class="headerlink" title="2.2 增益率"></a>2.2 增益率</h5><p>由于信息增益准则对可取值数目较多的属性有所偏好(属性可选的值的数量，如色泽、纹理等)，为了减少这种偏好带来的不利影响，著名的C4.5决策树算法不直接使用信息增益，而是使用”增益率”来选择最优划分属性。增益率定义为：</p><script type="math/tex; mode=display">Gain_ratio(D,a)=\frac{Gain(D,a)}{IV(a)},其中，IV(A)=-\sum^{V}_{v=1}\frac{|D|^v}{|D|}\log_2\frac{|D^v|}{|D|},称为属性a的固有值。</script><p>上式中属性a的可能取值数目越多，比如，纹理中清晰的样例越多，则IV(a)的值通常会越大。</p><p>注意：增益率准则对可取值数目较少的属性有所偏好，因此，C4.5算法并不是直接选择增益率UI大的候选划分属性，而是使用一个启发式：先从候选划分属性中找出信息增益高于平均水平的属性，再从中选择信息增益最高的。</p><h4 id="2-3-基尼指数"><a href="#2-3-基尼指数" class="headerlink" title="2.3 基尼指数"></a>2.3 基尼指数</h4><p>CART决策树使用”基尼指数”(Gini index)来选择划分属性。数据集D的纯度可用基尼值来度量：</p><script type="math/tex; mode=display">Gini(D)=\sum^{|y|}_{k=1}\sum_{k'\ne k}p_kp_k'=1-\sum^{|y|}_{k=1}p_k^2</script><p>直观来说，Gini(D)反映了从数据集D中随机抽取两个样本，其类别标记不一致的概率。因此，Gini(D)越小，则数据集D的纯度越高。</p><script type="math/tex; mode=display">属性a的基尼指数定义为：Gini_index(D,a)=\sum^{V}_{v=1}\frac{|D^v|}{|D|}Gini(D^v)</script><p>所以，最优划分属性选取基尼指数最小的属性：</p><script type="math/tex; mode=display">a_*=arg\,\max_{a\in A}Gini_index(D,a)</script><h4 id="三、剪枝处理"><a href="#三、剪枝处理" class="headerlink" title="三、剪枝处理"></a>三、剪枝处理</h4><p>剪枝(pruning)是决策树学习算法对付“过拟合”的主要手段。在决策树学习中，为了尽可能正确分类训练样本，结点划分过程将不断重复，有时造成决策树分支过多，从而可能因训练样本学得“太好”了，以致于把训练集自身的一些特点当作所有数据都具有的一般性质而导致过拟合。所以，可通过主动去掉一些分支来降低过拟合的分险。</p><p>决策树剪枝的基本策略有“预剪枝”(prepruning)和“后剪枝”(post-pruning)。</p><ul><li>预剪枝：在决策树生成过程中，对每个结点在划分前先进行评估。若当前结点的划分不能带来决策树泛化性能提升，则停止划分并将当前结点标记为叶结点。</li><li>后剪枝：先从训练集生成一颗完整的决策树，然后自底向上地对非叶结点进行考察，若将该结点对应的子树替换为叶结点能带来决策树泛化性能提升，则将该子树替换为叶结点。</li></ul><p>预剪枝优点：使决策树的很多分支没有展开，不仅减低了过拟合的风险，而且显著减少了决策树的训练时间开销和测试时间开销。</p><p>预剪枝确定：基于贪心本质禁止这些分支展开，给预剪枝决策树带来了欠拟合的风险。</p><p>后剪枝优点：欠拟合风险小，泛化性能往往优于预剪枝决策树。</p><p>后剪枝缺点：在生成完全决策树之后进行的，并且要自底向上进行考察，因此训练时间开销要大得多。</p><h4 id="四、连续和缺失值"><a href="#四、连续和缺失值" class="headerlink" title="四、连续和缺失值"></a>四、连续和缺失值</h4><h5 id="4-1-连续值处理"><a href="#4-1-连续值处理" class="headerlink" title="4,1 连续值处理"></a>4,1 连续值处理</h5><p>对于要处理的连续属性，需要使用连续属性离散化技术。最简单的策略是采用二分法对连续属性进行处理。 </p><p>给定样本集D和连续属性a，假定a在D上出现了n个不同的取值：</p><ol><li>将这些值从小到大排序，记为{a<sup>1</sup>, a<sup>2</sup>，a<sup>3</sup>，… ，a<sup>n</sup>}</li><li>基于划分点t可将D分为子集D<sup>-</sup><sub>t</sub>和D<sup>+</sup><sub>t</sub>，分别表示在属性a上取值不大于t的样本，和取值大于t的样本</li><li>在区间[a<sup>i</sup>，a<sup>i+1</sup>)中取任意值所产生的划分结果相同，所以对连续属性a，可以考察包含n-1个元素的候选划分点集合</li></ol><script type="math/tex; mode=display">T_a=\{\frac{a^i+a^{i+1}}{2}|1\le i\le n-1\}</script><ol><li>把区域[a<sup>i</sup>，a<sup>i+1</sup>)的中心点作为候选划分点。然后可像离散属性值一样来考察这些划分点</li></ol><script type="math/tex; mode=display">Gain(D,a)=\max_{t\in T_a}\,Gain(D,a,t)=\max_{t\in T_a}\,Ent(D)-\sum_{\lambda\in\{-,+\}}\frac{|D^{\lambda}_t|}{|D|}Ent(D^{\lambda}_t)\\Gain(D,a,t)是样本集D基于划分点t二分后的信息增益，可选择使Gain(D,a,t)最大化的划分点</script><p>与离散值不同，当前结点划分属性为连续属性，该属性还可作为其后代结点的划分属性。</p><h5 id="4-2-缺失值处理"><a href="#4-2-缺失值处理" class="headerlink" title="4.2 缺失值处理"></a>4.2 缺失值处理</h5><p>任务中会遇到一些不完整的样本，即样本的某些属性值缺失。如果简单地放弃不完整样本，仅使用无缺失的样本进行学习，显然造成了数据信息的浪费。对于缺失值需要处理两个问题：</p><ol><li>如何在属性值缺失的情况下进行划分属性选择</li><li>给定划分属性，若样本在该属性上的值缺失，该如何对样本进行划分</li></ol><script type="math/tex; mode=display">给定训练集D和属性a，令\tilde{D}表示D中在属性a上没有缺失值的样本子集。假定属性a有V个可取值\{a^1,a^2,...,a^V\}\\令\tilde{D}^v表示\tilde{D}中在属性a上取值为a^v的样本子集，\tilde{D}_k表示\tilde{D}中属于第k类(k=1,2,...,|y|)的样本子集\\则,\tilde{D}=\bigcup^{|y|}_{k=1}\tilde{D}_k,\tilde{D}=\bigcup^{|V|}_{v=1}\tilde{D}^v,假定给每一个样本x赋予一个权重w_x，并定义如下：\\\rho=\frac{\sum_{x\in\tilde{D}}w_x}{\sum_{x\in D}w_x},\tilde{p}_k=\frac{\sum_{x\in\tilde{D}_k}w_x}{\sum_{x\in \tilde{D}}w_x}\,(1\le k\le|y|),\tilde{r}_v=\frac{\sum_{x\in\tilde{D}^v}w_x}{\sum_{x\in \tilde{D}}w_x}\,(1\le v\le|V|)\\对属性a，\rho表示无缺失样本所占的比例，\tilde{p}_k表示无缺失样本中第k类所占的比例，\\\tilde{r}_v则表示无缺失样本中在属性a上取值为a^v的样本所占的比例，显然，\sum^{|y|}_{k=1}\tilde{p}_k=1,\sum^{V}_{v=1}\tilde{r}_v=1\\则，信息增益可推广为：Gain(D,a)=\rho\times Gain(\tilde{D},a)=\rho\times (Ent(\tilde{D})-\sum^{V}_{k-1}\tilde{r}_vEnt(\tilde{D}^v))\\其中，Ent(\tilde{D})=-\sum^{|y|}_{k=1}\tilde{p}_k\log_2\tilde{p}_k</script><p>对于属性a，如果划分属性已知，则将x划入对应的子结点，保持样本权值为w<sub>x</sub>，对于划分属性缺失的情况，则将x同时划入所有子结点，且样本权值在对应的子结点中调整为tilde r<sub>v</sub> &times; w<sub>x</sub>；直观地看，就是让同一个样本的概率划入到不同的子结点中去。</p><h4 id="五、多变量决策树"><a href="#五、多变量决策树" class="headerlink" title="五、多变量决策树"></a>五、多变量决策树</h4><p>决策树形成的分类边界有一个明显的特点：轴平行，即它的分类边界由若干个与坐标轴平行的分段组成。在学习任务的真实分类边界比较复杂时，必须使用很多划分才能获得较好的近似。</p><p>多变量决策树，是为了实现斜划分，对非叶结点不再是仅对某个属性，而是对属性的线性组合进行测试。</p><script type="math/tex; mode=display">每个非叶结点是一个\sum^d_{i=1}w_ia_i=t的线性分类器，其中w_i和t可在该结点所含的样本集合属性集上学得</script><p>与单变量决策树不同，多变量决策树的学习过程中，不是为每个非叶结点寻找一个最优划分属性，而是试图建立一个合适的线性分类器。</p><p><img src="/2021/08/15/Machine-Learning-Desision-Tree/Desision-Tree-4.png" alt="ML"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第四章-决策树（西瓜书学习-笔记）&quot;&gt;&lt;a href=&quot;#第四章-决策树（西瓜书学习-笔记）&quot; class=&quot;headerlink&quot; title=&quot;第四章 决策树（西瓜书学习-笔记）&quot;&gt;&lt;/a&gt;第四章 决策树（西瓜书学习-笔记）&lt;/h2&gt;&lt;h4 id=&quot;一、基本流
      
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Linear-Model</title>
    <link href="http://yoursite.com/2021/08/15/Linear-Model/"/>
    <id>http://yoursite.com/2021/08/15/Linear-Model/</id>
    <published>2021-08-15T10:07:04.000Z</published>
    <updated>2021-08-15T10:09:06.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第三章-线性模型（西瓜书学习-笔记）"><a href="#第三章-线性模型（西瓜书学习-笔记）" class="headerlink" title="第三章 线性模型（西瓜书学习-笔记）"></a>第三章 线性模型（西瓜书学习-笔记）</h2><h4 id="一、基本形式"><a href="#一、基本形式" class="headerlink" title="一、基本形式"></a>一、基本形式</h4><p>线性模型(linear model)试图学得一个通过属性的线性组合来进行预测的函数，即：</p><script type="math/tex; mode=display">下面是由d个属性x=(x_1;x_2;...;x_d)，其中x_i是在第i个属性上的取值\\f(x)=w_1x_1+w_2x_2+...+w_dx_d+b,一般写成f(x)=w^Tx+b\\其中w=(w_1;w_2;...;w_d),w和b学得之后，模型就得以确定\\权重w直观表达了各属性在预测中的重要性</script><p>许多功能更为强大的非线性模型(nonlinear model)可在线性模型的基础上，通过引入层级结构或高维映射得到。<strong>疑问：如何引入？</strong></p><h4 id="二、线性回归"><a href="#二、线性回归" class="headerlink" title="二、线性回归"></a>二、线性回归</h4><script type="math/tex; mode=display">给定数据集D=\{(x1,y1),(x_2,y_2),...,(x_m,y_m)\},其中x_i=(x_{i1};x_{i2};...;x_{id}),y_i\in R\\线性回归(linear regression)试图学得一个线性模型以尽可能准确地预测实值输出标记。\\对于只有一个输入属性的简单场景，线性回归试图学得：f(x_i)=wx_i+b,使得f(x_i)\approx y_i\\如何确定w和b呢？关键在于使预测值和真实值差别最小，使用性能度量方法\\回归中常用均方误差：(w*,b*)=arg\,\min_{(w,b)}\sum^{m}_{i=1}(f(x_i)-y_i)^2=arg\,\min_{(w,b)}\sum^{m}_{i=1}(y_i-wx_i-b)^2</script><p><strong>基于均方误差最小化来进行模型求解的方法称为”最小二乘法”</strong>。在线性回归中，最小二乘法就是试图找到一条直线，使所有样本到直线上的欧式距离之和最小。</p><script type="math/tex; mode=display">求解w和b使E_{(w,b)}=\Sigma^{m}_{i=1}(y_i-wx_i-b)^2最小化的过程，称为线性回归模型的最小二乘参数估计(parameter estimation)\\将E_{(w,b)}分别对w和b求导，得到：\frac{\partial E(w,b)}{\partial w}=2(w\sum^{m}_{i=1}x_i^2-\sum^{m}_{i=1}(y_i-b)x_i),\frac{\partial E_{(w,b)}}{\partial b}=2(mb-\sum^{m}_{i=1}(y_i-wx_i))\\令上面的\frac{\partial E(w,b)}{\partial w}=0，\frac{\partial E_{(w,b)}}{\partial b}=0，可以求得w和b最优解得闭式。</script><p>对于更一般的情形，即样本由d个属性描述。此时，试图学得</p><script type="math/tex; mode=display">f(x_i)=w^Tx_i+b,使得f(x_i)\approx y_i,这称为多元线性回归</script><p>类似的，也可以利用最小二乘来对w和b进行估计。为了简便，把w和b吸收入向量形式：</p><script type="math/tex; mode=display">\hat w=(w;b)\\数据集D表示一个m\times(d+1)维大小的矩阵X\\X=\begin{pmatrix}x_{11}&x_{12}&\cdots&x_{1d}&1\\x_{21}&x_{22}&\cdots&x_{2d}&1\\\vdots&\vdots&\vdots&\ddots&\vdots\\x_{m1}&x_{m2}&\cdots&x_{md}&1\\\end{pmatrix}=\begin{pmatrix}x_1^T&1\\x_2^T&1\\\vdots&\vdots\\x_m^T&1\end{pmatrix}\\把标记写成向量形式y=(y_1;y_2;...;y_m)\\类似有 \hat w^*=arg\,\min_{\hat w}(y-X\hat w)^T(y-X\hat w)\\令E_{\hat w}=(y-X\hat w)^T(y-X\hat w),对\hat w求导得：\\\frac{\partial E_{\hat w}}{\partial\hat w}=2X^T(X\hat w-y)，令该式等于0,可得\hat w最优闭式解\\由于涉及到矩阵求逆，当X^TX是满秩矩阵或正定矩阵是，可得\hat w^*=(X^TX)^{-1}X^Ty\\对于不是满秩矩阵，那么会得到多个\hat w,选择哪个作为输出，由学习算法的归纳偏好决定，通常引入正则化项</script><p>更一般的，考虑单调可微函数g(.)，令</p><script type="math/tex; mode=display">y=g^{-1}(w^Tx+b),得到的模型称为广义线性模型，g(\cdot)称为联系函数</script><h4 id="三、对数几率回归"><a href="#三、对数几率回归" class="headerlink" title="三、对数几率回归"></a>三、对数几率回归</h4><p><strong>线性模型如何进行分类任务？</strong>找一个单调可微函数将分类任务的真实标记y与线性回归模型的预测值联系起来。</p><script type="math/tex; mode=display">对于二分类任务，输出标记y\in \{0,1\},需将线性回归模型产生的实值预测值z=w^Tx+b，转换为0/1。\\最理想的是单位阶跃函数\quad y=\begin{cases}0, & \text{z < 0}  \\0.5, & \text{z = 0} \\1, & \text{z > 0}\end{cases}</script><p><img src="/2021/08/15/Linear-Model/ML-1.png" alt="ML"></p><p>因为单位阶跃函数不连续，所以希望找到一个在一定程度上近似单位阶跃函数的”替代函数”，并希望它单调可微。而对数几率函数(logistic function)就是常用的一个替代函数：</p><script type="math/tex; mode=display">y=\frac{1}{1+e^{-z}}</script><p><strong>为什么看上去已经做了非线性变换，仍然称为线性模型呢？</strong></p><script type="math/tex; mode=display">z=w^Tx+b,带入上式，y=\frac{1}{1+e^{-(w^Tx+b)}}\\\frac{y}{1-y}=e^{w^Tx+b},则\ln\frac{y}{1-y}=w^Tx+b\\上式只是对预测值做了相应的对数变换，而模型仍然是线性模型\\若者y视为样本x的可能性，则1-y视为反例的可能性，两者比值称为几率，取对数得对数几率(log odds,简称logit)\\y=\frac{1}{1+e^{-(w^Tx+b)}}实际在用线性回归模型的预测结果去逼近真实标记的对数几率。\\对应模型为对数几率回归，实际为分类任务</script><p>如何求取上式中的<strong>w</strong>和<strong>b</strong>?</p><script type="math/tex; mode=display">将y视为类的后验概率估计p(y=1|x),则\ln\frac{p(y=1|x)}{p(y=0|x)}=w^Tx+b\\其中，p(y=1|x)=\frac{e^{w^Tx+b}}{1+e^{w^Tx+b}},p(y=0|x)=\frac{1}{1+e^{w^Tx+b}}\\后验概率：事情已经发生了，导致事件发生的原因有很多，判断结果的发生是由哪个原因引起的概率\\p(y=1|x)=\frac{p(x(y=1))}{p(x)}=\frac{p(y=1)p(x|y=1)}{p(x)}</script><p>对于上式，可以通过极大似然法来估计未知参数<strong>w</strong>和<strong>b</strong>。</p><h4 id="四、线性判别分析"><a href="#四、线性判别分析" class="headerlink" title="四、线性判别分析"></a>四、线性判别分析</h4><p>线性判别分析(Linear Discriminant Analysis,简称LDA),是一种经典的线性学习方法。</p><p>LDA的思想非常朴素：给定训练样例集，设法将样例投影到一条直线上，使得同类样例的投影点尽可能接近、异类样例的投影点尽可能远离。对新样本进行分类时，将其投影到同样的这条直线上，再根据投影点的位置来确定样本的类别。</p><p><img src="/2021/08/15/Linear-Model/ML-2.png" alt="ML"></p><script type="math/tex; mode=display">给定数据集D=\{(x_i,y_i)\}^m_{i=1},y_i\in \{0,1\}。\\令X_i、\mu_i、\Sigma_i分别表示第i\in \{0,1\}类实例的集合、均值向量、协方差矩阵。\\若将所有样本投影到直线上，则两类的协方差分别为w^T\Sigma_0w和w^T\Sigma_1w</script><p>想要让同类样例的投影点尽可能接近，可以让同类样例投影点的协方差尽可能小，即w<sup>T</sup>&Sigma;<sub>0</sub>w+w<sup>T</sup>&Sigma;<sub>1</sub>w尽可能小；而欲使异类样例的投影点尽可能远离，可以让类中心之间的距离尽可能大，即||w<sup>T</sup>&Sigma;<sub>0</sub>w-w<sup>T</sup>&Sigma;<sub>1</sub>w||尽可能大。同时考虑两者，则可得到最大化的目标：</p><script type="math/tex; mode=display">\begin{align}J=&\frac{\|w^T\mu_0-w^T\mu_1\|^2_2}{w^T\Sigma_0w+w^T\Sigma_1w}\\=&\frac{\|(w^T\mu_0-w^T\mu_1)^T\|^2_2}{w^T(\Sigma_0+\Sigma_1)w}\\=&\frac{\|(\mu_0-\mu_1)^Tw\|^2_2}{w^T(\Sigma_0+\Sigma_1)w}\\=&\frac{[(\mu_0-\mu_1)^Tw]^T(\mu_0-\mu_1)^Tw}{w^T(\Sigma_0+\Sigma_1)w} \\=&\frac{w^T(\mu_0-\mu_1)(\mu_0-\mu_1)^Tw}{w^T(\Sigma_0+\Sigma_1)w}\end{align}</script><script type="math/tex; mode=display">定义类内散度矩阵:S_w=\Sigma_0+\Sigma_1=\sum_{x\in X_0}(x-\mu_0)(x-\mu_0)^T+\sum_{x\in X_1}(x-\mu_1)(x-\mu_1)^T\\类间散度矩阵:S_b=(\mu_0-\mu_1)(\mu_0-\mu_1)^T\\则上式J可以重写为：J=\frac{w^TS_bw}{w^TS_ww}</script><h4 id="五、多分类学习"><a href="#五、多分类学习" class="headerlink" title="五、多分类学习"></a>五、多分类学习</h4><p>这里利用二分类学习器来解决多分类问题。考虑N个类别C<sub>1</sub>，C<sub>2</sub>，…，C<sub>N</sub>，多分类学习的基本思路是”拆解法”，即将多分类任务拆为若干个二分类任务求解。具体做法如下：</p><ul><li>先对问题进行拆分，然后为拆出的每个二分类任务训练一个分类器；<strong>如何拆分？</strong></li><li>在测试时，对这些分类器的结果进行集成以获得最终的多分类结果。<strong>如何集成？</strong></li></ul><p>给定数据集D={(x<sub>1</sub>,y<sub>1</sub>)，(x<sub>2</sub>,y<sub>2</sub>),…, (x<sub>m</sub>,y<sub>m</sub>)},y<sub>i</sub>&in;{C<sub>1</sub>,C<sub>2</sub>,…,C<sub>N</sub>}</p><p>5.1 拆分：一对一(One vs. One)</p><p>​    将N个类别两两配对，从而产生N(N-1)/2个二分类任务。如为区分C<sub>i</sub>和C<sub>j</sub>&gt;训练一个分类器，该分类器把D中的C<sub>i</sub>类样例作为正例C<sub>j</sub>样例作为反例。</p><p>​    在测试阶段，新样本将同时提交给所有分类器，于是能够获得N(N-1)/2个分类结果，最终结果可通过投票产生。即将预测得最多的类别作为最终的分类结果。</p><p>5.2 拆分：一对其余(One vs. Rest)</p><p>​    每次将一个类的样例作为正例，所有其他类的样例作为反例来训练N个分类器。</p><p>​    测试时，如果只有一个分类器预测为正类，则对应的类标记作为最终分类结果。若有多个分类器预测为正类，则通常考虑各分类器的预测置性度，选择置信度最大的类别标记作为分类结果。</p><p>5.3 拆分：多对多(Many vs. Many)</p><p>每次将若干个类作为正类，若干个其他类作为反类。其中，对于正反类的构造必须有特殊的设计，不能随意选取。一种最常用的是MvM技术：”纠错输出码”(ECOC)。主要分为两步：编码和解码。</p><h4 id="六、类别不平衡问题"><a href="#六、类别不平衡问题" class="headerlink" title="六、类别不平衡问题"></a>六、类别不平衡问题</h4><p>类别不平衡问题(class-imbalance)是指分类任务中不同类别的训练样例数目差别很大的情况。</p><p>解决类别不平衡现有的三类做法：</p><ol><li>直接对训练集里的反类样例进行”欠采样”(undersampling),即去除一些反例使得正、反例数目接近，然后再进行学习。不能随机丢弃反例，可能丢失一些重要信息。代表算法EasyEnsemble，采用集成学习机制，将反例分成若干个集合供不同学习器使用。</li><li>对训练集里的正类样例进行”过采样”(oversampling),即增加一些正例使得正、反例数目接近，然后再进行学习。过采样不能简单重复初始的正样本，这会招致严重过拟合。过采样的代表算法是SMOTE算法，通过对正例插值产生额外的正样本。</li><li>直接基于原始训练集进行学习，但在用训练好的分类器进行预测时，需要进行“阈值移动”</li></ol><script type="math/tex; mode=display">一般的分类器以0.5作为阈值，来判别样本是正例还是反例\\因此，y\gt\frac{1}{2}\Rightarrow 2y\gt 1\Rightarrow y\gt 1-y\Rightarrow \frac{y}{1-y}\gt 1\\当训练集中，正反例数目不同时，令m^+表示正例数目，m^-表示反例数据，观测几率是\frac{m^+}{m^-}\\如果假设训练集是真实样本总体的无偏采样，那么观测几率就代表了真实几率\\当分类器的预测几率高于观测几率就应判断为正例，即\frac{y}{1-y}\gt\frac{m^+}{m^-},则预测为正例\\相应的对预测值再做缩放，可以得到类似于y'\gt ?\Rightarrow\frac{y'}{1-y'}=\frac{y}{1-y}\times\frac{m^-}{m^+}\gt1</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第三章-线性模型（西瓜书学习-笔记）&quot;&gt;&lt;a href=&quot;#第三章-线性模型（西瓜书学习-笔记）&quot; class=&quot;headerlink&quot; title=&quot;第三章 线性模型（西瓜书学习-笔记）&quot;&gt;&lt;/a&gt;第三章 线性模型（西瓜书学习-笔记）&lt;/h2&gt;&lt;h4 id=&quot;一
      
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Model-Evaluation-And-Selection</title>
    <link href="http://yoursite.com/2021/08/15/Model-Evaluation-And-Selection/"/>
    <id>http://yoursite.com/2021/08/15/Model-Evaluation-And-Selection/</id>
    <published>2021-08-15T10:01:19.000Z</published>
    <updated>2021-08-15T10:05:21.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第二章-模型评估与选择（西瓜书学习-笔记）"><a href="#第二章-模型评估与选择（西瓜书学习-笔记）" class="headerlink" title="第二章 模型评估与选择（西瓜书学习-笔记）"></a>第二章 模型评估与选择（西瓜书学习-笔记）</h2><p><strong>为什么需要模型评估与选择？</strong></p><p>1、学习器的实际预测输出与样本的真实输出之间的差异称为”误差”；</p><p>2、学习器在训练数据集上的误差称为”训练误差”，或”经验误差”；</p><p>3、在新样本上的误差称为”泛化误差”，学习的最终目的是得到泛化误差小的学习器，而非训练误差小的学习器。因为训练误差小可能已经过拟合了，导致不能用。</p><p>4、但实际中，并不知道新样本，所以只能从训练样本中尽可能学出适用于所有潜在样本的“普遍规律“，努力使经验误差最小化的同时，寻找泛化误差最小的模型。</p><p><strong>那么过拟合能够完全避免吗？</strong></p><p>在书中说无法彻底避免，只能缓解。讲到机器学习是NP难问题，而学习算法必须在多项式时间内运行完。因为P&ne;NP,所以过拟合不可避免。</p><h4 id="一、评估方法"><a href="#一、评估方法" class="headerlink" title="一、评估方法"></a>一、评估方法</h4><p><strong>用什么方法评估学习器的泛化误差？</strong></p><p>需要一个”测试集”来测试学习器对新样本的判别能力，以测试误差作为泛化误差的近似。假设测试样本与训练样本独立同分布。但要求尽量测试集与训练集互斥。</p><p><strong>对于包含m个样例的数据集D，如何分数据？</strong></p><p>1.1 留出法(hold-out): 直接将数据集D划分为两个互斥的集合，其中一个作为训练集S，另一个作为测试集T。D=S&cup;T, S&cap;T=&varnothing;。在S上训练处模型后，用T来评估其测试误差。</p><p>注意：一、训练/测试集的划分要尽可能保持数据分布的一致性，避免因数据划分过程引入额外的偏差而对最终结果产生影响。比如，D包含500个正样本，500个负样本。S分到了70%的样本，其中要保持正负样本的比例，即正样本350例，负样本350例。T分到了30%的样本，其中正样本150例，负样本150例。</p><p>二、样本的数量给定后，对于数据集D的分割也有不同的方式，比如：把D中样本排序，是取前面的350个，还是中间的350个，还是最后的350个样例作为训练集的正/负样本。一般需要采用若干次随机划分，重复进行试验评估后取平均值作为留出法的评估结果。</p><p>为了评估整体数据集D的性能，常见做法是将大约2/3~4/5的样本用于训练，剩余样本用于测试。</p><p>1.2 交叉验证法：先将数据集D划分为k个大小相似的互斥子集，即D=D<sub>1</sub>&cup;D<sub>2</sub>&cup;…&cup;D<sub>k</sub>，D<sub>i</sub>&cap;D<sub>j</sub>=&varnothing;（i&ne;j）,每个自己D<sub>i</sub>都尽可能保持数据分布的一致性。然后，每次用k-1个子集的并集作为训练集，余下的那个子集作为测试集；这样就可获得k组训练/测试集。从而可进行k次训练和测试，最终返回的是k个测试结果的均值。又称”k折交叉验证”，其中k的取值很大程度上，决定了评估结果的稳定性和保真性(fidelity)。k最常用的取值是10.</p><p><img src="/2021/08/15/Model-Evaluation-And-Selection/ImageProcessing100Wen-master/hexo/source/_post/ML-0.png" alt="Machine-Learn"></p><p>交叉验证法同样存在将数据集D划分为k个子集同样存在多种划分方式。</p><p>1.3 自助法</p><p>以自助采样为基础。给定包含m个样本的数据集D，对它进行采样产生数据集D’：每次随机从D中挑选一个样本，将其拷贝放入D’，然后又放回的重复执行m次，得到包含m个样本的数据集D‘。</p><h4 id="二、性能度量"><a href="#二、性能度量" class="headerlink" title="二、性能度量"></a>二、性能度量</h4><p>为了评估模型的泛化性能，不仅需要有效可行的实验估计方法，如留出法、K折交叉验证法等。还需要有衡量模型泛化能力的评价标准，即性能度量。在做模型评估的时候，对于什么样的模型是好的，不仅取决于算法和数据，还决定于任务需求。</p><h5 id="2-1-均方误差"><a href="#2-1-均方误差" class="headerlink" title="2.1 均方误差"></a>2.1 均方误差</h5><p>1.1 针对离散的数据</p><script type="math/tex; mode=display">E(f;D) = \frac{1}{m}(f(x_i)-y_i)^2</script><p>1.2 针对连续的数据</p><script type="math/tex; mode=display">E(f;D) = \int_{x\sim D} (f(x)-y)^2p(x){\rm d}x</script><h5 id="2-2-查全率、查准率与F1"><a href="#2-2-查全率、查准率与F1" class="headerlink" title="2.2 查全率、查准率与F1"></a>2.2 查全率、查准率与F1</h5><p>对于二分类问题，可将样例根据真实类别与学习器预测类别的组合划分为真正例(TP)，假正例(FP)，真反例(TN)和假反例(FN)，用混淆矩阵表示如下：</p><p><img src="/2021/08/15/Model-Evaluation-And-Selection/ImageProcessing100Wen-master/hexo/source/_post/ConfusionMatrix.png" alt="ML"></p><script type="math/tex; mode=display">查准率P： P=\frac{TP}{TP+FP}\\查全率R： R=\frac{TP}{TP+FN}</script><h5 id="2-3-P-R曲线"><a href="#2-3-P-R曲线" class="headerlink" title="2.3 P-R曲线"></a>2.3 P-R曲线</h5><p>如何画PR曲线，找一组样本，根据学习器的预测结果对样例进行排序，排在前面的是学习器认为”最可能”是正例的样本，排在最后的则是学习器认为”最不可能”是正例的样本。按此顺序逐个把样本作为正例进行预测，每次可以计算出当前的查全率、查准率。以查准率为纵轴、查全率为横轴作图。<br>举例：比如有20个样本，10个正例，10个反例。将20个样例用学习器预测一遍，得到20个预测结果，对20个样例根据预测结果排序。排好序后从预测值最大的开始，第一次取第一个为预测的正样本，其余为预测的负样本，计算查全率和查准率。第二次取前两个为预测的正样本，其余为预测的负样本，计算查全率和查准率。依次进行，直到取全部20个样本都作为预测的正样本，负样本为零。得到20组查全率和查准率的预测值，就可以作图了。<br><img src="/2021/08/15/Model-Evaluation-And-Selection/1.png" alt="ML"></p><p><strong>如何比较不同学习器的优劣？</strong></p><p>看P-R曲线，如上图如果A完全将C包住则A的性能优于学习器C的性能。如果有交叉，则一般可用P-R曲线下面的面积作为评判标准。但是面积不好求，所以有人提出要综合考虑了查全率和查准率的性能度量。这就出现了F1度量：</p><script type="math/tex; mode=display">F1=\frac{2\times P\times R}{P+R}=\frac{2\times TP}{样例总是+TP-TN}</script><p>在一些应用中，对查准率和查全率的重视程度有所不同，此时，可以使用F1、F<sub>&beta;</sub>作为查准率/查全率不同偏好的度量值。</p><script type="math/tex; mode=display">F_\beta=\frac{(1+\beta^2)\times P\times R}{\beta^2\times P+R}   \quad \beta =1是即为F1,\beta>1时对查全率有更大的影响，\beta<1时，对查准率有更大的影响。</script><p>在实际应用中，往往需要进行多次训练/测试，每次都会得到一个混淆矩阵；或对于多分类任务，每两两类别的组合都对应一个混淆矩阵。<strong>那么如何在n个二分类混淆矩阵上综合考察查准率和查全率呢？</strong></p><ol><li>直接现在各混淆矩阵上分别计算处查准率和查全率，记为(P<sub>1</sub>,R<sub>1</sub>),(P<sub>2</sub>,R<sub>2</sub>),…,(P<sub>n</sub>,R<sub>n</sub>)。在计算平均值，得到宏查准率(macro-P)，宏查全率(macro-R)和宏F1(macro-F1)</li><li>可先将各混淆矩阵的对应元素进行平均，得到TP,FP,TN,FN的平均值TP’,FP’,TN’,FN’,在基于这些平均值计算出微查准率(micro-P)，微查全率(micro-R)和微F1(micro-F1)</li></ol><h5 id="2-4、ROC曲线"><a href="#2-4、ROC曲线" class="headerlink" title="2.4、ROC曲线"></a>2.4、ROC曲线</h5><p>ROC全称：（Receiver Operating Characteristic(受试者工作特征)）</p><p>学习器为测试样本产生一个实值或概率预测，然后将预测值于一个分类阈值进行比较。若大于阈值则分为正类，否则为反类。实际上，根据这个实值或概率预测结果，可以将测试样本进行排序，”最可能”是正例的排在最前面，”最不可能”是正例排在最后面。这样分类相当于在这个排序中以某个截断点将样本分为两部分，前一部分为正例，后一部分为反例。<br>在不同的应用任务中，可根据任务需求来采用不同的截断点；如重视”查准率”，则可选择排序中靠前的位置进行截断；若重视”查全率”，则可选择靠后的位置进行截断。而ROC曲线就是根据不同截断画出的判断泛化性能的有利工具。<br>ROC曲线和PR曲线的计算过程是一样的，但使用的指标不一样，ROC曲线<strong>纵轴</strong>使用”真正例率(TPR)”,<strong>横轴</strong>使用”假正例率(FPR)”</p><script type="math/tex; mode=display">TPR=\frac{TP}{TP+FN}, FPR=\frac{FP}{TN+FP}</script><p><strong>如何比较多个学习器的优劣：</strong>1、查看ROC曲线时候能完全包住另一个，2、看ROC曲线下面的面积AUC(Area Under ROC Curve)</p><h5 id="2-5、代价敏感错误率与代价曲线"><a href="#2-5、代价敏感错误率与代价曲线" class="headerlink" title="2.5、代价敏感错误率与代价曲线"></a>2.5、代价敏感错误率与代价曲线</h5><p>由于不同类型的错误所造成的后果不同，所以机器学习器如果出现了错误的预测，那么也应该会造成不同的代价。为了权衡不同类型错误所造成的不同损失，可以使用”非均等代价”。</p><script type="math/tex; mode=display">代价敏感错误率：E(f;D;cost)=\frac{1}{m}(\sum_{x_i\in D^+}I(f(x_i)\ne y_i)\times cost_{01}+\sum_{x_i\in D^-}I(f(x_i)\ne y_i\times cost_{10}))</script><p>在非均等代价下，ROC曲线不能直接反映出学习器的期望总体代价，而”代价曲线图”可以达到这个目的。(P2.3.4节)</p><h4 id="三、比较检验"><a href="#三、比较检验" class="headerlink" title="三、比较检验"></a>三、比较检验</h4><p>如何正确的比较性能度量得到的值？是比大小吗？<br>由于机器学习中性能比较比实际复杂的多，由于多种因素的作用，所以需要使用<strong>统计假设检验</strong>。</p><p>3.1 假设检验</p><p>3.2 交叉验证t检验</p><h4 id="四、偏差和方差"><a href="#四、偏差和方差" class="headerlink" title="四、偏差和方差"></a>四、偏差和方差</h4><p>“偏差-方差分解”是解释学习算法泛化性能的一种重要工具。</p><p>假设测试样本为x，令yD为x在数据集中的标记，y为x的真实标记，f(x;D)为训练集D上学得模型f在x上的预测输出。以回归任务为例，学习算法的期望预测为：</p><script type="math/tex; mode=display">\overline f(x)=E_D[f(x;D)]\\使用相同样本的不同训练集产生的方差为：var(x)=E_D[(f(x;D)-\overline f(x))^2]\\噪声为：\epsilon^2=E_D[(y_D-y)^2]\\期望输出与真实标记的差别称为偏差，即：bias^2(x)=(\overline f(x)-y)^2</script><p>假定噪声期望为零，即E<sub>D</sub>[y<sub>D</sub>-y]=0。通过简单的多项式展开合并，可对算法的期望泛化误差进行分解：</p><script type="math/tex; mode=display">\begin{align}E(f;D)=&E_D[(f(x;D)-y_D)^2]\\=&E_D[(f(x;D)-\overline f(x)+\overline f(x)-y_D)^2]\quad 减一个，加一个\overline f(x)\\=&E_D[(f(x;D)-\overline f(x))^2+(\overline f(x)-y_D)^2+2(f(x;D)-\overline f(x))(\overline f(x)-y_D)]\because E[X+Y]=E[X]+E[Y]\\=&E_D[(f(x;D)-\overline f(x))^2]+E_D[(\overline f(x)-y_D)^2]+E_D[2(f(x;D)-\overline f(x))(\overline f(x)-y_D)]\\\because &E_D[2(f(x;D)-\overline f(x))(\overline f(x)-y_D)]=E_D[2(f(x;D)-\overline f(x))\cdot\overline f(x)]-E_D[2(f(x;D)-\overline f(x))\cdot y_D]\\展开第一项&E_D[2(f(x;D)-\overline f(x))\cdot\overline f(x)]=E_D[2f(x;D)\cdot\overline f(x)-2\overline f(x)\cdot \overline f(x)] \\\because& \overline f(x)是常数，E[AX+B]=AE[X]+B\\\therefore &E_D[2(f(x;D)-\overline f(x))\cdot\overline f(x)]=2\overline f(x)\cdot E_D[f(x;D)]-2\overline f(x)\cdot \overline f(x)\\\because& E_D[f(x;D)]=\overline f(x),\therefore E_D[2(f(x;D)-\overline f(x))\cdot\overline f(x)]=0\\展开第二项&E_D[2(f(x;D)-\overline f(x))\cdot y_D]=2E_D[f(x;D)\cdot y_D]-2\overline f(x)\cdot E_D[y_D]\\由于噪声和&f无关，所以f(x;D)和y_D是两个相互独立的随机变量，根据期望性质E[XY]=E[X]E[Y](X,Y独立)\\E_D[2(f&(x;D)-\overline f(x))\cdot y_D]=2E_D[f(x;D)\cdot y_D]-2\overline f(x)\cdot E_D[y_D]=2E_D[f(x;D)]\cdot E_D[y_D]-2\overline f(x)E_D[y_D]\\\because& E_D[f(x;D)]=\overline f(x),\therefore E_D[2(f(x;D)-\overline f(x))\cdot y_D]=0\\\end{align}</script><script type="math/tex; mode=display">\begin{align}\therefore E_D[(f(x;D)-y_D)^2]=&E_D[(f(x;D)-\overline f(x))^2]+E_D[(\overline f(x)-y_D)^2]\\=&E_D[(f(x;D)-\overline f(x))^2]+E_D[(\overline f(x)-y+y+y_D)^2]\\=&E_D[(f(x;D)-\overline f(x))^2]+E_D[(\overline f(x)-y)^2]+E_D[(y-y_D)^2]+2E_D[(\overline f(x)-y)(y-y_D)]\\\because& \overline f(x)和y都为常量，\therefore E_D[(\overline f(x)-y)^2]=(\overline f(x)-y)^2\\同理&2E_D[(\overline f(x)-y)(y-y_D)]=2(\overline f(x)-y)\cdot E_D[(y-y_D)]\\又假&设噪声期望为0,E_D[(y-y_D)]=0,\therefore 2E_D[(\overline f(x)-y)(y-y_D)]=0\\因此&，E_D[(f(x;D)-y_D)^2]=E_D[(f(x;D)-\overline f(x))^2]+E_D[(\overline f(x)-y)^2]+E_D[(y-y_D)^2]\\于是&，E[f;D]=bias^2(x)+var(x)+\epsilon^2\end{align}</script><p>由上式可得：泛化误差可分解为偏差、方差与噪声之和。</p><p>偏差：度量了学习算法的期望预测与真实结果的偏离程度，即刻画了学习算法本身的拟合能力。</p><p>方差：度量了同样大小的训练集的变动所导致的学习性能的变化，即刻画了数据扰动所造成的影响。</p><p>噪声：表达了在当前任务上任何学习算法所能达到的期望泛化误差的下界，即刻画了学习问题本身的难度。</p><p>由于泛化误差可分解为偏差、方差与噪声之和，所以泛化性能由学习算法的能力、数据的充分性以及学习任务本身的难度所共同决定。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第二章-模型评估与选择（西瓜书学习-笔记）&quot;&gt;&lt;a href=&quot;#第二章-模型评估与选择（西瓜书学习-笔记）&quot; class=&quot;headerlink&quot; title=&quot;第二章 模型评估与选择（西瓜书学习-笔记）&quot;&gt;&lt;/a&gt;第二章 模型评估与选择（西瓜书学习-笔记）&lt;/
      
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>SPPNet</title>
    <link href="http://yoursite.com/2021/07/25/SPPNet/"/>
    <id>http://yoursite.com/2021/07/25/SPPNet/</id>
    <published>2021-07-25T14:15:25.000Z</published>
    <updated>2021-07-25T14:17:44.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SPPNet学习笔记"><a href="#SPPNet学习笔记" class="headerlink" title="SPPNet学习笔记"></a>SPPNet学习笔记</h2><p><strong>Spatial Pyramid Pooling in Deep ConvolutionalNetworks for Visual Recognition</strong><a href="https://arxiv.org/pdf/1406.4729.pdf" target="_blank" rel="noopener">论文链接</a></p><h4 id="一、为了解决什么问题"><a href="#一、为了解决什么问题" class="headerlink" title="一、为了解决什么问题"></a>一、为了解决什么问题</h4><p>在CNNs的训练和测试中<strong>存在一个技术问题</strong>：流行的CNNs需要<strong>固定输入图像的尺寸</strong>（例如224×224），这限制了输入图像的纵横比和尺度。当应用于任意尺寸的图像时， 当前方法主要是通过<strong>裁剪</strong>或通过<strong>变形</strong>将输入图像拟合到固定大小。<strong>但是</strong>裁剪区域可能<strong>不包含整个对象</strong>，而扭曲的内容可能会导致不必要的<strong>几何失真</strong>。由于内容丢失或失真，识别<strong>精度可能会受到影响</strong>。不可能采用多尺度或者是大量的数据增强去训练模型。</p><p><strong>分析为什么需要固定尺寸的输入？</strong></p><p> 一个CNN主要由两部分组成：卷积层和后面的全连接层。 卷积层以滑动窗口方式运行，并输出表示激活空间排列的特征图。事实上，卷积层不需要固定的图像大小，可以生成任意大小的特征图。 另一方面，全连接层需要根据其定义具有固定大小/长度的输入。 因此，固定大小的约束仅来自存在于网络更深阶段的全连接层。 </p><p><strong>如何解决全连接层需要固定输入的问题？</strong></p><p>在最后的卷积层和全连接层之间加入SPP层(<code>spatial pyramid pooling layer</code>)。具体做法在下图中是，在conv5层得到的特征图是256个feature maps，每层的特征图都做一次spatial pyramid pooling。先把每个特征图分割成多个不同尺寸的网格，比如网格分别为4x4、2x2、1x1,然后每个网格做max  pooling，这样256层特征图就形成了16x256，4x256，1x256维特征，他们连起来就形成了一个固定长度的特征向量，将这个向量输入到后面的全连接层。</p><p><img src="/2021/07/25/SPPNet/sppnet.png" alt="SPPNet"></p><p><img src="/2021/07/25/SPPNet/sppnet-1.png" alt="SPPNet"></p><p><strong>获得的好处：</strong></p><p>1) SPP 能够生成固定长度的输出，而不管输入大小，而滑动窗口池化用于以前的深度网络 [3] 不能； </p><p>2）SPP使用多级空间bins，而滑动窗口池化只使用单一窗口大小。多级池化已被证明对对象变形具有鲁棒性(SPM中证明)； </p><p>3) 由于输入尺度的灵活性，SPP 可以池化以可变尺度提取的特征。通过实验，我们表明所有这些因素都提高了深度网络的识别精度。 </p><h4 id="二、多尺度训练方法"><a href="#二、多尺度训练方法" class="headerlink" title="二、多尺度训练方法"></a>二、多尺度训练方法</h4><p>当<strong>输入图像</strong>处于<strong>不同尺度</strong>时，<strong>网络（具有相同过滤器尺寸）将提取不同尺度的特征</strong>。 尺度在传统方法中起着重要作用，例如，SIFT 向量通常在多个尺度上提取 [29]、[27]（由补丁和高斯滤波器的大小决定）。 我们将证明尺度对于深度网络的准确性也很重要。 </p><p>从理论上讲，无论输入图像大小如何，都可以使用标准的反向传播来训练上述网络结构。 但在实践中，GPU 实现（例如 cuda-convnet和 Caffe）最好在固定输入图像上运行。 接下来我们描述我们的训练解决方案，它利用这些 GPU 实现，同时仍然保留空间金字塔池化行为。 </p><p><strong>首先考虑固定尺度的训练</strong></p><p>和之前的工作一样，我们首先考虑一个网络，它采用从图像中裁剪出来的固定尺寸输入（224×224）。裁剪是为了数据增强。对于给定尺寸的图像，我们可以预先计算空间金字塔池化所需的 bin 大小。考虑 conv5 之后的特征图，其大小为 a×a（例如，13×13）。 假如金字塔中的一层有n×n个bins，我们将此金字塔层的池化过程实现为滑动窗口池化，滑动窗的大小为win=&lceil;a/n&rceil;，步长stride=&lfloor;a/n&rfloor;，对应金字塔中的L个层级，用同样的方式实现。最后将L个输出concatenate到一起输入全连接层。</p><p><strong>多尺度的训练</strong></p><p>为了解决<strong>训练中不同图像尺寸</strong>的问题，我们考虑了一组<strong>预定义的尺寸</strong>。我们考虑两种尺寸：180×180 和 224×224。<strong>我们没有裁剪较小的 180×180 区域，而是将上述 224×224 区域调整为180×180</strong>(这句话的意思是输入的图像其实都是224x224，但是为了考虑多尺度训练，将部分图像的尺寸由224x224缩放到180x180)。因此，两个尺度的区域仅在分辨率上不同，而在<strong>内容/布局</strong>(等比例缩放)上没有区别。为了让网络接受180×180 的输入，我们实现了另一个固定大小的输入为180×180的网络。在这种情况下，conv5之后的特征图，其大小为 a×a=10×10(<strong>注意</strong>，这里用的是<strong>同一个网络结构</strong>，存在一种情况：如果网络较深或图像尺寸比例太大，不同尺度的图像输入后，半中间可能卷积的尺寸就为0了)。然后我们还是用滑动窗的大小为win=&lceil;a/n&rceil;，步长stride=&lfloor;a/n&rfloor;来实现每个金字塔池化级别。这个 180 网络的空间金字塔池化层的输出具有与 224 网络相同的固定长度(<strong>为什么呢？</strong>因为这里不管最后一层卷积输出的特征图是13x13还是10x10都需要根据n的值将feature map分成固定大小的块做pooling，比如4x4，2x2，1x1这些值是固定的，feature map的数量也是固定的<strong>(卷积核数固定)</strong>，如：256)。因此，这个180x180的网络在每一层具有与224网络完全相同的参数。换句话说，在训练期间，我们通过两个<strong>共享参数的固定大小网络</strong>实现了<strong>不同输入大小</strong>的 SPP-net。 </p><p>为了减少从一个网络（例如，224）切换到另一个（例如，180）的开销，我们在一个网络上训练每个完整时期(每一个epoch)，然后在下一个完整时期切换到另一个网络（<strong>保留所有权重</strong>）。 这是迭代的。 在实验中，我们发现这种多尺寸训练的收敛率与上述单尺寸训练相似。 </p><p><strong>请注意，上述单一/多尺寸解决方案仅用于训练。 在测试阶段，可以直接将 SPP-net训练出的模型应用于任何尺寸的图像。</strong> </p><h4 id="三、SPPNet用于目标检测"><a href="#三、SPPNet用于目标检测" class="headerlink" title="三、SPPNet用于目标检测"></a>三、SPPNet用于目标检测</h4><p>我们的 SPP-net 也可用于目标检测。我们只从整个图像中提取一次特征图（可能在多个尺度上）。 然后我们在<strong>特征图的每个候选窗口上</strong>应用<strong>空间金字塔池化</strong>来池化<strong>这个窗口</strong>的<strong>固定长度</strong>表示。 因为耗时的卷积只应用一次，我们的方法可以快几个数量级。 </p><p>我们的方法从特征图的区域中提取窗口特征，而 R-CNN 直接从图像区域中提取。 在以前的工作中，可变形零件模型 (DPM)从 HOG特征图中的窗口中提取特征，而选择性搜索 (SS) 方法 从编码的 SIFT 特征图中的窗口中提取特征。 Overfeat检测方法也从深度卷积特征图的窗口中提取，但需要预先定义窗口大小。 相反，我们的方法可以从深度卷积特征图中的任意窗口中提取特征。对卷积层可视化发现：输入图片的某个位置的特征反应在特征图上也是在相同位置。基于这一事实，对某个ROI区域的特征提取只需要在特征图上的相应位置提取就可以了。</p><p><img src="/2021/07/25/SPPNet/sppnet2.png" alt="SPPNet"></p><p>我们使用<strong>选择性搜索(select search)</strong>的“快速”模式为每个图像生成大约 2,000 个候选窗口。然后我们调整图像的大小，使得 min(w,h) = s，并从<strong>整个图像中提取特征图</strong>。我们暂时使用ZF-5的SPP-net模型（单尺寸训练）。 在每个<strong>候选窗口</strong>中，我们使用 4 级空间金字塔（1×1、2×2、3×3、6×6、总共 50 个 bin）来<strong>汇集</strong>特征。 这将为每个窗口生成一个 12,800-d (256×50) 的表示。 这些表示被<strong>提供给网络的全连接层</strong>。 然后<strong>针对这些特征为每个类别训练一个二元线性 SVM 分类器</strong>。 </p><p>我们对 SVM 训练的实施如下。 我们使用<strong>真实窗口来生成正样本</strong>。 <strong>负样本</strong>是那些与<strong>正窗口重叠最多 30%</strong>（由交集与联合（IoU）比率衡量）的那些样本。如果任何<strong>负样本</strong>与<strong>另一个负样本</strong>重叠<strong>超过 70%，则将其移除</strong>。 我们应用标准的<strong>hard negative mining</strong>来训练 SVM。 这一步迭代一次。 为所有 20 个类别训练 SVM 只需不到 1 小时。 在测试中，分类器用于对候选窗口进行评分。 然后我们在评分窗口上使用<strong>非最大抑制</strong>（阈值为 30%）。 </p><p>一张任意尺寸的图片，在最后的卷积层conv5可以得到特征图。根据Region proposal步骤可以得到很多候选区域，这个候选区域可以在特征图上找到相同位置对应的窗口，然后使用SPP，每个窗口都可以得到一个固定长度的输出。将这个输出输入到全连接层里面。这样，图片只需要经过一次CNN，候选区域特征直接从整张图片特征图上提取。在训练这个特征提取网络的时候，使用分类任务得到的网络，固定前面的卷积层，只微调后面的全连接层。</p><p>在检测的后面模块，仍然和R-CNN一样，使用SVM和边框回归。SVM的特征输入是FC层，边框回归特征使用SPP层。</p><p><strong>Mapping  a  Window  to  Feature  Maps(映射图像域中的窗口到特征图上)</strong></p><p>在图像域中给出了一个窗口，我们用它来裁剪经过多次子采样的卷积特征图（例如，conv5）。 所以我们需要在特征图上对齐窗口。 </p><p>在我们的实现中，我们将<strong>窗口的角点</strong>投影到特征图中的一个像素上，这样<strong>图像域中的这个角点最接近该特征图像素的感受野中心</strong>。 由于所有卷积层和池化层的填充，使得映射变得很复杂。 为了简化实现，在部署期间，我们为过滤器大小为 p 的层填充了&lfloor;p/2&rfloor;个pixels。 因此，对于以 (x’,y’) 为中心的响应(特征图)，其在图像域中的有效感受野以 (x,y) =(Sx’,Sy’) 为中心，其中 S是<strong>所有先前步幅的乘积</strong>。 在我们的模型中，对于 conv5 上的 ZF-5，S= 16，对于 conv5/7 上的 Overfeat-5/7，S= 12。 给定图像域中的一个窗口，我们将左（上）边界投影为：x′=&lfloor;x/S&rfloor;+1 和右（下）边界 x′=&lfloor;x/S&rfloor;−1。 如果填充不是&lfloor;p/2&rfloor;，我们需要给x添加一个适当的偏移量。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SPPNet学习笔记&quot;&gt;&lt;a href=&quot;#SPPNet学习笔记&quot; class=&quot;headerlink&quot; title=&quot;SPPNet学习笔记&quot;&gt;&lt;/a&gt;SPPNet学习笔记&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Spatial Pyramid Pooling in Dee
      
    
    </summary>
    
    
      <category term="Deep Learning" scheme="http://yoursite.com/categories/Deep-Learning/"/>
    
    
      <category term="Deep Learning" scheme="http://yoursite.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Image-Process-Image-Compression</title>
    <link href="http://yoursite.com/2021/07/25/Image-Process-Image-Compression/"/>
    <id>http://yoursite.com/2021/07/25/Image-Process-Image-Compression/</id>
    <published>2021-07-25T14:06:56.000Z</published>
    <updated>2021-07-25T14:12:31.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像处理学习"><a href="#图像处理学习" class="headerlink" title="图像处理学习"></a>图像处理学习</h2><h3 id="图像压缩笔记"><a href="#图像压缩笔记" class="headerlink" title="图像压缩笔记"></a>图像压缩笔记</h3><h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4><p>图像压缩是一种减少描绘一副图像所需数据量的技术和科学。<strong>那么为什么需要进行图像压缩呢？</strong></p><p>考虑使用720x480x24比特像素阵列来描绘2小时的标准清晰度(SD)电视电影所需的数据量，(24bit 是为了存储颜色信息)。由于数字电影(视频)是一个视频帧序列，其中每一帧都是一副全彩色静止图像。因为视频播放必须以近于30帧/秒的速率连续地显示，所以必须以：</p><script type="math/tex; mode=display">30\frac{帧}{秒}\times (720\times 480)\frac{像素}{帧}\times3\frac{字节}{像素}=31104000\quad(字节/秒)</script><p>的速率访问SD数字视频数据。则2小时的视频流由：</p><script type="math/tex; mode=display">31104000\frac{字节}{秒}\times(60^2)\frac{秒}{小时}\times2小时\approx2.24\times10^{11}字节</script><p>接近224GB(千兆字节)的数据组成。而一般的存储设备如DVD容量大致为8.5GB，则224GB的数据需要27张DVD来存储。如果想要将224GB的数据放到一张DVD存储盘上，则每一帧必须以平均26.3的系数压缩。对于高清晰度的电视，如1920x1080x24 比特/图像，则需要更高的压缩率。 </p><h4 id="二、数据冗余的类型"><a href="#二、数据冗余的类型" class="headerlink" title="二、数据冗余的类型"></a>二、数据冗余的类型</h4><ul><li><p>编码冗余</p><p>可以使用变长编码的形式(码字乘以每个灰度级的概率分布)，加大压缩率。</p></li><li><p>空间和时间冗余</p><p>需要寻找图像中的一种变换称为映射，分为可逆映射和不可逆映射。</p></li><li><p>不相关的信息</p><p>被人视觉忽略或者与应用无关的信息，但是可能会导致定量的损失，称为量化。 </p></li></ul><h4 id="三、图像信息的度量"><a href="#三、图像信息的度量" class="headerlink" title="三、图像信息的度量"></a>三、图像信息的度量</h4><p>利用信息论给出一个如何不丢失信息压缩的相关数学模型。假设信息的产生可用一个概率过程建模，通过用每个信源输出的平均信息(信源的熵)来表示一副图像中的信息实际上需要的最少的比特数。可在数字图像处理第三版p329处查阅</p><p><strong>保真度准则</strong></p><ul><li>客观保真度：使用均方误差和信噪比度量。</li><li>主管保真度：根据人的主观评估来衡量图像的质量，适应绝对等级尺度等进行衡量。</li></ul><p><strong>图像压缩模型</strong></p><p>图像压缩系统由两个不同的功能部分组成：一个编码器和一个解码器。 </p><p><img src="/2021/07/25/Image-Process-Image-Compression/1.png" alt="Image-Compression"></p><p><strong>一些基本的压缩方法</strong> </p><ul><li><p>霍夫曼编码</p></li><li><p>Golomb编码</p></li><li><p>算术编码</p></li><li><p>LZW编码</p></li><li><p>行程编码 </p></li><li><p>基于符号的编码</p></li><li><p>比特平面编码</p></li><li><p>块变换编码：把图像分成大小相等且不重叠的小块，并用二维变换单独处理这些块。二维变换可以用一种可逆线性变换(如傅里叶变换)把每个块或子图像映射为变换系数集合，然后对这些变换系数进行量化(以一种预定义的方式有选择性地消除或更粗略地量化那些携带最少信息的系数)和编码(一般为变长编码)。</p><p><img src="/2021/07/25/Image-Process-Image-Compression/2.png" alt="Block-Compression"></p></li></ul><p><strong>块变换编码中变换的选择：</strong>取决于可容忍的重建误差的大小和可用的计算资源。压缩是在对变换系数的量化期间实现的。正变换核核反变换核决定了所计算的变换的类型核总体计算的复杂性，以及所采用块变换编码系统的重建误差。(具体看p362)</p><p><strong>变换类型：</strong></p><ul><li><p>Walsh-Hadamard(WHT)变换</p><p>首先,介绍一下<strong>格雷码</strong>，在一组数的编码中，若任意两个相邻的代码只有一位二进制不同，则称这种编码为格雷码(Gray Code)，另外由于最大数与最小数之间也仅一位不同，即“首尾相连”，因此又称循环码或反射码。</p><p><strong>那么为什么要使用格雷码？</strong></p><p>格雷码是一种具有反射特性与循环特性的单步自补码，其循环和单步特性消除了随机数时出现重大错误的可能，其反射和自补特性使得对其进行求反操作也非常方便，所以，格雷码属于一种可靠性编码，是一种错误最小化的编码方式。</p><p>虽然自然二进制码可以直接有数/模转换器转换成模型信号，但是某些情况，例如从十进制的3(011)转换为4(100)时，二进制码的每一位都要变，能使数字电路产生很大的尖峰电流脉冲。而格雷码则没有这一缺点，它在相邻位间转换时，只有一位产生变化。大大地减少了由一个状态到下一个状态时逻辑的混乱。</p><p><strong>二进制到格雷码的转换：</strong></p><script type="math/tex; mode=display">n=(n_{p-1},n_{p-2},......n_k......n_2,n_1,n_0) \\g=(g_{p-1},g_{p-2},......g_k......g_2,h_1,h_0) \\\begin{cases}g_{p-1}=n_{p-1}\\g_{p-2}=n_{p-1}\bigoplus n_{p-2} \quad (\bigoplus,与或符号，对应位相同为0，不同为1)\\......\\g_k=n_{k+1}\bigoplus n_k\\......\\g_1=n_2\bigoplus n_1 \\g_0=n_1\bigoplus n_0\end{cases}</script><p>| 十进制 | 二进制(自然排序) | 二进制(二进制) | 格雷码 |<br>| ——— | ———————— | ——————— | ——— |<br>| 0      | 000              | 000            | 000    |<br>| 1      | 001              | 100            | 001    |<br>| 2      | 010              | 010            | 011    |<br>| 3      | 011              | 110            | 010    |<br>| 4      | 100              | 001            | 110    |<br>| 5      | 101              | 101            | 111    |<br>| 6      | 110              | 011            | 101    |<br>| 7      | 111              | 111            | 100    |</p><p><strong>格雷码到二进制的转换：</strong></p><script type="math/tex; mode=display">\begin{cases}n_{p-1}=g_{p-1} \\n_{p-2}=g_{p-1}\bigoplus g_{p-2} \\n_{p-3}= g_{p-1}\bigoplus g_{p-2} \bigoplus  g_{p-3}\\......\\n_k=g_{k-1}\bigoplus g_{p-2}\bigoplus g_{p-3}......\bigoplus g_k\\ ......\\n_0=g_{p-1}\bigoplus g_{p-2}\bigoplus g_{p-3}\bigoplus g_0\end{cases}</script><p><strong>拉德梅克函数（Rademacher）</strong></p><p>定义：</p><script type="math/tex; mode=display">R(n,t)=sgn(\sin2^n\pi t) \quad (周期函数)\\sgn(x)=\begin{cases}1& \text{x>0}\\-1& \text{x<0}\end{cases}</script><p><img src="/2021/07/25/Image-Process-Image-Compression/4.png" alt="Gray Code"></p><p><img src="/2021/07/25/Image-Process-Image-Compression/5.png" alt="Gray Code"></p><p><strong>沃尔什函数</strong></p><p>有三种不同的函数定义，但都可由拉德梅克函数构成。</p><p><img src="/2021/07/25/Image-Process-Image-Compression/6.png" alt="Gray Code"></p></li></ul><p>  <strong>下面的P=2，其实应该是2<sup>3</sup>=8，用三位二进制编码表示(000~111)</strong></p><p>  <img src="/2021/07/25/Image-Process-Image-Compression/7.png" alt="Gray Code"></p><p>  <img src="/2021/07/25/Image-Process-Image-Compression/8.png" alt="Gray Code"></p><p>  <img src="/2021/07/25/Image-Process-Image-Compression/9.png" alt="Gray Code"></p><p>  <img src="/2021/07/25/Image-Process-Image-Compression/10.png" alt="Gray Code"></p><p>  <img src="/2021/07/25/Image-Process-Image-Compression/11.png" alt="Gray Code"></p><p>  <img src="/2021/07/25/Image-Process-Image-Compression/12.png" alt="Gray Code"></p><p>  <a href="https://wenku.baidu.com/view/52a0e787f61fb7360b4c65df.html" target="_blank" rel="noopener">上面参考链接</a></p><ul><li><p>离散余弦变换(DCT)</p><p>离散余弦变换(DCT for Discrete Cosine Transform)是与傅里叶变换相关的一种<a href="https://baike.baidu.com/item/变换/7680134" target="_blank" rel="noopener">变换</a>，它类似于<a href="https://baike.baidu.com/item/离散傅里叶变换/6379901" target="_blank" rel="noopener">离散傅里叶变换</a>(DFT for Discrete Fourier Transform),但是只使用实数。离散傅里叶变换需要进行复数运算，尽管有FFT可以提高运算速度，但在图像编码、特别是在实时处理中非常不便。离散傅里叶变换在实际的图像通信系统中很少使用，但它具有理论的指导意义。根据离散傅里叶变换的性质，实偶函数的傅里叶变换只含实的余弦项，因此构造了一种实数域的变换——离散余弦变换(DCT)。</p><p>离散余弦变换，尤其是它的第二种类型，经常被信号处理和<a href="https://baike.baidu.com/item/图像处理" target="_blank" rel="noopener">图像处理</a>使用，用于对信号和图像(包括静止图像和运动图像)进行<a href="https://baike.baidu.com/item/有损数据压缩" target="_blank" rel="noopener">有损数据压缩</a>。这是由于离散余弦变换具有很强的”能量集中”特性:大多数的自然信号(包括声音和图像)的能量都集中在离散余弦变换后的低频部分，而且当信号具有接近<strong><a href="https://baike.baidu.com/item/马尔科夫过程" target="_blank" rel="noopener">马尔科夫过程</a></strong>(Markov processes)的统计特性时，离散余弦变换的去相关性接近于K-L变换(Karhunen-Loève 变换—它具有最优的去相关性)的性能。DCT变换实际上就是限定了输入信号的DFT变换。</p><p><a href="https://zhuanlan.zhihu.com/p/85299446" target="_blank" rel="noopener">DCT详解-知乎</a> 该文中提到了为了DCT的详细介绍，包括了为了构造通用偶函数而将源信号源于原点做对称处理，周期变成2N，在包含原点的情况下，扩展的函数关于-1/2d对称，所以需要将其向右移动1/2个单位。更详细的介绍<a href="https://zhuanlan.zhihu.com/p/114626779" target="_blank" rel="noopener">DCT</a></p></li><li><p>离散傅里叶变换(DFT)</p></li><li><p>Karhunen-Loeve变换(KLT)</p></li></ul><p><strong>子图像尺寸的选择</strong></p><p>为了使相邻子图像之间的相关性降低到可接受的程度，其中n为2的整数次幂 。通常子图像的尺寸为8x8或16x16。</p><p><strong>JPEG</strong>：使用最普遍且广泛的连续色调静止帧压缩标准使JPEG标准。定义了三种不同的编码系统：</p><ul><li>一种有损的基本编码系统，以DCT为基础</li><li>一种扩展的编码系统</li><li>一种面向可逆压缩的无损独立编码系统</li></ul><p><strong>JPEG压缩</strong></p><p><strong>二维离散余弦变换</strong></p><script type="math/tex; mode=display">F(u,v)=\frac{2}{T}C(u)\cdot C(v)\sum^{T-1}_{y=0}\sum^{T-1}_{x=0}I(x,y)\cdot\cos(\frac{(2x+1)u\pi}{2T})\cdot\cos(\frac{(2y+1)v\pi}{2T}),0\le u,v\le T \\C(u)=\begin{cases}\frac{1}{\sqrt{2}} & u=0 \\1 & u \neq0\end{cases}</script><p><strong>二维离散余弦逆变换</strong></p><script type="math/tex; mode=display">f(x,y)=\frac{2}{T}\sum^{K-1}_{u=0}\sum^{K-1}_{v=0}C(u)C(v)F(u,v)\cdot\cos(\frac{(2x+1)u\pi}{2T})\cdot\cos(\frac{(2y+1)v\pi}{2T}),1\le K\le T \\C(u)=\begin{cases}\frac{1}{\sqrt{2}} & u=0 \\1 & u \neq0\end{cases}</script><p>在这里, K是决定图像复原时分辨率高低的参数。 K=T时，DCT的系数全被保留，因此IDCT时分辨率最大。 K=1或K=2时，图像复原时的信息量（DCT系数）减少，分辨率降低。如果适当地设定设定K值，可以减小文件大小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># DCT hyoer-parameter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">T = <span class="number">8</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">K = <span class="number">8</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">channel = <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># DCT weight</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w</span><span class="params">(x, y, u, v)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    cu = <span class="number">1.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    cv = <span class="number">1.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> u == <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        cu /= np.sqrt(<span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> v == <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        cv /= np.sqrt(<span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    theta = np.pi / (<span class="number">2</span> * T)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> (( <span class="number">2</span> * cu * cv / T) * np.cos((<span class="number">2</span>*x+<span class="number">1</span>)*u*theta) * np.cos((<span class="number">2</span>*y+<span class="number">1</span>)*v*theta))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># DCT</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dct</span><span class="params">(img)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    H, W, _ = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    F = np.zeros((H, W, channel), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(channel):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> yi <span class="keyword">in</span> range(<span class="number">0</span>, H, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> xi <span class="keyword">in</span> range(<span class="number">0</span>, W, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">for</span> v <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">for</span> u <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">                        <span class="keyword">for</span> y <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">                            <span class="keyword">for</span> x <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">                                F[v+yi, u+xi, c] += img[y+yi, x+xi, c] * w(x,y,u,v)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> F</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># IDCT</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">idct</span><span class="params">(F)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    H, W, _ = F.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    out = np.zeros((H, W, channel), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(channel):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> yi <span class="keyword">in</span> range(<span class="number">0</span>, H, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> xi <span class="keyword">in</span> range(<span class="number">0</span>, W, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">for</span> x <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">                        <span class="keyword">for</span> v <span class="keyword">in</span> range(K):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">                            <span class="keyword">for</span> u <span class="keyword">in</span> range(K):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">                                out[y+yi, x+xi, c] += F[v+yi, u+xi, c] * w(x,y,u,v)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">    out = np.clip(out, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">    out = np.round(out).astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">height</span> = <span class="number">128</span>, <span class="built_in">width</span> = <span class="number">128</span>, channel = <span class="number">3</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// DCT hyper-parameter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> T = <span class="number">8</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> K = <span class="number">8</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// DCT coefficient</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dct_str</span> &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> coef[<span class="built_in">height</span>][<span class="built_in">width</span>][channel];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Discrete Cosine transformation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="function">dct_str <span class="title">dct</span><span class="params">(cv::Mat img, dct_str dct_s)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> I;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> Cu, Cv;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> ys = <span class="number">0</span>; ys &lt; <span class="built_in">height</span>; ys += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> xs = <span class="number">0</span>; xs &lt; <span class="built_in">width</span>; xs += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; T; v ++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; T; u ++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            F = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (u == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">              Cu = <span class="number">1.</span> / <span class="built_in">sqrt</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">              Cu = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (v == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">              Cv = <span class="number">1.</span> / <span class="built_in">sqrt</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">              Cv = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; T; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; T; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">                I = (<span class="keyword">double</span>)img.at&lt;cv::Vec3b&gt;(ys + y, xs + x)[c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">                F += <span class="number">2.</span> / T * Cu * Cv * I * <span class="built_in">cos</span>((<span class="number">2.</span> * x + <span class="number">1</span>) * u * M_PI / <span class="number">2.</span> / T) * <span class="built_in">cos</span>((<span class="number">2.</span> * y + <span class="number">1</span>) * v * M_PI / <span class="number">2.</span> / T);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">              &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">            dct_s.coef[ys + v][xs + u][c] = F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> dct_s;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Inverse Discrete Cosine transformation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">idct</span><span class="params">(cv::Mat out, dct_str dct_s)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> f;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> Cu, Cv;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> ys = <span class="number">0</span>; ys &lt; <span class="built_in">height</span>; ys += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> xs = <span class="number">0</span>; xs &lt; <span class="built_in">width</span>; xs += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; T; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; T; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">            f = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; K; v++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; K; u++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> (u == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">                  Cu = <span class="number">1.</span> / <span class="built_in">sqrt</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">                  Cu = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> (v == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">                  Cv = <span class="number">1.</span> / <span class="built_in">sqrt</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">else</span> &#123; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">                  Cv = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">                f += <span class="number">2.</span> / T * Cu * Cv * dct_s.coef[ys + v][xs + u][c] * <span class="built_in">cos</span>((<span class="number">2.</span> * x + <span class="number">1</span>) * u * M_PI / <span class="number">2.</span> / T) * <span class="built_in">cos</span>((<span class="number">2.</span> * y + <span class="number">1</span>) * v * M_PI / <span class="number">2.</span> / T);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">              &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">            f = fmin(fmax(f, <span class="number">0</span>), <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">            out.at&lt;cv::Vec3b&gt;(ys + y, xs + x)[c] = (uchar)f;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>峰值信噪比(Peak signal-to-noise ratiio)</strong>: PSNR</p><p>用来衡量两幅图片的差异的。一幅图片A，经过一般操作之后得到图片B，一般是与A同样大小。PSBR的单位是db（分贝）。峰值信噪比越大，表示画质损失越小 。</p><p>峰值信噪比通过下式定义。MAX表示图像点颜色的最大数值。如果取值范围是[0,255]的话，那么MAX的值就为255。MSE表示均方误差（Mean Squared Error），用来表示两个图像各个像素点之间差值平方和的平均数</p><script type="math/tex; mode=display">PSNR=10\cdot\log_{10}\frac{MAX_I^2}{MSE}=20\cdot\log_{10}\frac{MAX_I}{MSE}，峰值信噪比定义\\MSE=\frac{1}{mn}\sum^{m-1}_{i=0}\sum^{m-1}_{j=0}[I(i,j)-K(i,j)]^2</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># DCT hyoer-parameter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">T = <span class="number">8</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">K = <span class="number">4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">channel = <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># DCT weight</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w</span><span class="params">(x, y, u, v)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    cu = <span class="number">1.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    cv = <span class="number">1.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> u == <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        cu /= np.sqrt(<span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> v == <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        cv /= np.sqrt(<span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    theta = np.pi / (<span class="number">2</span> * T)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> (( <span class="number">2</span> * cu * cv / T) * np.cos((<span class="number">2</span>*x+<span class="number">1</span>)*u*theta) * np.cos((<span class="number">2</span>*y+<span class="number">1</span>)*v*theta))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># DCT</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dct</span><span class="params">(img)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    H, W, _ = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    F = np.zeros((H, W, channel), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(channel):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> yi <span class="keyword">in</span> range(<span class="number">0</span>, H, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> xi <span class="keyword">in</span> range(<span class="number">0</span>, W, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">for</span> v <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">for</span> u <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">                        <span class="keyword">for</span> y <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">                            <span class="keyword">for</span> x <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">                                F[v+yi, u+xi, c] += img[y+yi, x+xi, c] * w(x,y,u,v)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> F</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># IDCT</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">idct</span><span class="params">(F)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    H, W, _ = F.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    out = np.zeros((H, W, channel), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(channel):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> yi <span class="keyword">in</span> range(<span class="number">0</span>, H, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> xi <span class="keyword">in</span> range(<span class="number">0</span>, W, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">for</span> x <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">                        <span class="keyword">for</span> v <span class="keyword">in</span> range(K):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">                            <span class="keyword">for</span> u <span class="keyword">in</span> range(K):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">                                out[y+yi, x+xi, c] += F[v+yi, u+xi, c] * w(x,y,u,v)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">    out = np.clip(out, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">    out = np.round(out).astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> out</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># MSE</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MSE</span><span class="params">(img1, img2)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">    H, W, _ = img1.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">    mse = np.sum((img1 - img2) ** <span class="number">2</span>) / (H * W * channel)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> mse</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># PSNR</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PSNR</span><span class="params">(mse, vmax=<span class="number">255</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">10</span> * np.log10(vmax * vmax / mse)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># bitrate</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BITRATE</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">1.</span> * T * K * K / T / T</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">height</span> = <span class="number">128</span>, <span class="built_in">width</span> = <span class="number">128</span>, channel = <span class="number">3</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// DCT hyper-parameter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> T = <span class="number">8</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> K = <span class="number">4</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// DCT coefficient</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dct_str</span> &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> coef[<span class="built_in">height</span>][<span class="built_in">width</span>][channel];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Discrete Cosine transformation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="function">dct_str <span class="title">dct</span><span class="params">(cv::Mat img, dct_str dct_s)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> I;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> Cu, Cv;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> ys = <span class="number">0</span>; ys &lt; <span class="built_in">height</span>; ys += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> xs = <span class="number">0</span>; xs &lt; <span class="built_in">width</span>; xs += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; T; v ++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; T; u ++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            F = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (u == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">              Cu = <span class="number">1.</span> / <span class="built_in">sqrt</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">              Cu = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (v == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">              Cv = <span class="number">1.</span> / <span class="built_in">sqrt</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">              Cv = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; T; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; T; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">                I = (<span class="keyword">double</span>)img.at&lt;cv::Vec3b&gt;(ys + y, xs + x)[c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">                F += <span class="number">2.</span> / T * Cu * Cv * I * <span class="built_in">cos</span>((<span class="number">2.</span> * x + <span class="number">1</span>) * u * M_PI / <span class="number">2.</span> / T) * <span class="built_in">cos</span>((<span class="number">2.</span> * y + <span class="number">1</span>) * v * M_PI / <span class="number">2.</span> / T);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">              &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">            dct_s.coef[ys + v][xs + u][c] = F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> dct_s;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Inverse Discrete Cosine transformation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">idct</span><span class="params">(cv::Mat out, dct_str dct_s)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> f;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> Cu, Cv;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> ys = <span class="number">0</span>; ys &lt; <span class="built_in">height</span>; ys += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> xs = <span class="number">0</span>; xs &lt; <span class="built_in">width</span>; xs += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; T; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; T; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">            f = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; K; v++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; K; u++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> (u == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">                  Cu = <span class="number">1.</span> / <span class="built_in">sqrt</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">                  Cu = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> (v == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">                  Cv = <span class="number">1.</span> / <span class="built_in">sqrt</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">else</span> &#123; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">                  Cv = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">                f += <span class="number">2.</span> / T * Cu * Cv * dct_s.coef[ys + v][xs + u][c] * <span class="built_in">cos</span>((<span class="number">2.</span> * x + <span class="number">1</span>) * u * M_PI / <span class="number">2.</span> / T) * <span class="built_in">cos</span>((<span class="number">2.</span> * y + <span class="number">1</span>) * v * M_PI / <span class="number">2.</span> / T);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">              &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">            f = fmin(fmax(f, <span class="number">0</span>), <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">            out.at&lt;cv::Vec3b&gt;(ys + y, xs + x)[c] = (uchar)f;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compute MSE</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">MSE</span><span class="params">(cv::Mat img1, cv::Mat img2)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> mse = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">98</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">99</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">100</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">101</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">102</span></pre></td><td class="code"><pre><span class="line">        mse += <span class="built_in">pow</span>(((<span class="keyword">double</span>)img1.at&lt;cv::Vec3b&gt;(y, x)[c] - (<span class="keyword">double</span>)img2.at&lt;cv::Vec3b&gt;(y, x)[c]), <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">103</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">104</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">105</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">106</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">107</span></pre></td><td class="code"><pre><span class="line">  mse /= (<span class="built_in">height</span> * <span class="built_in">width</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">108</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> mse;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">109</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">110</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">111</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compute PSNR</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">112</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PSNR</span><span class="params">(<span class="keyword">double</span> mse, <span class="keyword">double</span> v_max)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">113</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">10</span> * <span class="built_in">log10</span>(v_max * v_max / mse);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">114</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">115</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">116</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compute bitrate</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">117</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">BITRATE</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">118</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> T * K * K / T * T;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">119</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>JPEG离散余弦变换+量化</strong></p><p>数字图像处理第三版370中有JPEG的有损基本压缩过程：本身按三个顺序步骤执行</p><ul><li>DCT计算</li><li>量化</li><li>变长编码</li></ul><p>图像首先被细分为8x8的像素块，对这些像素块按从左到右，从上到下的方式进行处理。当遇到每个8x8的块或子图像时，其64个像素通过减去2<sup>k-1</sup>进行灰度级移动，其中2<sup>k</sup>是灰度级的最大数。然后计算该块的二维离散余弦变换，根据下式对其进行量化：</p><script type="math/tex; mode=display">\hat{T}(u,v)=round(\frac{T(u,v)}{Z(u,v)}),T为二维离散余弦变换后的值，Z为标准化阵列</script><p>在量化后，使用Z型模式对其重新排列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#标准化阵列</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Q = np.array(((<span class="number">16</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">16</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">61</span>), (<span class="number">12</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">58</span>, <span class="number">60</span>, <span class="number">55</span>), (<span class="number">14</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">57</span>, <span class="number">69</span>, <span class="number">56</span>), (<span class="number">14</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">29</span>, <span class="number">51</span>, <span class="number">87</span>, <span class="number">80</span>, <span class="number">62</span>), (<span class="number">18</span>, <span class="number">22</span>, <span class="number">37</span>, <span class="number">56</span>, <span class="number">68</span>, <span class="number">109</span>, <span class="number">103</span>, <span class="number">77</span>), (<span class="number">24</span>, <span class="number">35</span>, <span class="number">55</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">104</span>, <span class="number">113</span>, <span class="number">92</span>), (<span class="number">49</span>, <span class="number">64</span>, <span class="number">78</span>, <span class="number">87</span>, <span class="number">103</span>, <span class="number">121</span>, <span class="number">120</span>, <span class="number">101</span>), (<span class="number">72</span>, <span class="number">92</span>, <span class="number">95</span>, <span class="number">98</span>, <span class="number">112</span>, <span class="number">100</span>, <span class="number">103</span>, <span class="number">99</span>)), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># DCT hyoer-parameter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">T = <span class="number">8</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">K = <span class="number">4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">channel = <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># DCT weight</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DCT_w</span><span class="params">(x, y, u, v)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    cu = <span class="number">1.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    cv = <span class="number">1.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> u == <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        cu /= np.sqrt(<span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> v == <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        cv /= np.sqrt(<span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    theta = np.pi / (<span class="number">2</span> * T)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> (( <span class="number">2</span> * cu * cv / T) * np.cos((<span class="number">2</span>*x+<span class="number">1</span>)*u*theta) * np.cos((<span class="number">2</span>*y+<span class="number">1</span>)*v*theta))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># DCT</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dct</span><span class="params">(img)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    H, W, _ = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    F = np.zeros((H, W, channel), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(channel):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> yi <span class="keyword">in</span> range(<span class="number">0</span>, H, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> xi <span class="keyword">in</span> range(<span class="number">0</span>, W, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">for</span> v <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">for</span> u <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">                        <span class="keyword">for</span> y <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">                            <span class="keyword">for</span> x <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">                                F[v+yi, u+xi, c] += img[y+yi, x+xi, c] * DCT_w(x,y,u,v)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> F</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># IDCT</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">idct</span><span class="params">(F)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    H, W, _ = F.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">    out = np.zeros((H, W, channel), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(channel):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> yi <span class="keyword">in</span> range(<span class="number">0</span>, H, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> xi <span class="keyword">in</span> range(<span class="number">0</span>, W, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">for</span> x <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">                        <span class="keyword">for</span> v <span class="keyword">in</span> range(K):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">                            <span class="keyword">for</span> u <span class="keyword">in</span> range(K):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">                                out[y+yi, x+xi, c] += F[v+yi, u+xi, c] * DCT_w(x,y,u,v)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">    out = np.clip(out, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">    out = np.round(out).astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> out</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Quantization</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quantization</span><span class="params">(F)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">    H, W, _ = F.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">    Q = np.array(((<span class="number">16</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">16</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">61</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">                (<span class="number">12</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">58</span>, <span class="number">60</span>, <span class="number">55</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">                (<span class="number">14</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">57</span>, <span class="number">69</span>, <span class="number">56</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">                (<span class="number">14</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">29</span>, <span class="number">51</span>, <span class="number">87</span>, <span class="number">80</span>, <span class="number">62</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">                (<span class="number">18</span>, <span class="number">22</span>, <span class="number">37</span>, <span class="number">56</span>, <span class="number">68</span>, <span class="number">109</span>, <span class="number">103</span>, <span class="number">77</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">                (<span class="number">24</span>, <span class="number">35</span>, <span class="number">55</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">104</span>, <span class="number">113</span>, <span class="number">92</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">                (<span class="number">49</span>, <span class="number">64</span>, <span class="number">78</span>, <span class="number">87</span>, <span class="number">103</span>, <span class="number">121</span>, <span class="number">120</span>, <span class="number">101</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">                (<span class="number">72</span>, <span class="number">92</span>, <span class="number">95</span>, <span class="number">98</span>, <span class="number">112</span>, <span class="number">100</span>, <span class="number">103</span>, <span class="number">99</span>)), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> ys <span class="keyword">in</span> range(<span class="number">0</span>, H, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> xs <span class="keyword">in</span> range(<span class="number">0</span>, W, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(channel):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">                F[ys: ys + T, xs: xs + T, c] =  np.round(F[ys: ys + T, xs: xs + T, c] / Q) * Q</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> F</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># MSE</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MSE</span><span class="params">(img1, img2)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">    H, W, _ = img1.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">    mse = np.sum((img1 - img2) ** <span class="number">2</span>) / (H * W * channel)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> mse</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># PSNR</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PSNR</span><span class="params">(mse, vmax=<span class="number">255</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">10</span> * np.log10(vmax * vmax / mse)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># bitrate</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BITRATE</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">1.</span> * T * K * K / T / T</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">height</span> = <span class="number">128</span>, <span class="built_in">width</span> = <span class="number">128</span>, channel = <span class="number">3</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// DCT hyper-parameter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> T = <span class="number">8</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> K = <span class="number">4</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// DCT coefficient</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dct_str</span> &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> coef[<span class="built_in">height</span>][<span class="built_in">width</span>][channel];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Discrete Cosine transformation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="function">dct_str <span class="title">dct</span><span class="params">(cv::Mat img, dct_str dct_s)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> I;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> Cu, Cv;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> ys = <span class="number">0</span>; ys &lt; <span class="built_in">height</span>; ys += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> xs = <span class="number">0</span>; xs &lt; <span class="built_in">width</span>; xs += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; T; v ++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; T; u ++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            F = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (u == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">              Cu = <span class="number">1.</span> / <span class="built_in">sqrt</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">              Cu = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (v == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">              Cv = <span class="number">1.</span> / <span class="built_in">sqrt</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">            &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">              Cv = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; T; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; T; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">                I = (<span class="keyword">double</span>)img.at&lt;cv::Vec3b&gt;(ys + y, xs + x)[c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">                F += <span class="number">2.</span> / T * Cu * Cv * I * <span class="built_in">cos</span>((<span class="number">2.</span> * x + <span class="number">1</span>) * u * M_PI / <span class="number">2.</span> / T) * <span class="built_in">cos</span>((<span class="number">2.</span> * y + <span class="number">1</span>) * v * M_PI / <span class="number">2.</span> / T);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">              &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">            dct_s.coef[ys + v][xs + u][c] = F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> dct_s;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Inverse Discrete Cosine transformation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">idct</span><span class="params">(cv::Mat out, dct_str dct_s)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> f;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> Cu, Cv;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> ys = <span class="number">0</span>; ys &lt; <span class="built_in">height</span>; ys += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> xs = <span class="number">0</span>; xs &lt; <span class="built_in">width</span>; xs += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; T; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; T; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">            f = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; K; v++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; K; u++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> (u == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">                  Cu = <span class="number">1.</span> / <span class="built_in">sqrt</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">                  Cu = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> (v == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">                  Cv = <span class="number">1.</span> / <span class="built_in">sqrt</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">else</span> &#123; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">                  Cv = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">                f += <span class="number">2.</span> / T * Cu * Cv * dct_s.coef[ys + v][xs + u][c] * <span class="built_in">cos</span>((<span class="number">2.</span> * x + <span class="number">1</span>) * u * M_PI / <span class="number">2.</span> / T) * <span class="built_in">cos</span>((<span class="number">2.</span> * y + <span class="number">1</span>) * v * M_PI / <span class="number">2.</span> / T);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">              &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">            f = fmin(fmax(f, <span class="number">0</span>), <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">            out.at&lt;cv::Vec3b&gt;(ys + y, xs + x)[c] = (uchar)f;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Quantization</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line"><span class="function">dct_str <span class="title">quantization</span><span class="params">(dct_str dct_s)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">98</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> Q[T][T] = &#123;&#123;<span class="number">16</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">16</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">61</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">99</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">12</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">58</span>, <span class="number">60</span>, <span class="number">55</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">100</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">12</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">58</span>, <span class="number">60</span>, <span class="number">55</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">101</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">14</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">29</span>, <span class="number">51</span>, <span class="number">87</span>, <span class="number">80</span>, <span class="number">62</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">102</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">18</span>, <span class="number">22</span>, <span class="number">37</span>, <span class="number">56</span>, <span class="number">68</span>, <span class="number">109</span>, <span class="number">103</span>, <span class="number">77</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">103</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">24</span>, <span class="number">35</span>, <span class="number">55</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">104</span>, <span class="number">113</span>, <span class="number">92</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">104</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">49</span>, <span class="number">64</span>, <span class="number">78</span>, <span class="number">87</span>, <span class="number">103</span>, <span class="number">121</span>, <span class="number">120</span>, <span class="number">101</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">105</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">72</span>, <span class="number">92</span>, <span class="number">95</span>, <span class="number">98</span>, <span class="number">112</span>, <span class="number">100</span>, <span class="number">103</span>, <span class="number">99</span>&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">106</span></pre></td><td class="code"><pre><span class="line">                  &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">107</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">108</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> ys = <span class="number">0</span>; ys &lt; <span class="built_in">height</span>; ys += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">109</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> xs = <span class="number">0</span>; xs &lt; <span class="built_in">width</span>; xs += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">110</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">111</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; T; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">112</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; T; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">113</span></pre></td><td class="code"><pre><span class="line">            dct_s.coef[ys + y][xs + x][c] = round(dct_s.coef[ys + y][xs + x][c] / Q[y][x]) * Q[y][x];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">114</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">115</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">116</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">117</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">118</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">119</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">120</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> dct_s;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">121</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">122</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">123</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">124</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compute MSE</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">125</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">MSE</span><span class="params">(cv::Mat img1, cv::Mat img2)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">126</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> mse = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">127</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">128</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">129</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">130</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">131</span></pre></td><td class="code"><pre><span class="line">        mse += <span class="built_in">pow</span>(((<span class="keyword">double</span>)img1.at&lt;cv::Vec3b&gt;(y, x)[c] - (<span class="keyword">double</span>)img2.at&lt;cv::Vec3b&gt;(y, x)[c]), <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">132</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">133</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">134</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">135</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">136</span></pre></td><td class="code"><pre><span class="line">  mse /= (<span class="built_in">height</span> * <span class="built_in">width</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">137</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> mse;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">138</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">139</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">140</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compute PSNR</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">141</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PSNR</span><span class="params">(<span class="keyword">double</span> mse, <span class="keyword">double</span> v_max)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">142</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">10</span> * <span class="built_in">log10</span>(v_max * v_max / mse);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">143</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">144</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">145</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compute bitrate</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">146</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">BITRATE</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">147</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> T * K * K / T * T;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">148</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>YCbCr色彩空间</strong></p><p>YCbCr色彩空间是用于将图像由表示亮度的 Y、表示蓝色色度Cb以及表示红色色度Cr表示的方法。这用于 JPEG 转换。它在电视系统中比较常用，比如早期的黑白电视机使用彩色电视信号线，就可以单独使用亮度值；这种功能RGB颜色空间就做不到，因为我们不能仅仅使用RGB中某个通道作为亮度信号来使用。</p><p>使用下式从 RGB 转换到 YCbCr：</p><script type="math/tex; mode=display">\begin{align}Y=&0.299\cdot R+0.587\cdot G+0.114\cdot B\\Cb=&-0.1687\cdot R-0.3313\cdot G+0.5\cdot B+128\\Cr=&0.5\cdot R-0.4187\cdot G-0.0813\cdot B+128\end{align}</script><p>使用下式从 YCbCr转换到 RGB：</p><script type="math/tex; mode=display">\begin{align}R=&Y+(Cr-128)\cdot 1.402\\G=&Y-(Cb-128)\cdot 0.3441 - (Cr-128)\cdot 0.7139\\B=&Y+(Cb-128)\cdot1.7718\end{align}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">channel = <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># BGR -&gt; Y Cb Cr</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BGR2YCbCr</span><span class="params">(img)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  H, W, _ = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  ycbcr = np.zeros([H, W, <span class="number">3</span>], dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  ycbcr[..., <span class="number">0</span>] = <span class="number">0.2990</span> * img[..., <span class="number">2</span>] + <span class="number">0.5870</span> * img[..., <span class="number">1</span>] + <span class="number">0.1140</span> * img[..., <span class="number">0</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  ycbcr[..., <span class="number">1</span>] = <span class="number">-0.1687</span> * img[..., <span class="number">2</span>] - <span class="number">0.3313</span> * img[..., <span class="number">1</span>] + <span class="number">0.5</span> * img[..., <span class="number">0</span>] + <span class="number">128.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  ycbcr[..., <span class="number">2</span>] = <span class="number">0.5</span> * img[..., <span class="number">2</span>] - <span class="number">0.4187</span> * img[..., <span class="number">1</span>] - <span class="number">0.0813</span> * img[..., <span class="number">0</span>] + <span class="number">128.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> ycbcr</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Y Cb Cr -&gt; BGR</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">YCbCr2BGR</span><span class="params">(ycbcr)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  H, W, _ = ycbcr.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  out = np.zeros([H, W, channel], dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  out[..., <span class="number">2</span>] = ycbcr[..., <span class="number">0</span>] + (ycbcr[..., <span class="number">2</span>] - <span class="number">128.</span>) * <span class="number">1.4020</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  out[..., <span class="number">1</span>] = ycbcr[..., <span class="number">0</span>] - (ycbcr[..., <span class="number">1</span>] - <span class="number">128.</span>) * <span class="number">0.3441</span> - (ycbcr[..., <span class="number">2</span>] - <span class="number">128.</span>) * <span class="number">0.7139</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  out[..., <span class="number">0</span>] = ycbcr[..., <span class="number">0</span>] + (ycbcr[..., <span class="number">1</span>] - <span class="number">128.</span>) * <span class="number">1.7718</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  out = np.clip(out, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  out = out.astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// BGR -&gt; Y Cb Cr</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">BGR2YCbCr</span><span class="params">(cv::Mat img, cv::Mat out)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//cv::Mat out = cv::Mat::zeros(height, width, CV_32F);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">height</span>; j ++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">width</span>; i ++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// Y</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">0</span>] = (<span class="keyword">int</span>)((<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">0</span>] * <span class="number">0.114</span> + \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">1</span>] * <span class="number">0.5870</span> + \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">2</span>] * <span class="number">0.299</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// Cb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">1</span>] = (<span class="keyword">int</span>)((<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">0</span>] * <span class="number">0.5</span> + \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">1</span>] * (<span class="number">-0.3323</span>) + \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">2</span>] * (<span class="number">-0.1687</span>) + <span class="number">128</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// Cr</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">2</span>] = (<span class="keyword">int</span>)((<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">0</span>] * (<span class="number">-0.0813</span>) + \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">1</span>] * (<span class="number">-0.4187</span>) + \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">2</span>] * <span class="number">0.5</span> + <span class="number">128</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Y Cb Cr -&gt; BGR</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">YCbCr2BGR</span><span class="params">(cv::Mat ycbcr, cv::Mat out)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = out.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = out.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">height</span>; j ++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">width</span>; i ++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// R</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">2</span>] = (uchar)(ycbcr.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">0</span>] + (ycbcr.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">2</span>] - <span class="number">128</span>) * <span class="number">1.4102</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// G</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">1</span>] = (uchar)(ycbcr.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">0</span>] - (ycbcr.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">1</span>] - <span class="number">128</span>) * <span class="number">0.3441</span> - (ycbcr.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">2</span>] - <span class="number">128</span>) * <span class="number">0.7139</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// B</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">0</span>] = (uchar)(ycbcr.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">0</span>] + (ycbcr.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">1</span>] - <span class="number">128</span>) * <span class="number">1.7718</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">process</span><span class="params">(cv::Mat ycbcr)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = ycbcr.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = ycbcr.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">      ycbcr.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">0</span>] *= <span class="number">0.7</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> ycbcr;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>YCbCr+离散余弦变换+量化</strong></p><ol><li>将图像从RGB色彩空间变换到YCbCr色彩空间；</li><li>对YCbCr做DCT；</li><li>DCT之后做量化；</li><li>量化之后应用IDCT； </li><li>IDCT之后从YCbCr色彩空间变换到RGB色彩空间。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># DCT hyoer-parameter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">T = <span class="number">8</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">K = <span class="number">8</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">channel = <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># BGR -&gt; Y Cb Cr</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BGR2YCbCr</span><span class="params">(img)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  H, W, _ = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  ycbcr = np.zeros([H, W, <span class="number">3</span>], dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  ycbcr[..., <span class="number">0</span>] = <span class="number">0.2990</span> * img[..., <span class="number">2</span>] + <span class="number">0.5870</span> * img[..., <span class="number">1</span>] + <span class="number">0.1140</span> * img[..., <span class="number">0</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  ycbcr[..., <span class="number">1</span>] = <span class="number">-0.1687</span> * img[..., <span class="number">2</span>] - <span class="number">0.3313</span> * img[..., <span class="number">1</span>] + <span class="number">0.5</span> * img[..., <span class="number">0</span>] + <span class="number">128.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  ycbcr[..., <span class="number">2</span>] = <span class="number">0.5</span> * img[..., <span class="number">2</span>] - <span class="number">0.4187</span> * img[..., <span class="number">1</span>] - <span class="number">0.0813</span> * img[..., <span class="number">0</span>] + <span class="number">128.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> ycbcr</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Y Cb Cr -&gt; BGR</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">YCbCr2BGR</span><span class="params">(ycbcr)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  H, W, _ = ycbcr.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  out = np.zeros([H, W, channel], dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">  out[..., <span class="number">2</span>] = ycbcr[..., <span class="number">0</span>] + (ycbcr[..., <span class="number">2</span>] - <span class="number">128.</span>) * <span class="number">1.4020</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  out[..., <span class="number">1</span>] = ycbcr[..., <span class="number">0</span>] - (ycbcr[..., <span class="number">1</span>] - <span class="number">128.</span>) * <span class="number">0.3441</span> - (ycbcr[..., <span class="number">2</span>] - <span class="number">128.</span>) * <span class="number">0.7139</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  out[..., <span class="number">0</span>] = ycbcr[..., <span class="number">0</span>] + (ycbcr[..., <span class="number">1</span>] - <span class="number">128.</span>) * <span class="number">1.7718</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  out = np.clip(out, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  out = out.astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># DCT weight</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DCT_w</span><span class="params">(x, y, u, v)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    cu = <span class="number">1.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    cv = <span class="number">1.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> u == <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">        cu /= np.sqrt(<span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> v == <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">        cv /= np.sqrt(<span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    theta = np.pi / (<span class="number">2</span> * T)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> (( <span class="number">2</span> * cu * cv / T) * np.cos((<span class="number">2</span>*x+<span class="number">1</span>)*u*theta) * np.cos((<span class="number">2</span>*y+<span class="number">1</span>)*v*theta))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># DCT</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dct</span><span class="params">(img)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">    H, W, _ = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">    F = np.zeros((H, W, channel), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(channel):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> yi <span class="keyword">in</span> range(<span class="number">0</span>, H, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> xi <span class="keyword">in</span> range(<span class="number">0</span>, W, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">for</span> v <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">for</span> u <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">                        <span class="keyword">for</span> y <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">                            <span class="keyword">for</span> x <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">                                F[v+yi, u+xi, c] += img[y+yi, x+xi, c] * DCT_w(x,y,u,v)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> F</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># IDCT</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">idct</span><span class="params">(F)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">    H, W, _ = F.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">    out = np.zeros((H, W, channel), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(channel):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> yi <span class="keyword">in</span> range(<span class="number">0</span>, H, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> xi <span class="keyword">in</span> range(<span class="number">0</span>, W, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">for</span> x <span class="keyword">in</span> range(T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">                        <span class="keyword">for</span> v <span class="keyword">in</span> range(K):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">                            <span class="keyword">for</span> u <span class="keyword">in</span> range(K):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">                                out[y+yi, x+xi, c] += F[v+yi, u+xi, c] * DCT_w(x,y,u,v)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">    out = np.clip(out, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">    out = np.round(out).astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> out</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Quantization</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quantization</span><span class="params">(F)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">    H, W, _ = F.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line">    Q = np.array(((<span class="number">16</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">16</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">61</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line">                (<span class="number">12</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">58</span>, <span class="number">60</span>, <span class="number">55</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line">                (<span class="number">14</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">57</span>, <span class="number">69</span>, <span class="number">56</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line">                (<span class="number">14</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">29</span>, <span class="number">51</span>, <span class="number">87</span>, <span class="number">80</span>, <span class="number">62</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line">                (<span class="number">18</span>, <span class="number">22</span>, <span class="number">37</span>, <span class="number">56</span>, <span class="number">68</span>, <span class="number">109</span>, <span class="number">103</span>, <span class="number">77</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line">                (<span class="number">24</span>, <span class="number">35</span>, <span class="number">55</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">104</span>, <span class="number">113</span>, <span class="number">92</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line">                (<span class="number">49</span>, <span class="number">64</span>, <span class="number">78</span>, <span class="number">87</span>, <span class="number">103</span>, <span class="number">121</span>, <span class="number">120</span>, <span class="number">101</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">98</span></pre></td><td class="code"><pre><span class="line">                (<span class="number">72</span>, <span class="number">92</span>, <span class="number">95</span>, <span class="number">98</span>, <span class="number">112</span>, <span class="number">100</span>, <span class="number">103</span>, <span class="number">99</span>)), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">99</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">100</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> ys <span class="keyword">in</span> range(<span class="number">0</span>, H, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">101</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> xs <span class="keyword">in</span> range(<span class="number">0</span>, W, T):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">102</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(channel):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">103</span></pre></td><td class="code"><pre><span class="line">                F[ys: ys + T, xs: xs + T, c] =  np.round(F[ys: ys + T, xs: xs + T, c] / Q) * Q</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">104</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">105</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> F</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">106</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">107</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">108</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># JPEG without Hufman coding</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">109</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">JPEG</span><span class="params">(img)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">110</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># BGR -&gt; Y Cb Cr</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">111</span></pre></td><td class="code"><pre><span class="line">    ycbcr = BGR2YCbCr(img)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">112</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">113</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># DCT</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">114</span></pre></td><td class="code"><pre><span class="line">    F = dct(ycbcr)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">115</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">116</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># quantization</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">117</span></pre></td><td class="code"><pre><span class="line">    F = quantization(F)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">118</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">119</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># IDCT</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">120</span></pre></td><td class="code"><pre><span class="line">    ycbcr = idct(F)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">121</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">122</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># Y Cb Cr -&gt; BGR</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">123</span></pre></td><td class="code"><pre><span class="line">    out = YCbCr2BGR(ycbcr)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">124</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">125</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> out</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">126</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">127</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">128</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># MSE</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">129</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MSE</span><span class="params">(img1, img2)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">130</span></pre></td><td class="code"><pre><span class="line">    H, W, _ = img1.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">131</span></pre></td><td class="code"><pre><span class="line">    mse = np.sum((img1 - img2) ** <span class="number">2</span>) / (H * W * channel)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">132</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> mse</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">133</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">134</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># PSNR</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">135</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PSNR</span><span class="params">(mse, vmax=<span class="number">255</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">136</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">10</span> * np.log10(vmax * vmax / mse)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">137</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">138</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># bitrate</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">139</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BITRATE</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">140</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">1.</span> * T * K * K / T / T</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">141</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">142</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">143</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">144</span></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">"imori.jpg"</span>).astype(np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">145</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">146</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># JPEG</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">147</span></pre></td><td class="code"><pre><span class="line">out = JPEG(img)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">148</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">149</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># MSE</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">150</span></pre></td><td class="code"><pre><span class="line">mse = MSE(img, out)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">151</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">152</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># PSNR</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">153</span></pre></td><td class="code"><pre><span class="line">psnr = PSNR(mse)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">154</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">155</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># bitrate</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">156</span></pre></td><td class="code"><pre><span class="line">bitrate = BITRATE()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">157</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">158</span></pre></td><td class="code"><pre><span class="line">print(<span class="string">"MSE:"</span>, mse)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">159</span></pre></td><td class="code"><pre><span class="line">print(<span class="string">"PSNR:"</span>, psnr)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">160</span></pre></td><td class="code"><pre><span class="line">print(<span class="string">"bitrate:"</span>, bitrate)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">161</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">162</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Save result</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">163</span></pre></td><td class="code"><pre><span class="line">cv2.imshow(<span class="string">"result"</span>, out)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">164</span></pre></td><td class="code"><pre><span class="line">cv2.waitKey(<span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">165</span></pre></td><td class="code"><pre><span class="line">cv2.imwrite(<span class="string">"out.jpg"</span>, out)</span></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#Q1 和 Q2 根据 JPEG 规范由以下等式定义：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Q1 = np.array(((<span class="number">16</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">16</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">61</span>), (<span class="number">12</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">58</span>, <span class="number">60</span>, <span class="number">55</span>), (<span class="number">14</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">57</span>, <span class="number">69</span>, <span class="number">56</span>), (<span class="number">14</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">29</span>, <span class="number">51</span>, <span class="number">87</span>, <span class="number">80</span>, <span class="number">62</span>), (<span class="number">18</span>, <span class="number">22</span>, <span class="number">37</span>, <span class="number">56</span>, <span class="number">68</span>, <span class="number">109</span>, <span class="number">103</span>, <span class="number">77</span>), (<span class="number">24</span>, <span class="number">35</span>, <span class="number">55</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">104</span>, <span class="number">113</span>, <span class="number">92</span>), (<span class="number">49</span>, <span class="number">64</span>, <span class="number">78</span>, <span class="number">87</span>, <span class="number">103</span>, <span class="number">121</span>, <span class="number">120</span>, <span class="number">101</span>), (<span class="number">72</span>, <span class="number">92</span>, <span class="number">95</span>, <span class="number">98</span>, <span class="number">112</span>, <span class="number">100</span>, <span class="number">103</span>, <span class="number">99</span>)), dtype=np.float32) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Q2 = np.array(((<span class="number">17</span>, <span class="number">18</span>, <span class="number">24</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>), (<span class="number">18</span>, <span class="number">21</span>, <span class="number">26</span>, <span class="number">66</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>), (<span class="number">24</span>, <span class="number">26</span>, <span class="number">56</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>), (<span class="number">47</span>, <span class="number">66</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>), (<span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>), (<span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>), (<span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>), (<span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>)), dtype=np.float32)</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">height</span> = <span class="number">128</span>, <span class="built_in">width</span> = <span class="number">128</span>, channel = <span class="number">3</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// DCT hyper-parameter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> T = <span class="number">8</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> K = <span class="number">8</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// DCT coefficient</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dct_str</span> &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> coef[<span class="built_in">height</span>][<span class="built_in">width</span>][channel];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Discrete Cosine transformation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="function">dct_str <span class="title">dct</span><span class="params">(cv::Mat img, dct_str dct_s)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> I;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> Cu, Cv;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> ys = <span class="number">0</span>; ys &lt; <span class="built_in">height</span>; ys += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> xs = <span class="number">0</span>; xs &lt; <span class="built_in">width</span>; xs += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; T; v ++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; T; u ++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            F = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (u == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">              Cu = <span class="number">1.</span> / <span class="built_in">sqrt</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">              Cu = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (v == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">              Cv = <span class="number">1.</span> / <span class="built_in">sqrt</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">            &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">              Cv = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; T; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; T; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">                I = (<span class="keyword">double</span>)img.at&lt;cv::Vec3b&gt;(ys + y, xs + x)[c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">                F += <span class="number">2.</span> / T * Cu * Cv * I * <span class="built_in">cos</span>((<span class="number">2.</span> * x + <span class="number">1</span>) * u * M_PI / <span class="number">2.</span> / T) * <span class="built_in">cos</span>((<span class="number">2.</span> * y + <span class="number">1</span>) * v * M_PI / <span class="number">2.</span> / T);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">              &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">            dct_s.coef[ys + v][xs + u][c] = F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> dct_s;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Inverse Discrete Cosine transformation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">idct</span><span class="params">(cv::Mat out, dct_str dct_s)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> f;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> Cu, Cv;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> ys = <span class="number">0</span>; ys &lt; <span class="built_in">height</span>; ys += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> xs = <span class="number">0</span>; xs &lt; <span class="built_in">width</span>; xs += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; T; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; T; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">            f = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; K; v++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; K; u++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> (u == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">                  Cu = <span class="number">1.</span> / <span class="built_in">sqrt</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">                  Cu = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> (v == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">                  Cv = <span class="number">1.</span> / <span class="built_in">sqrt</span>(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">else</span> &#123; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">                  Cv = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">                f += <span class="number">2.</span> / T * Cu * Cv * dct_s.coef[ys + v][xs + u][c] * <span class="built_in">cos</span>((<span class="number">2.</span> * x + <span class="number">1</span>) * u * M_PI / <span class="number">2.</span> / T) * <span class="built_in">cos</span>((<span class="number">2.</span> * y + <span class="number">1</span>) * v * M_PI / <span class="number">2.</span> / T);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line">              &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line">            f = fmin(fmax(f, <span class="number">0</span>), <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line">            out.at&lt;cv::Vec3b&gt;(ys + y, xs + x)[c] = (uchar)f;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">98</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">99</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">100</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">101</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">102</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">103</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">104</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Quantization</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">105</span></pre></td><td class="code"><pre><span class="line"><span class="function">dct_str <span class="title">quantization</span><span class="params">(dct_str dct_s)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">106</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Q table for Y</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">107</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> Q1[T][T] = &#123;&#123;<span class="number">16</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">16</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">61</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">108</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">12</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">58</span>, <span class="number">60</span>, <span class="number">55</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">109</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">12</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">58</span>, <span class="number">60</span>, <span class="number">55</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">110</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">14</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">29</span>, <span class="number">51</span>, <span class="number">87</span>, <span class="number">80</span>, <span class="number">62</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">111</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">18</span>, <span class="number">22</span>, <span class="number">37</span>, <span class="number">56</span>, <span class="number">68</span>, <span class="number">109</span>, <span class="number">103</span>, <span class="number">77</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">112</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">24</span>, <span class="number">35</span>, <span class="number">55</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">104</span>, <span class="number">113</span>, <span class="number">92</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">113</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">49</span>, <span class="number">64</span>, <span class="number">78</span>, <span class="number">87</span>, <span class="number">103</span>, <span class="number">121</span>, <span class="number">120</span>, <span class="number">101</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">114</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">72</span>, <span class="number">92</span>, <span class="number">95</span>, <span class="number">98</span>, <span class="number">112</span>, <span class="number">100</span>, <span class="number">103</span>, <span class="number">99</span>&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">115</span></pre></td><td class="code"><pre><span class="line">                  &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">116</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">117</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Q table for Cb Cr</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">118</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> Q2[T][T] = &#123;&#123;<span class="number">17</span>, <span class="number">18</span>, <span class="number">24</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">119</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">18</span>, <span class="number">21</span>, <span class="number">26</span>, <span class="number">66</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">120</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">24</span>, <span class="number">26</span>, <span class="number">56</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">121</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">47</span>, <span class="number">66</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">122</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">123</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">124</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">125</span></pre></td><td class="code"><pre><span class="line">                    &#123;<span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">126</span></pre></td><td class="code"><pre><span class="line">                  &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">127</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">128</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> ys = <span class="number">0</span>; ys &lt; <span class="built_in">height</span>; ys += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">129</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> xs = <span class="number">0</span>; xs &lt; <span class="built_in">width</span>; xs += T)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">130</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; T; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">131</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; T; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">132</span></pre></td><td class="code"><pre><span class="line">          dct_s.coef[ys + y][xs + x][<span class="number">0</span>] = round(dct_s.coef[ys + y][xs + x][<span class="number">0</span>] / Q1[y][x]) * Q1[y][x];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">133</span></pre></td><td class="code"><pre><span class="line">          dct_s.coef[ys + y][xs + x][<span class="number">1</span>] = round(dct_s.coef[ys + y][xs + x][<span class="number">1</span>] / Q2[y][x]) * Q2[y][x];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">134</span></pre></td><td class="code"><pre><span class="line">          dct_s.coef[ys + y][xs + x][<span class="number">2</span>] = round(dct_s.coef[ys + y][xs + x][<span class="number">2</span>] / Q2[y][x]) * Q2[y][x];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">135</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">136</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">137</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">138</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">139</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">140</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> dct_s;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">141</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">142</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">143</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">144</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// BGR -&gt; Y Cb Cr</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">145</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">BGR2YCbCr</span><span class="params">(cv::Mat img, cv::Mat out)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">146</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">147</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">148</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">149</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//cv::Mat out = cv::Mat::zeros(height, width, CV_32F);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">150</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">151</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">height</span>; j ++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">152</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">width</span>; i ++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">153</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// Y</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">154</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">0</span>] = (<span class="keyword">int</span>)((<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">0</span>] * <span class="number">0.114</span> + \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">155</span></pre></td><td class="code"><pre><span class="line">  (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">1</span>] * <span class="number">0.5870</span> + \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">156</span></pre></td><td class="code"><pre><span class="line">  (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">2</span>] * <span class="number">0.299</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">157</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">158</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// Cb</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">159</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">1</span>] = (<span class="keyword">int</span>)((<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">0</span>] * <span class="number">0.5</span> + \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">160</span></pre></td><td class="code"><pre><span class="line">  (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">1</span>] * (<span class="number">-0.3323</span>) + \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">161</span></pre></td><td class="code"><pre><span class="line">  (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">2</span>] * (<span class="number">-0.1687</span>) + <span class="number">128</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">162</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">163</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// Cr</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">164</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">2</span>] = (<span class="keyword">int</span>)((<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">0</span>] * (<span class="number">-0.0813</span>) + \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">165</span></pre></td><td class="code"><pre><span class="line">  (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">1</span>] * (<span class="number">-0.4187</span>) + \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">166</span></pre></td><td class="code"><pre><span class="line">  (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">2</span>] * <span class="number">0.5</span> + <span class="number">128</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">167</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">168</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">169</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">170</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">171</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">172</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Y Cb Cr -&gt; BGR</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">173</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">YCbCr2BGR</span><span class="params">(cv::Mat ycbcr, cv::Mat out)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">174</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">175</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = out.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">176</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = out.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">177</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">178</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">179</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">height</span>; j ++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">180</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">width</span>; i ++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">181</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// R</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">182</span></pre></td><td class="code"><pre><span class="line">      val = ycbcr.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">0</span>] + (ycbcr.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">2</span>] - <span class="number">128</span>) * <span class="number">1.4102</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">183</span></pre></td><td class="code"><pre><span class="line">      val = fmin(<span class="number">255</span>, fmax(<span class="number">0</span>, val));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">184</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">2</span>] = (uchar)val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">185</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">186</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// G</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">187</span></pre></td><td class="code"><pre><span class="line">      val = ycbcr.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">0</span>] - (ycbcr.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">1</span>] - <span class="number">128</span>) * <span class="number">0.3441</span> - (ycbcr.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">2</span>] - <span class="number">128</span>) * <span class="number">0.7139</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">188</span></pre></td><td class="code"><pre><span class="line">      val = fmin(<span class="number">255</span>, fmax(<span class="number">0</span>, val));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">189</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">1</span>] = (uchar)val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">190</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">191</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// B</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">192</span></pre></td><td class="code"><pre><span class="line">      val = ycbcr.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">0</span>] + (ycbcr.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">1</span>] - <span class="number">128</span>) * <span class="number">1.7718</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">193</span></pre></td><td class="code"><pre><span class="line">      val = fmin(<span class="number">255</span>, fmax(<span class="number">0</span>, val));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">194</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(j, i)[<span class="number">0</span>] = (uchar)val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">195</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">196</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">197</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">198</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">199</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">200</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">201</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compute MSE</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">202</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">MSE</span><span class="params">(cv::Mat img1, cv::Mat img2)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">203</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> mse = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">204</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">205</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">206</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">207</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">208</span></pre></td><td class="code"><pre><span class="line">        mse += <span class="built_in">pow</span>(((<span class="keyword">double</span>)img1.at&lt;cv::Vec3b&gt;(y, x)[c] - (<span class="keyword">double</span>)img2.at&lt;cv::Vec3b&gt;(y, x)[c]), <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">209</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">210</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">211</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">212</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">213</span></pre></td><td class="code"><pre><span class="line">  mse /= (<span class="built_in">height</span> * <span class="built_in">width</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">214</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> mse;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">215</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">216</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">217</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compute PSNR</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">218</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PSNR</span><span class="params">(<span class="keyword">double</span> mse, <span class="keyword">double</span> v_max)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">219</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">10</span> * <span class="built_in">log10</span>(v_max * v_max / mse);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">220</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">221</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">222</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compute bitrate</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">223</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">BITRATE</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">224</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> T * K * K / T * T;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">225</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">226</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">227</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Main</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">228</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">229</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">230</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> mse;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">231</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> psnr;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">232</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> bitrate;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">233</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">234</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// read original image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">235</span></pre></td><td class="code"><pre><span class="line">  cv::Mat img = cv::imread(<span class="string">"imori.jpg"</span>, cv::IMREAD_COLOR);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">236</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">237</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// DCT coefficient</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">238</span></pre></td><td class="code"><pre><span class="line">  dct_str dct_s;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">239</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">240</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// output image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">241</span></pre></td><td class="code"><pre><span class="line">  cv::Mat ycbcr = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_32FC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">242</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">243</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">244</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// BGR -&gt; Y Cb Cr</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">245</span></pre></td><td class="code"><pre><span class="line">  ycbcr = BGR2YCbCr(img, ycbcr);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">246</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">247</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// DCT</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">248</span></pre></td><td class="code"><pre><span class="line">  dct_s = dct(ycbcr, dct_s);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">249</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">250</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Quantization</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">251</span></pre></td><td class="code"><pre><span class="line">  dct_s = quantization(dct_s);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">252</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">253</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// IDCT</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">254</span></pre></td><td class="code"><pre><span class="line">  ycbcr = idct(ycbcr, dct_s);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">255</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">256</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Y Cb Cr -&gt; BGR</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">257</span></pre></td><td class="code"><pre><span class="line">  out = YCbCr2BGR(ycbcr, out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">258</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">259</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// MSE, PSNR</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">260</span></pre></td><td class="code"><pre><span class="line">  mse = MSE(img, out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">261</span></pre></td><td class="code"><pre><span class="line">  psnr = PSNR(mse, <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">262</span></pre></td><td class="code"><pre><span class="line">  bitrate = BITRATE();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">263</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">264</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"MSE: "</span> &lt;&lt; mse &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">265</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"PSNR: "</span> &lt;&lt; psnr &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">266</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"bitrate: "</span> &lt;&lt; bitrate &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">267</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">268</span></pre></td><td class="code"><pre><span class="line">  cv::imwrite(<span class="string">"out.jpg"</span>, out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">269</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//cv::imshow("answer", out);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">270</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//cv::waitKey(0);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">271</span></pre></td><td class="code"><pre><span class="line">  cv::destroyAllWindows();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">272</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">273</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">274</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图像处理学习&quot;&gt;&lt;a href=&quot;#图像处理学习&quot; class=&quot;headerlink&quot; title=&quot;图像处理学习&quot;&gt;&lt;/a&gt;图像处理学习&lt;/h2&gt;&lt;h3 id=&quot;图像压缩笔记&quot;&gt;&lt;a href=&quot;#图像压缩笔记&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/categories/Image-Processing/"/>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/tags/Image-Processing/"/>
    
  </entry>
  
  <entry>
    <title>TensorRT</title>
    <link href="http://yoursite.com/2021/07/25/TensorRT/"/>
    <id>http://yoursite.com/2021/07/25/TensorRT/</id>
    <published>2021-07-25T13:52:46.000Z</published>
    <updated>2021-07-25T15:04:03.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TensorRT"><a href="#TensorRT" class="headerlink" title="TensorRT"></a>TensorRT</h2><p><strong>下面是根据何成杰 NVIDIA高级软件架构师的分享出的PPT进行了一些笔记摘录</strong></p><h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4><p>用于高性能深度学习推理的 SDK ，在生产环境中优化和部署神经网络，功能如下：</p><ul><li>使用编译器和运行时，最大化延迟关键应用的吞吐量 </li><li>使用 INT8 和 FP16 优化部署，响应迅速且内存高效的应用程序 </li><li>优化每个网络，包括 CNN、RNN 和 Transformer </li><li>通过 ONNX 支持、原生 TensorRT 集成加速每个框架</li><li>在具有容器化推理服务器的节点上运行多个模型 </li></ul><p><img src="/2021/07/25/TensorRT/tensorRT1.png" alt="TensorRT"></p><h4 id="二、TensorRT优化"><a href="#二、TensorRT优化" class="headerlink" title="二、TensorRT优化"></a>二、TensorRT优化</h4><ul><li><p>层和张量融合</p><ul><li>垂直融合</li><li>水平融合</li><li>层消除</li><li>层合并</li></ul><p>左边为未优化的网络，右边为使用TensorRT优化的网络</p><p><img src="/2021/07/25/TensorRT/tensorRT2.png" alt="TensorRT"></p></li></ul><div class="table-container"><table><thead><tr><th>Network</th><th>Layers before</th><th>Layers after</th></tr></thead><tbody><tr><td>VGG19</td><td>43</td><td>27</td></tr><tr><td>Inception V3</td><td>309</td><td>113</td></tr><tr><td>ResNet-152</td><td>670</td><td>159</td></tr></tbody></table></div><p><strong>Supported Layer Fusions</strong></p><ol><li>Convolution and ReLUActivation</li><li>FullyConnectedand ReLUActivation</li><li>Scale and Activation</li><li>Convolution And ElementWiseSum</li><li>Shuffle and Reduce</li><li>Shuffle and Shuffle</li><li>Scale(add 0, multiply by 1)</li><li>Convolution and Scale</li><li>Reduce</li></ol><ul><li><p>重量和激活精密校准 </p></li><li><p>内核自动调优 </p><p><strong>Multiple factors:</strong></p><ul><li>Target platform</li><li>Batch size</li><li>Input dimensions</li><li>Filter dimensions</li><li>Tensor layout</li></ul><p><strong>Choice:</strong></p><ul><li>Implementation of specific algorithm</li><li>Kernels</li><li>Tensor Layouts</li></ul></li><li><p>动态张量内存 </p></li></ul><p>优化是完全自动的 ，使用单个函数调用执行 </p><h4 id="三、FP16，INT8-Precision-calibration"><a href="#三、FP16，INT8-Precision-calibration" class="headerlink" title="三、FP16，INT8 Precision calibration"></a>三、FP16，INT8 Precision calibration</h4><p><strong>利用降低精度功能：</strong> </p><ul><li>FP16 (Tesla V100): 125 TflopsFP16 vs 15.7 TflopsFP32</li><li>INT8 (T4, 70W): 130 INT8 TOPS vs 8.1 TflopsFP32</li></ul><div class="table-container"><table><thead><tr><th>精度</th><th>动态范围</th><th></th></tr></thead><tbody><tr><td><strong>FP32</strong></td><td>-3.4x10<SUP>38</SUP> ~ +3.4x10<SUP>38</SUP></td><td>训练的精度</td></tr><tr><td><strong>FP16</strong></td><td>-65504 ~ +65504</td><td>无需校正</td></tr><tr><td><strong>INT8</strong></td><td>-128 ~ +128</td><td>需要校正</td></tr></tbody></table></div><p><strong>INT8推理的精度校准：</strong> </p><ul><li>在校准数据集上最大限度地减少 FP32 和 INT8 推理之间的信息丢失 </li><li>完全自动化</li></ul><div class="table-container"><table><thead><tr><th></th><th><strong>FP32 Top 1</strong></th><th><strong>INT8 Top 1</strong></th><th><strong>Difference</strong></th></tr></thead><tbody><tr><td><strong>Googlenet</strong></td><td><strong>68.87%</strong></td><td><strong>68.49%</strong></td><td><strong>0.38%</strong></td></tr><tr><td><strong>VGG</strong></td><td><strong>68.56%</strong></td><td><strong>68.45%</strong></td><td><strong>0.11%</strong></td></tr><tr><td><strong>Resnet-50</strong></td><td><strong>73.11%</strong></td><td><strong>72.54%</strong></td><td><strong>0.57%</strong></td></tr><tr><td><strong>Resnet-152</strong></td><td><strong>75.18%</strong></td><td><strong>74.56%</strong></td><td><strong>0.61%</strong></td></tr></tbody></table></div><h4 id="四、TensorRT工作流"><a href="#四、TensorRT工作流" class="headerlink" title="四、TensorRT工作流"></a>四、TensorRT工作流</h4><p>1、工作流1 使用优化的训练模型直接进行推理 </p><p><img src="/2021/07/25/TensorRT/tensorRT3.png" alt="TensorRT"></p><p>2、工作流2 </p><ol><li><p>优化训练模型</p><p><img src="/2021/07/25/TensorRT/tensorRT4.png" alt="TensorRT"></p></li><li><p>使用运行时部署优化计划 </p><p><img src="/2021/07/25/TensorRT/tensorRT5.png" alt="TensorRT"></p></li></ol><p>44 / 5000</p><p><strong>使用网络定义 API 来定义网络</strong> </p><h4 id="五、序列化"><a href="#五、序列化" class="headerlink" title="五、序列化"></a>五、序列化</h4><p>序列化和反序列化是可选的，用于存储和以后使用。 序列化引擎不能跨平台或 TensorRT 版本移植。 </p><h4 id="六、量化处理"><a href="#六、量化处理" class="headerlink" title="六、量化处理"></a>六、量化处理</h4><p>量化意识训练 ：提高了 INT8 推理的准确性 </p><ul><li>与训练后量化 (PTQ) 相比，准确度更高 </li><li>以最小的精度损失量化最先进的模型 </li><li>基于 PyTorch中的OSS量化工具包，支持 QAT、PTQ 和导出到 ONNX </li><li>TensorRT 在不影响性能的情况下优化 Q/DQ 图进行推理 </li></ul><h4 id="七、稀疏支持"><a href="#七、稀疏支持" class="headerlink" title="七、稀疏支持"></a>七、稀疏支持</h4><p>通过稀疏性以低延迟最大化吞吐量 </p><ul><li>具有 2:4 细粒度结构稀疏性的新优化可提高性能，将权重减少一半 </li><li>ASP (Automatic SParsity) 提供易于使用的工作流程来诱导稀疏性，同时保持原始密集网络的准确性 </li><li>TensorRT 使用稀疏内核加速推理 </li></ul><h4 id="八、TRANSFORMER-OPTIMIZATIONS"><a href="#八、TRANSFORMER-OPTIMIZATIONS" class="headerlink" title="八、TRANSFORMER OPTIMIZATIONS"></a>八、TRANSFORMER OPTIMIZATIONS</h4><p>基于 Transformer 的网络的高性能融合内核生成 ，在生产环境中部署高度优化的基于 Transformers 的应用程序 。</p><ul><li>编译器融合多个操作，减少内核数量和执行时间 </li><li>消除网络中的转置操作，全局地加速 GEMMs</li><li>TensorRT 为 Transformer 构建块生成高度优化的内核，例如 MultiheadAttention </li></ul><h4 id="九、全新的全连接层优化"><a href="#九、全新的全连接层优化" class="headerlink" title="九、全新的全连接层优化"></a>九、全新的全连接层优化</h4><p>加速基于 MLP 的网络 </p><ul><li>用 1x1 卷积替换全连接层，提高计算速度 </li><li>FullConnectedLayers 中的新优化可提高 MLP、BERT 等网络的性能 </li><li>在 INT8 模式下使用 Tensor Core 提高性能。 </li></ul><h4 id="十、循环神经网络的优化"><a href="#十、循环神经网络的优化" class="headerlink" title="十、循环神经网络的优化"></a>十、循环神经网络的优化</h4><p>在生产环境中部署高度优化的对话式 AI 应用程序 </p><ul><li>用于定义在 RNN 中找到的循环的新 API </li><li>编译器融合 pointwise ops，生成优化的内核，并跨时间步融合 ops </li><li>在 300 毫秒内运行 ASR、NLU 和 TTS，这是实时应用程序的要求，10 倍性能与 CPU </li><li>支持的模型：BERT、MT-DNN、RoBERTa、Tacotron2、WaveRNN、DeepASR、GNMT、LSTM Peephole、LSTM Autoencoder </li></ul><p><strong>可变输入尺寸支持</strong>，<strong>可变批量支持</strong> ，<strong>使用 MLP 进行神经协同过滤</strong> </p><p>最大化接收可变大小输入的应用程序的推理性能 </p><p><img src="/2021/07/25/TensorRT/tensorRT6.png" alt="TensorRT"></p><h2 id="Triton"><a href="#Triton" class="headerlink" title="Triton"></a>Triton</h2><p>一种模式的推理服务，带有一个/多个 GPU 卡（通常在一个容器中作为服务）。可以与K8S集群—多卡多节点推理服务（容器化服务编排工具集）作比较。</p><h4 id="一、TRITON-基本功能"><a href="#一、TRITON-基本功能" class="headerlink" title="一、TRITON 基本功能"></a>一、TRITON 基本功能</h4><ul><li>支持多种模型框架（TensorFlow、PyTorch、TensorRT、ONNX RT 和自定义后端）</li><li>CPU, GPU, Multi-GPU support</li><li>并发模型执行（CPU 级优化）</li><li>服务器 HTTP/REST、gRPC APIS </li><li>通过延迟和健康指标与编排系统和自动缩放器集成</li><li>模型管理、加载/卸载、模型更新 </li><li>开源，在 GitHub 和 NGCas docker 容器上每月发布一次 </li></ul><p><strong>架构图</strong></p><p><img src="/2021/07/25/TensorRT/tensorRT7.png" alt="TensorRT"></p><h4 id="二、TRITON-的主要设计理念"><a href="#二、TRITON-的主要设计理念" class="headerlink" title="二、TRITON 的主要设计理念"></a>二、TRITON 的主要设计理念</h4><p><strong>想象一下基于推理生命周期：</strong> </p><ul><li>支持多种模型框架 -&gt; 这受制于框架，应由框架解耦 -&gt; Backends </li><li>常用功能 <ul><li>常用后台管理 </li><li>模型管理——加载/卸载、模型更新、查询模型状态等</li><li>并发模型执行——实例管理  </li><li>请求队列分发和调度 </li><li>推理生命周期管理 <ul><li>推理请求的管理</li><li>推理响应的管理</li></ul></li></ul></li><li>GRPC相关<ul><li>GRPC服务器</li></ul></li></ul><p><strong>想象一下基于客户场景的抽象（注意：主要是模型类型相关）：</strong> </p><p>大致可以分为三类 ：</p><ul><li>简单的独立模型 </li><li>与模型管道集成 </li><li>有状态模型 </li></ul><ol><li>Stateless<ul><li>CV</li><li>默认调度器，动态批处理 </li></ul></li><li>Stateful（预测结果取决于之前的序列）<ul><li>NLP</li><li>序列批次 </li></ul></li><li>Ensemble<ul><li>模型管道 </li><li>每个模型都可以有自己的调度程序 </li></ul></li></ol><h4 id="三、模型组合"><a href="#三、模型组合" class="headerlink" title="三、模型组合"></a>三、模型组合</h4><ul><li>一个或多个模型的流水线以及这些模型之间输入和输出张量的连接 </li><li>用于数据预处理→推理→数据后处理等多模型的模型拼接或数据流转</li><li>收集每个步骤中的输出张量，根据规范将它们作为其他步骤的输入张量提供 </li><li>Ensemble 模型会继承所涉及模型的特性，因此请求头中的元数据必须符合 ensemble 内的模型 </li></ul><p><img src="/2021/07/25/TensorRT/tensorRT8.png" alt="TensorRT"></p><h4 id="四、框架后端和客户后端"><a href="#四、框架后端和客户后端" class="headerlink" title="四、框架后端和客户后端"></a>四、框架后端和客户后端</h4><ul><li>大多数基于框架的后端在Triton Github是独立的存储库</li><li>通常，客户只需要实现一个客户后端 <ul><li>模型可以具有非 ML 模型部分（BERT：标记器、特征提取器）。 Triton 后端 API 允许将这些类型的扩展集成到 Triton 中。 </li><li>API 还允许用户在 Triton 中集成他们自己的执行引擎实现作为自定义后端。 </li><li>好处： <ul><li>使用向后兼容的 C API 将代码实现为共享库 </li><li>利用完整的 Triton 功能集（与现有框架相同）</li></ul></li></ul></li></ul><h4 id="五、Triton辅助功能"><a href="#五、Triton辅助功能" class="headerlink" title="五、Triton辅助功能"></a>五、Triton辅助功能</h4><h5 id="1、模型分析"><a href="#1、模型分析" class="headerlink" title="1、模型分析"></a>1、模型分析</h5><ul><li>模型分析器是一套工具，可根据特定的性能要求，提供有关如何在 Triton 中最佳优化单个或多个模型的分析和指导 </li><li>在选择正确的模型配置时，它可以帮助用户在吞吐量、延迟和 GPU 内存占用方面做出权衡决定 </li><li>提供两种基准测试功能： <ul><li>性能分析 - 测量不同客户端负载下的吞吐量 (inf/s) 和延迟 </li><li>内存分析 - 测量模型在不同配置下的 GPU 内存占用 </li></ul></li></ul><h5 id="2、内存分析"><a href="#2、内存分析" class="headerlink" title="2、内存分析"></a>2、内存分析</h5><ul><li>针对各种批量大小和请求并发值测量模型的 GPU 内存占用。 然后可以使用结果来确定最佳模型配置，在满足内存利用率要求的同时最大限度地提高性能 </li><li><strong>优化硬件使用：</strong>确定每个 GPU 可以加载的最大模型数量，减少所需的硬件，或权衡吞吐量 </li><li><strong>最大化模型吞吐量：</strong>确保放置在每个 GPU 上的模型总和不会超过可用内存和 GPU 利用率的特定阈值。 这最大限度地提高了您的硬件的吞吐量 </li><li><strong>提高可靠性：</strong>通过了解您在 GPU 上加载的模型不会超出其能力来消除内存不足错误 </li><li><strong>更好的硬件规模：</strong>使用内存要求确定运行模型所需的确切硬件数量 </li></ul><p><a href="https://docs.nvidia.com/deeplearning/sdk/inference-release-notes/index.htmlhttps://docs.nvidia.com/deeplearning/sdk/triton-inference-serverguide/docs/quickstart.html" target="_blank" rel="noopener">Triton官网学习资料</a></p><p><a href="https://github.com/NVIDIA/triton-inference-server" target="_blank" rel="noopener">开源Gitlab存储库</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TensorRT&quot;&gt;&lt;a href=&quot;#TensorRT&quot; class=&quot;headerlink&quot; title=&quot;TensorRT&quot;&gt;&lt;/a&gt;TensorRT&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;下面是根据何成杰 NVIDIA高级软件架构师的分享出的PPT进行了一些笔记摘
      
    
    </summary>
    
    
      <category term="Model Compression and Acceleration" scheme="http://yoursite.com/categories/Model-Compression-and-Acceleration/"/>
    
    
      <category term="Model Compression and Acceleration" scheme="http://yoursite.com/tags/Model-Compression-and-Acceleration/"/>
    
  </entry>
  
  <entry>
    <title>Open-Neural-Network-Exchange</title>
    <link href="http://yoursite.com/2021/07/25/Open-Neural-Network-Exchange/"/>
    <id>http://yoursite.com/2021/07/25/Open-Neural-Network-Exchange/</id>
    <published>2021-07-25T13:49:13.000Z</published>
    <updated>2021-07-25T13:52:23.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开放神经网络交换-Open-Neural-Network-Exchange"><a href="#开放神经网络交换-Open-Neural-Network-Exchange" class="headerlink" title="开放神经网络交换(Open Neural Network Exchange)"></a>开放神经网络交换(Open Neural Network Exchange)</h2><h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4><p>ONNX是微软和Facebook提出的用来表示深度学习模型的<strong>开放</strong>格式，其定义了一组和环境、平台均无关的标准格式，来增强各种AI模型的可交互性。</p><p>所以针对目前流行的一些训练框架训练的模型，如TensorFlow、Pytorch、MxNet或Paddle等。训练完毕后都可以将这些框架存储的模型统一转换为ONNX这种统一的格式进行存储，从而扩展了模型对于不同平台或环境的移植性。ONNX文件不仅仅存储了神经网络模型的权重，同时也存储了模型的结构信息以及网络中每一层的输入输出和一些其它的辅助信息。ONNX中包括如下三个关键部分：</p><ul><li>可扩展的计算图模型：定义了通用的计算图中间表示法（Intermediate Representation）。  </li><li>内置运算符集内置操作符集：<code>ai.onnx</code>和<code>ai.onnx.ml</code>，<code>ai.onnx</code>是默认的操作符集，主要针对神经网络模型，<code>ai.onnx.ml</code>主要适用于传统非神经网络机器学习模型。 </li><li>标准数据类型的定义：包括张量（tensors）、序列（sequences）和映射（maps）。</li></ul><p>ONNX规范有两个官方变体，主要区别在与支持的类型和默认的操作符集。ONNX神经网络变体只使用张量作为输入和输出；而作为支持传统机器学习模型的<code>ONNX-ML</code>，还可以识别序列和映射，<code>ONNX-ML</code>为支持非神经网络算法扩展了ONNX操作符集。</p><h4 id="二、ProtoBuf简述"><a href="#二、ProtoBuf简述" class="headerlink" title="二、ProtoBuf简述"></a>二、ProtoBuf简述</h4><p>ONNX作为一个文件格式，自然需要一定的规则去读取想要的信息或者是写入需要保存的信息。ONNX使用的是<strong>Protobuf</strong>这个序列化数据结构去存储神经网络的权重信息。</p><p>Protobuf是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。目前提供了 C++、Java、Python 三种语言的 API（摘自官方介绍）。</p><p>Protobuf协议是一个以<code>*.proto</code>后缀文件为基础的，这个文件描述了用户自定义的数据结构。</p><h4 id="三、ONNX格式分析"><a href="#三、ONNX格式分析" class="headerlink" title="三、ONNX格式分析"></a>三、ONNX格式分析</h4><p>ONNX中最核心的部分就是<code>onnx.proto</code>这个文件了，它定义了ONNX这个数据协议的规则和一些其它信息。地址在<code>https://github.com/onnx/onnx/blob/master/onnx/onnx.proto</code>。其中的一些关键字段为：</p><ul><li><code>ModelProto</code></li><li><code>GraphProto</code></li><li><code>NodeProto</code></li><li><code>ValueInfoProto</code></li><li><code>TensorProto</code></li><li><code>AttributeProto</code></li></ul><p>当我们加载了一个ONNX之后，我们获得的就是一个<code>ModelProto</code>，它包含了一些版本信息，生产者信息和一个<code>GraphProto</code>。在<code>GraphProto</code>里面又包含了四个<code>repeated</code>数组，它们分别是<code>node</code>(<code>NodeProto</code>类型)，<code>input</code>(<code>ValueInfoProto</code>类型)，<code>output</code>(<code>ValueInfoProto</code>类型)和<code>initializer</code>(<code>TensorProto</code>类型)，其中<code>node</code>中存放了模型中所有的计算节点，<code>input</code>存放了模型的输入节点，<code>output</code>存放了模型中所有的输出节点，<code>initializer</code>存放了模型的所有权重参数。</p><p>我们知道要完整的表达一个神经网络，不仅仅要知道网络的各个节点信息，还要知道它们的拓扑关系。这个拓扑关系在ONNX中是如何表示的呢？ONNX的每个计算节点都会有<code>input</code>和<code>output</code>两个数组，这两个数组是string类型，通过<code>input</code>和<code>output</code>的指向关系，我们就可以利用上述信息快速构建出一个深度学习模型的拓扑图。这里要注意一下，<code>GraphProto</code>中的<code>input</code>数组不仅包含我们一般理解中的图片输入的那个节点，还包含了模型中所有的权重。例如，<code>Conv</code>层里面的<code>W</code>权重实体是保存在<code>initializer</code>中的，那么相应的会有一个同名的输入在<code>input</code>中，其背后的逻辑应该是把权重也看成模型的输入，并通过<code>initializer</code>中的权重实体来对这个输入做初始化，即一个赋值的过程。</p><p>最后，每个计算节点中还包含了一个<code>AttributeProto</code>数组，用来描述该节点的属性，比如<code>Conv</code>节点或者说卷积层的属性包含<code>group</code>，<code>pad</code>，<code>strides</code>等等，每一个计算节点的属性，输入输出信息都详细记录在<code>https://github.com/onnx/onnx/blob/master/docs/Operators.md</code>。</p><h4 id="四、PyTorch转换模型到ONNX"><a href="#四、PyTorch转换模型到ONNX" class="headerlink" title="四、PyTorch转换模型到ONNX"></a>四、PyTorch转换模型到ONNX</h4><p>1、到处预训练的AlexNet到一个ONNX文件，名为alexnet.onnx</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">dummy_input = torch.randn(<span class="number">10</span>,<span class="number">3</span>,<span class="number">224</span>,<span class="number">224</span>,device=<span class="string">"cuda"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">model = torchvision.models.alexnet(pretrained=<span class="literal">True</span>).cuda()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">input_names = [ <span class="string">"actual_input_1"</span> ] + [ <span class="string">"learned_%d"</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>) ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">output_names = [ <span class="string">"output1"</span> ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">torch.onnx.export(model, dummy_input, <span class="string">"alexnet.onnx"</span>, verbose=<span class="literal">True</span>, input_names=input_names, output_names=output_names)</span></pre></td></tr></table></figure><p>在导出的alexnet.onnx文件中包含了一个二进制的protocol buffer，其中包含了网络结构和模型的参数。设置<code>verbose=True</code>是为了让模型的人眼可读性更好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#验证ONNX库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装onnx</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge onnx</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> onnx</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#加载onnx模型</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">model = onnx.load(<span class="string">"alexnet.onnx"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#检查模型</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">onnx.checker.check_model(model)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#打印人类可读的图的表示</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">print(onnx.helper.printable_graph(model.graph))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用ONNX runtimes运行onnx导出模型</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> onnxruntime <span class="keyword">as</span> ort</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">ort_session = ort.InferenceSession(<span class="string">"alexnet.onnx"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">outputs = ort_session.run(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="literal">None</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#123;<span class="string">"actual_input_1"</span>: np.random.randn(<span class="number">10</span>,<span class="number">3</span>,<span class="number">224</span>,<span class="number">224</span>).astype(np.float32)&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">print(outputs[<span class="number">0</span>])</span></pre></td></tr></table></figure><p>在内部，torch.onnx.export() 需要 torch.jit.ScriptModule 而不是 torch.nn.Module。 如果传入的模型还不是 ScriptModule，export() 将使用跟踪对其进行转换。 </p><h5 id="1、跟踪-Tracing"><a href="#1、跟踪-Tracing" class="headerlink" title="1、跟踪(Tracing)"></a>1、跟踪(Tracing)</h5><p>如果用一个还不是<code>ScriptModule</code> 的模块调用<code>torch.onnx.export()</code>，它首先执行与<code>torch.jit.trace()</code> 等效的操作。它使用给定的 args 执行一次模型并记录在执行期间发生的所有操作。 这意味着如果您的模型是动态的，例如根据输入数据改变行为，导出的模型将不会捕获这种动态行为(因为PyTorch是动态执行的，下一步的数据需要根据上一步的结果获得，与TensorFlow执行的静态图不同，所以转换PyTorch模型到ONNX的DAG(<strong>有向无环图</strong>)的时候存在较大的差异性)。 同样，跟踪可能仅对<strong>特定输入大小有效</strong>。 我们建议检查导出的模型并确保操作符看起来合理。 <strong>跟踪将展开循环和 if 语句</strong>，导出与跟踪运行完全相同的静态图。 <strong>如果要使用动态控制流导出模型，则需要使用脚本。</strong> 上面展开循环和if语句后，如果输入的数据不同而选择不同的分支，则需要单独处理这种情况。</p><h5 id="2、脚本-scripting"><a href="#2、脚本-scripting" class="headerlink" title="2、脚本(scripting)"></a>2、脚本(scripting)</h5><p>通过脚本编译模型可以保留动态控制流，并且对不同大小的输入有效。 要使用脚本： </p><ul><li>Use <a href="https://pytorch.org/docs/master/generated/torch.jit.script.html#torch.jit.script" target="_blank" rel="noopener"><code>torch.jit.script()</code></a> to produce a <code>ScriptModule</code>.</li><li>Call <code>torch.onnx.export()</code> with the <code>ScriptModule</code> as the model, and set the <code>example_outputs</code> arg. This is required so that the types and shapes of the outputs can be captured without executing the model.<a href="https://pytorch.org/docs/master/onnx.html#id5" target="_blank" rel="noopener">参考</a></li></ul><h5 id="3、一些需要避免的坑"><a href="#3、一些需要避免的坑" class="headerlink" title="3、一些需要避免的坑"></a>3、一些需要避免的坑</h5><ol><li><p>避免使用 NumPy 和内置 Python 类型 </p><p>PyTorch 模型可以使用 NumPy 或 Python 类型和函数编写，但在跟踪过程中，任何 NumPy 或 Python 类型（而不是 torch.Tensor）的变量都会转换为常量，如果这些值应根据输入而改变，那么该操作将产生错误的结果。 </p></li><li><p>避免 Tensor.data </p><p>使用 Tensor.data 字段会产生不正确的轨迹，因此会产生不正确的 ONNX 图。 改用 torch.Tensor.detach() 。</p></li></ol><h5 id="4、一些限制"><a href="#4、一些限制" class="headerlink" title="4、一些限制"></a>4、一些限制</h5><ul><li>仅 torch.Tensors和数字类型（例如 float、int）可以简单地转换为 torch.Tensors 。以及这些类型的元组和列表支持作为模型输入或输出。 在跟踪模式下接受 dict 和 str 输入和输出，但是： <ul><li>任何依赖于 dict 或 str 输入值的计算都将替换为在一次跟踪执行期间看到的常量值。 </li><li>任何作为 dict 的输出都将被其值的扁平序列无声地替换（键将被删除）。 例如。 {“foo”: 1, “bar”: 2} 变成 (1, 2)。 </li></ul></li><li>由于 ONNX 对嵌套序列的支持有限，脚本模式不支持某些涉及元组和列表的操作。 特别是不支持将元组附加到列表中。 在跟踪模式下，嵌套序列将在跟踪过程中自动展平。 </li></ul><h5 id="5、运算符实现的差异"><a href="#5、运算符实现的差异" class="headerlink" title="5、运算符实现的差异"></a>5、运算符实现的差异</h5><p>由于操作符实现的差异，在不同的运行时运行导出的模型可能会产生不同的结果，或者与 PyTorch 不同。 通常，这些差异在数值上很小，因此只有当您的应用程序对这些小差异敏感时，才应该考虑这一点。 </p><h5 id="6、不受支持的张量索引模式"><a href="#6、不受支持的张量索引模式" class="headerlink" title="6、不受支持的张量索引模式"></a>6、不受支持的张量索引模式</h5><h5 id="7、添加对运算符的支持"><a href="#7、添加对运算符的支持" class="headerlink" title="7、添加对运算符的支持"></a>7、添加对运算符的支持</h5><p>导出包含不受支持的运算符的模型时，您将看到如下错误消息： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">RuntimeError: ONNX export failed: Couldn&#39;t export operator foo</span></pre></td></tr></table></figure><p>发生这种情况时，您需要更改模型以不使用该运算符，或者添加对运算符的支持。 具体实现根据需要查阅相关内容。</p><p>ATen 是 PyTorch 的内置张量库。</p><h4 id="五、ONNX-Runtime"><a href="#五、ONNX-Runtime" class="headerlink" title="五、ONNX Runtime"></a>五、ONNX Runtime</h4><p>ONNX Runtime 是一个以性能为中心的 ONNX 模型引擎，它可以跨多个平台和硬件（Windows、Linux 和 Mac 以及 CPU 和 GPU）高效地进行推理。 事实证明，ONNX 运行时可显着提高多个模型的性能。</p><p>1、安装 ONNX 和 ONNX Runtime。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">pip install onnx</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">pip install onnxruntime</span></pre></td></tr></table></figure><p>获得 ONNX 和 ONNX Runtime 的二进制版本。 请注意，ONNX 运行时与 Python 版本 3.5<strong>到</strong>3.7 兼容。 </p><p>下面给出官网列出的一个超分辨率模型导出的事例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Some standard imports</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.utils.model_zoo <span class="keyword">as</span> model_zoo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.onnx</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Super Resolution model definition in PyTorch</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn.init <span class="keyword">as</span> init</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperResolutionNet</span><span class="params">(nn.Module)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, upscale_factor, inplace=False)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        super(SuperResolutionNet, self).__init__()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        self.relu = nn.ReLU(inplace=inplace)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">64</span>, (<span class="number">5</span>, <span class="number">5</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        self.conv2 = nn.Conv2d(<span class="number">64</span>, <span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        self.conv3 = nn.Conv2d(<span class="number">64</span>, <span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        self.conv4 = nn.Conv2d(<span class="number">32</span>, upscale_factor ** <span class="number">2</span>, (<span class="number">3</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        self.pixel_shuffle = nn.PixelShuffle(upscale_factor)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        self._initialize_weights()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        x = self.relu(self.conv1(x))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        x = self.relu(self.conv2(x))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        x = self.relu(self.conv3(x))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        x = self.pixel_shuffle(self.conv4(x))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> x</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_initialize_weights</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        init.orthogonal_(self.conv1.weight, init.calculate_gain(<span class="string">'relu'</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        init.orthogonal_(self.conv2.weight, init.calculate_gain(<span class="string">'relu'</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        init.orthogonal_(self.conv3.weight, init.calculate_gain(<span class="string">'relu'</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        init.orthogonal_(self.conv4.weight)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create the super-resolution model by using the above model definition.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">torch_model = SuperResolutionNet(upscale_factor=<span class="number">3</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#在导出模型之前调用 torch_model.eval() 或 torch_model.train(False) 很重要，以将模型转换为推理模式。 这是必需的，因为 dropout 或 batchnorm 等运算符在推理和训练模式下的行为不同。 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load pretrained model weights</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">model_url = <span class="string">'https://s3.amazonaws.com/pytorch/test_data/export/superres_epoch100-44c6958e.pth'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">1</span>    <span class="comment"># just a random number</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Initialize model with the pretrained weights</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">map_location = <span class="keyword">lambda</span> storage, loc: storage</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">    map_location = <span class="literal">None</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">torch_model.load_state_dict(model_zoo.load_url(model_url, map_location=map_location))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># set the model to inference mode</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">torch_model.eval()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#在 PyTorch 中导出模型是通过跟踪或脚本编写的。 上例将使用通过跟踪导出模型作为示例。 要导出模型，需要调用torch.onnx.export()函数。该操作将执行模型，记录用于计算输出的运算符的跟踪。 因为 export 运行模型，所以需要提供一个输入张量 x。 只要它是正确的类型和大小，其中的值可以是随机的。 请注意，除非指定为动态轴(dynamic_axes )，否则所有输入维度的导出 ONNX 图中的输入大小将是固定的。 在此示例中，我们使用 batch_size=1的输入导出模型，但随后在 torch.onnx.export() 的 dynamic_axes 参数中将第一个维度指定为动态。 因此，导出的模型将接受大小为 [batch_size, 1, 224, 224] 的输入，其中 batch_size 可以是可变的。 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Input to the model</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">x = torch.randn(batch_size, <span class="number">1</span>, <span class="number">224</span>, <span class="number">224</span>, requires_grad=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">torch_out = torch_model(x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Export the model</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">torch.onnx.export(torch_model,               <span class="comment"># model being run</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">                  x,                         <span class="comment"># model input (or a tuple for multiple inputs)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">                  <span class="string">"super_resolution.onnx"</span>,   <span class="comment"># where to save the model (can be a file or file-like object)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">                  export_params=<span class="literal">True</span>,        <span class="comment"># store the trained parameter weights inside the model file</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">                  opset_version=<span class="number">10</span>,          <span class="comment"># the ONNX version to export the model to</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">                  do_constant_folding=<span class="literal">True</span>,  <span class="comment"># whether to execute constant folding for optimization</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">                  input_names = [<span class="string">'input'</span>],   <span class="comment"># the model's input names</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">                  output_names = [<span class="string">'output'</span>], <span class="comment"># the model's output names</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">                  dynamic_axes=&#123;<span class="string">'input'</span> : &#123;<span class="number">0</span> : <span class="string">'batch_size'</span>&#125;,    <span class="comment"># variable length axes</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">                                <span class="string">'output'</span> : &#123;<span class="number">0</span> : <span class="string">'batch_size'</span>&#125;&#125;)</span></pre></td></tr></table></figure><p>但是在使用 ONNX Runtime 验证模型的输出之前，我们将使用 ONNX 的 API 检查 ONNX 模型。 首先，onnx.load(“super_resolution.onnx”) 将加载保存的模型并输出 onnx.ModelProto 结构。 然后，onnx.checker.check_model(onnx_model) 将验证模型的结构并确认模型具有有效的模式。 ONNX 图的有效性通过检查模型的版本、图的结构以及节点及其输入和输出来验证。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> onnx</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">onnx_model = onnx.load(<span class="string">"super_resolution.onnx"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">onnx.checker.check_model(onnx_model)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#为了使用 ONNX Runtime运行模型，我们需要使用所选的配置参数（这里我们使用默认配置）为模型创建推理会话。 创建会话后，我们使用 run() api评估模型。 此调用的输出是一个列表，其中包含 ONNX Runtime 计算出的模型的输出。 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> onnxruntime</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">ort_session = onnxruntime.InferenceSession(<span class="string">"super_resolution.onnx"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_numpy</span><span class="params">(tensor)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> tensor.detach().cpu().numpy() <span class="keyword">if</span> tensor.requires_grad <span class="keyword">else</span> tensor.cpu().numpy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># compute ONNX Runtime output prediction</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">ort_inputs = &#123;ort_session.get_inputs()[<span class="number">0</span>].name: to_numpy(x)&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">ort_outs = ort_session.run(<span class="literal">None</span>, ort_inputs)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># compare ONNX Runtime and PyTorch results</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">np.testing.assert_allclose(to_numpy(torch_out), ort_outs[<span class="number">0</span>], rtol=<span class="number">1e-03</span>, atol=<span class="number">1e-05</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Exported model has been tested with ONNXRuntime, and the result looks good!"</span>)</span></pre></td></tr></table></figure><p><strong>使用 ONNX Runtime 在图像上运行模型</strong> </p><p>首先，让我们加载图像，使用标准 PIL python 库对其进行预处理。 请注意，此预处理是处理用于训练/测试神经网络的数据的标准做法。 首先，调整图像大小以适应模型输入的大小 (224x224)。 然后将图像分成 Y、Cb 和 Cr 分量。 这些分量代表灰度图像 (Y)，以及蓝色差 (Cb) 和红色差 (Cr) 色度分量。 Y 分量对人眼更敏感，对将要变换的这个分量感兴趣。 提取 Y 分量后，将其转换为张量，这将是模型的输入。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">img = Image.open(<span class="string">"./_static/img/cat.jpg"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">resize = transforms.Resize([<span class="number">224</span>, <span class="number">224</span>])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">img = resize(img)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">img_ycbcr = img.convert(<span class="string">'YCbCr'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">img_y, img_cb, img_cr = img_ycbcr.split()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">to_tensor = transforms.ToTensor()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">img_y = to_tensor(img_y)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">img_y.unsqueeze_(<span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行超分辨率模型在Onnx runtime</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">ort_inputs = &#123;ort_session.get_inputs()[<span class="number">0</span>].name: to_numpy(img_y)&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">ort_outs = ort_session.run(<span class="literal">None</span>, ort_inputs)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">img_out_y = ort_outs[<span class="number">0</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#此时，上面是模型输出的一个张量。 现在，将处理模型的输出以从输出张量构造回最终输出图像，并保存图像。 此处的超分辨率模型的 PyTorch 实现采用了后处理步骤。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">img_out_y = Image.fromarray(np.uint8((img_out_y[<span class="number">0</span>] * <span class="number">255.0</span>).clip(<span class="number">0</span>, <span class="number">255</span>)[<span class="number">0</span>]), mode=<span class="string">'L'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get the output image follow post-processing step from PyTorch implementation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">final_img = Image.merge(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"YCbCr"</span>, [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        img_out_y,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        img_cb.resize(img_out_y.size, Image.BICUBIC),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        img_cr.resize(img_out_y.size, Image.BICUBIC),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    ]).convert(<span class="string">"RGB"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Save the image, we will compare this with the output image from mobile device</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">final_img.save(<span class="string">"./_static/img/cat_superres_with_ort.jpg"</span>)</span></pre></td></tr></table></figure><h4 id="六、ONNX结构分析"><a href="#六、ONNX结构分析" class="headerlink" title="六、ONNX结构分析"></a>六、ONNX结构分析</h4><p>ONNX将每一个网络的每一层或者说是每一个算子当作节点Node，再由这些Node去构建一个Graph，相当于是一个网络。最后将Graph和这个onnx模型的其他信息结合在一起，生成一个model，也就是最终的.onnx的模型。根据原始模型生成架构的不同，转换的过程可能也不相同，如：PyTorch和TensorFlow。</p><p>onnx网络查看工具<a href="https://netron.app/" target="_blank" rel="noopener">netron</a></p><h4 id="七、ONNX导出函数分析"><a href="#七、ONNX导出函数分析" class="headerlink" title="七、ONNX导出函数分析"></a>七、ONNX导出函数分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">torch.onnx.export(model, <span class="comment">#(torch.nn.Module, torch.jit.ScriptModule or torch.jit.ScriptFunction)将被导出的模型</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  args,  <span class="comment">#tuple or torch.Tensor 元组应包含模型输入，以便 model(*args) 是模型的有效调用。 任何非张量参数都将被硬编码到导出的模型中； 任何张量参数都将成为导出模型的输入，按照它们在元组中出现的顺序。 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  f,     <span class="comment">#类文件对象或或包含文件名的字符串。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      export_params=<span class="literal">True</span>, <span class="comment">#如果为 True，将导出所有参数。 如果要导出未经训练的模型，请将其设置为 False。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  verbose=<span class="literal">False</span>,    <span class="comment">#如果为 True，则打印正在导出到标准输出的模型的描述。 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  training=&lt;TrainingMode.EVAL: <span class="number">0</span>&gt;, <span class="comment">#TrainingMode.EVAL: 以推理模式导出模型；TrainingMode.PRESERVE: 如果 model.training 为 False，则在推理模式下导出模型，如果 model.training 为 True，则在训练模式下导出模型；TrainingMode.TRAINING:在训练模式下导出模型。 禁用可能干扰训练的优化。 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  input_names=<span class="literal">None</span>,    <span class="comment">#按顺序分配给图的输入节点的名称。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  output_names=<span class="literal">None</span>,   <span class="comment">#按顺序分配给图形输出节点的名称。 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  aten=<span class="literal">False</span>,   <span class="comment">#operator_export_type=OperatorExportTypes.ONNX_ATEN，ATen部分有大量的代码是来声明和定义Tensor运算相关的逻辑的，实现Pytorch中tensor的加速</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  operator_export_type=<span class="literal">None</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  opset_version=<span class="literal">None</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  _retain_param_name=<span class="literal">True</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  do_constant_folding=<span class="literal">True</span>,<span class="comment">#应用常量折叠优化。 常量折叠将用预先计算的常量节点替换一些具有所有常量输入的操作。 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  example_outputs=<span class="literal">None</span>,    <span class="comment">#(T or a tuple of T, where T is Tensor or convertible to Tensor, default None)导出 ScriptModule 或 ScriptFunction 时必须提供，否则将被忽略。 用于在不跟踪模型执行的情况下确定输出的类型和形状。 单个对象被视为等同于一个元素的元组。 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  strip_doc_string=<span class="literal">True</span>,   <span class="comment">#不包括导出模型中的字段 doc_string`。 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  dynamic_axes=<span class="literal">None</span>,  <span class="comment">#默认情况下，导出的模型会将所有输入和输出张量的形状设置为与 args 中给出的形状（以及需要该 arg 时的 example_outputs）完全匹配。 要将张量轴指定为动态（即仅在运行时已知），请将 dynamic_axes 设置为具有模式的字典。KEY (str): 输入或输出名称。每个名称还必须在 input_names 或 output_names 中提供。VALUE (dict or list): 如果是字典，键是轴索引，值是轴名称。 如果是列表，则每个元素都是一个轴索引。 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  keep_initializers_as_inputs=<span class="literal">None</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  custom_opsets=<span class="literal">None</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  enable_onnx_checker=<span class="literal">True</span>, <span class="comment">#如果为 True，将运行 onnx 模型检查器以确保导出的模型是有效的 ONNX 模型。 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  use_external_data_format=<span class="literal">False</span>)  <span class="comment">#如果为 True，则某些模型参数存储在外部数据文件中，而不是存储在 ONNX 模型文件本身中。 由于协议缓冲区的大小限制，无法将大于 2GB 的模型导出到一个文件中。 有关详细信息，请参阅 onnx.proto。 如果为 True，则参数 f 必须是指定模型位置的字符串。 外部数据文件将存储在与 f 相同的目录中。 除非 operator_export_type=OperatorExportTypes.ONNX，否则将忽略此参数。</span></span></pre></td></tr></table></figure><p><a href="https://pytorch.org/tutorials/advanced/super_resolution_with_onnxruntime.html" target="_blank" rel="noopener">参考-ONNX-PyTorch</a></p><p><a href="https://zhuanlan.zhihu.com/p/86867138" target="_blank" rel="noopener">参考-知乎</a></p><p><a href="https://blog.csdn.net/xjm850552586/article/details/114898679" target="_blank" rel="noopener">参考-CSDN</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开放神经网络交换-Open-Neural-Network-Exchange&quot;&gt;&lt;a href=&quot;#开放神经网络交换-Open-Neural-Network-Exchange&quot; class=&quot;headerlink&quot; title=&quot;开放神经网络交换(Open Neur
      
    
    </summary>
    
    
      <category term="Model Compression and Acceleration" scheme="http://yoursite.com/categories/Model-Compression-and-Acceleration/"/>
    
    
      <category term="Model Compression and Acceleration" scheme="http://yoursite.com/tags/Model-Compression-and-Acceleration/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab-CI-Automation-Deployment</title>
    <link href="http://yoursite.com/2021/07/25/Gitlab-CI-Automation-Deployment/"/>
    <id>http://yoursite.com/2021/07/25/Gitlab-CI-Automation-Deployment/</id>
    <published>2021-07-25T13:39:59.000Z</published>
    <updated>2021-07-25T14:56:05.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gitlab-CI自动化部署"><a href="#Gitlab-CI自动化部署" class="headerlink" title="Gitlab CI自动化部署"></a>Gitlab CI自动化部署</h2><p><img src="/2021/07/25/Gitlab-CI-Automation-Deployment/1.jpg" alt="gitlab-ci"></p><h4 id="一、概念简述"><a href="#一、概念简述" class="headerlink" title="一、概念简述"></a>一、概念简述</h4><p>GitLab CI/CD 是一个内置在GitLab中的工具，其中集成了Continuous Integration (CI)  <strong>持续集成</strong>、Continuous Delivery (CD)     持续交付、Continuous Deployment (CD)   <strong>持续部署</strong>等功能。可以实现<strong>自动</strong>或<strong>手动</strong>的部署和测试等。</p><p><strong>持续集成</strong>的工作原理是将项目根目录下Git管理的代码块推送到Git仓库托管的远程代码分支上，并且每次推送时，都要运行一系列脚本来安装、构建、测试和验证代码的更改。</p><p><strong>持续交付(需要人工干预)和部署(自动部署)</strong>相当于更进一步的CI，可以在每次推送到仓库默认分支的同时将应用程序部署到生产环境。</p><h4 id="二、优点"><a href="#二、优点" class="headerlink" title="二、优点"></a>二、优点</h4><ul><li>可以在开发周期的早期发现bugs和errors，从而确保部署到生产环境的所有代码都符合为应用程序建立的代码标准。能够尽早地发现问题，解决问题，减少项目最终部署的成本。</li><li>软件开发的持续方法基于自动执行脚本，以最大程度地减少在开发应用程序时引入错误的机会。从开发新代码到部署新代码，他们几乎不需要人工干预，甚至根本不需要干预。 </li></ul><h4 id="三、工作过程"><a href="#三、工作过程" class="headerlink" title="三、工作过程"></a>三、工作过程</h4><ol><li>gitlab-ci提供了指定ci运行平台的机制，它提供了一个叫<strong>gitlab-runner</strong>的软件，只要在对应的平台(机器或docker)上下载并运行这个命令行软件，并输入从gitlab交互界面获取的token,就可以把当前机器和对应的gitlab-ci流程绑定。</li><li>根目录中创建<strong>.gitlab-ci.yml</strong>文件，用于控制CI流程的不同阶段。如：安装、构建、测试和部署的脚本和其他配置信息。</li><li>每当你push/merge一次，gitlab-ci都会检查项目的根目录下有没有.gitlab-ci.yml文件。如果有，它会执行你在里面编写的脚本，并完整地走一遍在.gitlab-ci.yml中配置的流程。</li></ol><h4 id="四、gitlab-ci涉及的抽象概念"><a href="#四、gitlab-ci涉及的抽象概念" class="headerlink" title="四、gitlab-ci涉及的抽象概念"></a>四、gitlab-ci涉及的抽象概念</h4><ol><li><h5 id="Pipeling-amp-Job"><a href="#Pipeling-amp-Job" class="headerlink" title="Pipeling &amp; Job"></a>Pipeling &amp; Job</h5><p>Pipeline是Gitlab根据项目的.gitlab-ci.yml文件执行的流程，它由许多个任务节点组成,    而这些Pipeline上的每一个任务节点，都是一个独立的Job。<strong>每个Job都会配置一个stage属性，来表示这个Job所处的阶段。</strong></p></li><li><h5 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a><strong>Runner</strong></h5><p>Runner可以理解为：<strong>在特定机器上</strong>根据项目的<strong>.gitlab-ci.yml</strong>文件，对项目执行pipeline的<strong>程序</strong>。Runner可以分为两种： <strong>Specific Runner</strong>(可以自定义，在自己选择的机器上运行runner程序，gitlab给我们提供了一个叫gitlab-runner的命令行软件，只要在对应机器上下载安装这个软件，并且运行gitlab-runner register命令，然后输入从gitlab-ci交互界面获取的token进行注册, 就可以在自己的机器上远程运行pipeline程序了) 和 <strong>Shared Runner</strong>(Gitlab平台提供的免费使用的runner程序，它由Google云平台提供支持，对CI时间有限制)。</p></li><li><p><strong>Executors</strong></p><p>GitLab Runner 实现了许多可用于在不同场景中运行构建的执行器。下表列出了GitLab Runner支持的一些执行器，并且不会在扩展去支持其他的一些执行器。执行器支持用于构建项目的不同平台和方法。 下表显示了每个 executor 的关键事实，这将帮助您决定使用哪个 executor。 </p><p><img src="/2021/07/25/Gitlab-CI-Automation-Deployment/table.png" alt="Gitlab-CI-Automation-Deployment"></p><p><a href="https://docs.gitlab.com/runner/executors/#selecting-the-executor" target="_blank" rel="noopener">参考链接</a></p></li><li><p><strong>.gitlab-ci.yml配置的特定关键字</strong></p></li></ol><div class="table-container"><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>stages</td><td>stages定义在YML文件的最外层，它的值是一个数组，用于定义一个pipeline不同的流程节点</td></tr><tr><td>stage</td><td>作为Job的子属性，是一个字符串，且是stages数组的一个子项，表示的是当前的pipeline节点</td></tr><tr><td>script</td><td>作为Job的子属性，当前pipeline节点运行的shell脚本</td></tr><tr><td>tags</td><td>作为Job的子属性，tags是当前Job的标记</td></tr></tbody></table></div><h4 id="五、实践"><a href="#五、实践" class="headerlink" title="五、实践"></a>五、实践</h4><p><strong>1、在平台上下载并安装Gitlab-runner命令行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">针对Linux平台</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下在二进制包</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Linux x86-64</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">sudo curl -L --output /usr/local/bin/gitlab-runner "https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改用户的下载目录操作权限</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/gitlab-runner</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建一个Gitlab CI 用户</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">sudo useradd --comment 'GitLab Runner' --create-home gitlab-runner --shell /bin/bash</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Install</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Run as service</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner start</span></pre></td></tr></table></figure><p><a href="https://docs.gitlab.com/runner/install/linux-manually.html" target="_blank" rel="noopener">参考官网的链接</a></p><p><strong>3、注册Runner</strong></p><p>注册前的需求</p><ul><li>安装gitlab-runner到部署服务器，而不是GitLab仓库所在的服务器</li><li>获取token<ul><li>For a <a href="https://docs.gitlab.com/ee/ci/runners/#shared-runners" target="_blank" rel="noopener">shared runner</a>, have an administrator go to the GitLab Admin Area and click <strong>Overview &gt; Runners</strong></li><li>For a <a href="https://docs.gitlab.com/ee/ci/runners/README.html#group-runners" target="_blank" rel="noopener">group runner</a>, go to <strong>Settings &gt; CI/CD</strong> and expand the <strong>Runners</strong> section</li><li>For a <a href="https://docs.gitlab.com/ee/ci/runners/README.html#specific-runners" target="_blank" rel="noopener">project-specific runner</a>, go to <strong>Settings &gt; CI/CD</strong> and expand the <strong>Runners</strong> section</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">针对Linux平台</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">1、sudo gitlab-runner register</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">2、Enter your GitLab instance URL (also known as the gitlab-ci coordinator URL). </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">3、Enter the token you obtained to register the runner. </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">4、Enter a description for the runner. You can change this value later in the GitLab user interface. </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">5、Enter the tags associated with the runner, separated by commas. You can change this value later in the GitLab user interface. </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">6、Provide the runner executor. For most use cases, enter docker. </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">7、If you entered docker as your executor, you’ll be asked for the default image to be used for projects that do not define one in .gitlab-ci.yml.</span></pre></td></tr></table></figure><p><a href="https://docs.gitlab.com/runner/register/index.html" target="_blank" rel="noopener">参考链接</a></p><p><strong>4、激活Runner</strong></p><p>注册完了可能还需要激活，如果在CI/CD面板中Runner显示的是黑色的感叹号，那么说明Runner已经注册成功了，但是还需要激活，如果显示绿色的话，说明已经激活，可以跳过本步。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner verify</span></pre></td></tr></table></figure><p><strong>注意：</strong>gitlab-ci每次都会对比部署目录下面的文件夹，如果仓库中的文件夹在本地没有的话，那么每次push/merge的时候会删除部署环境中的文件夹。如果mysql/data在部署路径下， 但是仓库中没有mysql的目录，那么每次push就会删除数据库。简直是<strong>神不知，鬼不觉</strong>的删库跑路。所以为了避免这种情况，需要将mysql的环境在docker-compose中单独指定宿主机的一个目录，然后在映射到docker容器中，然后指定docker容器中mysql的配置文件即可。这里的原因可能有两个，一个是在选择exector的时候，根据前面说的，选择了会情况build环境的executor，另一个可能涉及到<strong>Cache</strong>这个关键字(但对于单Job的执行流程来说，尝试过设置Cache的path，但是没有卵用)。</p><p>Cache的出现是为了缓冲一些已经安装好的环境，<strong>以免</strong>每次push/merge的时候都需安装一些依赖的环境，导致整个pipeline的时间过长，降低效率。另一个是<strong>gitlab-ci在运行下一个Job的时候，会默认把前一个Job新增的资源删除干净。</strong></p><p><strong>cache的作用就是：</strong></p><ul><li><strong>在不同pipeline之间重用资源</strong></li><li><strong>在同一pipeline的不同Job之间重用资源</strong></li></ul><p><a href="https://zhuanlan.zhihu.com/p/184936276" target="_blank" rel="noopener">参考资料</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Gitlab-CI自动化部署&quot;&gt;&lt;a href=&quot;#Gitlab-CI自动化部署&quot; class=&quot;headerlink&quot; title=&quot;Gitlab CI自动化部署&quot;&gt;&lt;/a&gt;Gitlab CI自动化部署&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2021/07/25/
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Cloud-Paas-Learn</title>
    <link href="http://yoursite.com/2021/07/25/Cloud-PaaS-Learn/"/>
    <id>http://yoursite.com/2021/07/25/Cloud-PaaS-Learn/</id>
    <published>2021-07-25T13:29:11.000Z</published>
    <updated>2021-07-25T13:33:03.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="云计算Paas学习"><a href="#云计算Paas学习" class="headerlink" title="云计算Paas学习"></a>云计算Paas学习</h2><h4 id="一、如何使用postman进行登录"><a href="#一、如何使用postman进行登录" class="headerlink" title="一、如何使用postman进行登录"></a>一、如何使用postman进行登录</h4><ol><li>找到登录的<strong>login-processing-url</strong>：/api/v1/auth/login/verify。</li><li>查看<strong>Request</strong>的方式，一般为”POST”。</li><li>在postman界面的Body中添加<strong>用户名</strong>和<strong>密码</strong>等信息，可以通过Google在部署的开发服务器上获得。</li><li>发送请求，如果成功，在<strong>Response</strong>的<strong>Header</strong>中，可以找到”x-auth-header”的字段，里面的内容就是token值。</li><li>利用token的值请求别的页面，在请求的Header中添加”x-auth-header”以及对应的token值。</li></ol><h4 id="二、认证和鉴权的实践"><a href="#二、认证和鉴权的实践" class="headerlink" title="二、认证和鉴权的实践"></a>二、认证和鉴权的实践</h4><p>当postman发送登陆<strong>验证</strong>的请求时：下面认证的接口会被调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (postOnly &amp;&amp; !<span class="string">"POST"</span>.equals(request.getMethod())) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(<span class="string">"Authentication method not supported: "</span> + request.getMethod());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 获取提交的JSON数据</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    ServletInputStream ris = request.getInputStream();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    StringBuilder content = <span class="keyword">new</span> StringBuilder();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> lens;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> ((lens = ris.read(b)) &gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        content.append(<span class="keyword">new</span> String(b, <span class="number">0</span>, lens));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    JSONObject dataObject = JSON.parseObject(content.toString(), JSONObject<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    TenantAuthenticationToken authRequest = <span class="keyword">new</span> TenantAuthenticationToken(dataObject, <span class="string">""</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    authRequest.setDetails(authenticationDetailsSource.buildDetails(request));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getAuthenticationManager().authenticate(authRequest);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>当postman发送查看资源或别的非登陆页面的请求时：下面授权的接口会被调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ObjectMapper objectMapper;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">String token = request.getHeader(jwtTokenUtil.getHeader());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!StringUtils.isEmpty(token)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">Integer userId = jwtTokenUtil.getUserIdFromToken(token);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (userId != <span class="keyword">null</span> &amp;&amp; SecurityContextHolder.getContext().getAuthentication() == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">SecuritySessionUser securitySessionUser = <span class="keyword">new</span> SecuritySessionUser();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">securitySessionUser.setUserId(userId);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">securitySessionUser.setUsername(jwtTokenUtil.getUsernameFromToken(token));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (jwtTokenUtil.validateToken(token, securitySessionUser)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将用户信息存入 authentication，方便后续校验</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">UsernamePasswordAuthenticationToken authentication = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">securitySessionUser, <span class="keyword">null</span>, securitySessionUser.getAuthorities());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">authentication.setDetails(<span class="keyword">new</span> WebAuthenticationDetailsSource().buildDetails(request));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 authentication 存入 ThreadLocal，方便后续获取用户信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">SecurityContextHolder.getContext().setAuthentication(authentication);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">response.getWriter().write(objectMapper.writeValueAsString(MessageUtil.error(<span class="number">401</span>,<span class="string">"token已失效"</span>)));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">chain.doFilter(request, response);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>当认证授权通过后，可以使用如下接口获取用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getSessionUserId</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        SecuritySessionUser user = (SecuritySessionUser) SecurityContextHolder.getContext().getAuthentication()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            .getPrincipal();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> user.getUserId();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        log.error(<span class="string">"获取登录用户id失败:"</span>, e);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(<span class="string">"请先登录"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="三、用户信息从哪里来"><a href="#三、用户信息从哪里来" class="headerlink" title="三、用户信息从哪里来"></a>三、用户信息从哪里来</h4><p>上面使用了SecurityContextHolder.getContext().getAuthentication()获取用户的信息。<strong>那么为什么这个接口能够获取用户的信息呢？</strong></p><p>可以看到用户的信息是从SecurityContextHolder中，先get到Context，在get到认证信息。那么首先在谈谈SecurityContextHolder。</p><p>SecurityContextHolder 中的数据，本质上是保存在<code>ThreadLocal</code>中，<code>ThreadLocal</code>的一个特点是如果一个线程往<code>ThreadLocal</code>中存数据，那么只有该线程可以取。那么又有一个问题，当不同的请求进入到服务端之后，由不同的 thread 去处理，按理说后面的请求就可能无法获取到登录请求的线程存入的数据。例如登录请求在线程 A 中将登录用户信息存入 <code>ThreadLocal</code>，后面的请求来了，在线程 B 中处理，那此时就无法获取到用户的登录信息。但是我们每次都能获取到相应的<strong>用户信息</strong>，这个是为什么呢？</p><p>首先，得谈谈<code>SecurityContextPersistenceFilter</code>这是一个滤波器，Spring Security的一系列功能都是有一个个的过滤器来完成的。那么<code>SecurityContextPersistenceFilter</code>这个过滤器是用来干嘛的？先看看部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityContextPersistenceFilter</span> <span class="keyword">extends</span> <span class="title">GenericFilterBean</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">HttpServletRequest request = (HttpServletRequest) req;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">HttpServletResponse response = (HttpServletResponse) res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">HttpRequestResponseHolder holder = <span class="keyword">new</span> HttpRequestResponseHolder(request,response);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">SecurityContext contextBeforeChainExecution = repo.loadContext(holder);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">SecurityContextHolder.setContext(contextBeforeChainExecution);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">chain.doFilter(holder.getRequest(), holder.getResponse());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">SecurityContext contextAfterChainExecution = SecurityContextHolder.getContext();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">SecurityContextHolder.clearContext();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">repo.saveContext(contextAfterChainExecution, holder.getRequest(),holder.getResponse());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>这里列出来了比较关键的几个部分：</p><ol><li><code>SecurityContextPersistenceFilter</code> 继承自<code>GenericFilterBean</code>，而 <code>GenericFilterBean</code> 则是 Filter 的实现，所以 <code>SecurityContextPersistenceFilter</code> 作为一个过滤器，它里边最重要的方法就是 doFilter 了。</li><li>在 doFilter 方法中，它首先会从 repo 中读取一个 <code>SecurityContext</code> 出来，这里的 repo 实际上就是 <code>HttpSessionSecurityContextRepository</code>，读取 <code>SecurityContext</code>的操作会进入到 <code>readSecurityContextFromSession</code>方法中，在这里我们看到了读取的核心方法 <code>Object contextFromSession = httpSession.getAttribute(springSecurityContextKey);</code>，这里的 <code>springSecurityContextKey</code> 对象的值就是 <code>SPRING_SECURITY_CONTEXT</code>，读取出来的对象最终会被转为一个 <code>SecurityContext</code>对象。</li><li><code>SecurityContext</code>是一个接口，它有一个唯一的实现类 <code>SecurityContextImpl</code>，这个实现类其实就是用户信息在 session 中保存的 value。</li><li>在拿到<code>SecurityContext</code> 之后，通过<code>SecurityContextHolder.setContext</code>方法将这个<code>SecurityContext</code>设置到 <code>ThreadLocal</code>中去，这样，在当前请求中，Spring Security  的后续操作，我们都可以直接从 <code>SecurityContextHolder</code>中获取到用户信息了。</li><li>接下来，通过 chain.doFilter 让请求继续向下走（这个时候就会进入到 <code>UsernamePasswordAuthenticationFilter</code> 过滤器中了）。</li><li>在过滤器链走完之后，数据响应给前端之后，finally中还有一步收尾操作，这一步很关键。这里从SecurityContextHolder<code>中获取到</code>SecurityContext<code>，获取到之后，会把</code>SecurityContextHolder<code>清空，然后调用  repo.saveContext 方法将获取到的</code>SecurityContext` 存入 session 中。</li></ol><h4 id="四、RequestInterceptor"><a href="#四、RequestInterceptor" class="headerlink" title="四、RequestInterceptor"></a>四、RequestInterceptor</h4><p>微服务之前调用的时候请求不会传递参数，通过实现RequestInterceptor接口,完成对所有的Feign请求,传递请求头和请求参数。常见的使用是传递token。apply方法往RequestTemplate添加自定义名称的header。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignHeaderInterceptor</span> <span class="keyword">implements</span> <span class="title">RequestInterceptor</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(RequestTemplate requestTemplate)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        ServletRequestAttributes attributes = (ServletRequestAttributes)RequestContextHolder.getRequestAttributes();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == attributes) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        HttpServletRequest request = attributes.getRequest();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        requestTemplate.header(<span class="string">"x-auth-header"</span>, request.getHeader(<span class="string">"x-auth-header"</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="五、定制化Spring-Security"><a href="#五、定制化Spring-Security" class="headerlink" title="五、定制化Spring Security"></a>五、定制化Spring Security</h4><p>使用Spring Security为的就是写最少的代码，实现更多的功能，在定制化Spring Security，核心思路就是：重写某个功能，然后配置。</p><ul><li>比如你要查自己的用户表做登录，那就实现<code>UserDetailsService</code>接口；</li><li>比如前后端分离项目，登录成功和失败后返回json，那就实现<code>AuthenticationFailureHandler/AuthenticationSuccessHandler</code>接口；</li><li>比如扩展token存放位置，那就实现<code>HttpSessionIdResolver</code>接口；</li></ul><p>将上述做的更改配置到security里。套路就是这个套路。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSecurityConfigurer</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 自定义验证提供者</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AdminAuthenticationProvider adminAuthenticationProvider;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> TenantAuthenticationProvider tenantAuthenticationProvider; <span class="comment">// 自定义登录AuthenticationProvider</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 验证失败处理器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> CustomAuthenticationFailureHandler customAuthenticationFailureHandler;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 验证成功处理器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> CustomAuthenticationSuccessHandler customAuthenticationSuccessHandler;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 退出成功处理器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> CustomLogoutSuccessHandle customLogoutSuccessHandle;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 访问拒绝处理器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> CustomAccessDeniedHandler customAccessDeniedHandler;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 未登录时处理器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> CustomAuthenticationEntryPoint customAuthenticationEntryPoint;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 配置信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> CustomSecurityConfig customSecurityConfig;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"authenticationManagerBean"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AuthenticationManager authenticationManager;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">web.ignoring().antMatchers(toArrays(customSecurityConfig.getIgnoring()));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//web.ignoring().anyRequest(); //这个尽量不要全打开，网上说会使登陆的处理链接失效，从而不被认证 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">http.addFilterBefore(citictAuthenticationProcessingFilter(), AbstractPreAuthenticatedProcessingFilter<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">http.addFilterBefore(usernamePasswordAuthenticationFilter(), AbstractPreAuthenticatedProcessingFilter<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// "/", "/index", "/mylogin", "/static/**"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">http.authorizeRequests()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">            .antMatchers(toArrays(customSecurityConfig.getPermitAll()))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">            .permitAll()<span class="comment">// 定义不需要认证就可以访问</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">.antMatchers(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line"><span class="string">"/v2/api-docs"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line"><span class="string">"/swagger-resources"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line"><span class="string">"/swagger-resources/**"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line"><span class="string">"/configuration/ui"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line"><span class="string">"/configuration/security"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line"><span class="string">"/swagger-ui.html/**"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line"><span class="string">"/webjars/**"</span>).permitAll()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">.anyRequest().authenticated()<span class="comment">// 其余所有请求都需要登录认证才能访问</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">.and()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">            .formLogin()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义认证成功或者失败的返回json</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">.successHandler(customAuthenticationSuccessHandler).failureHandler(customAuthenticationFailureHandler)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">.permitAll() <span class="comment">//允许用户访问Spring Security自带的/login页面，当然也可以自己写</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">            .and()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">            .logout().logoutUrl(customSecurityConfig.getLogoutUrl())<span class="comment">// 自定义退出url</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">.logoutSuccessHandler(customLogoutSuccessHandle)<span class="comment">// 设置了登出成功的Handler</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line">.invalidateHttpSession(<span class="keyword">true</span>).permitAll();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// .and().rememberMe()// 记住我</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// .rememberMeParameter("rememberMe")</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// .tokenRepository(persistentTokenRepository())</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// .tokenValiditySeconds(60 * 60 * 24); //token生效的时间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认都会产生一个hiden标签 里面有安全相关的验证 防止请求伪造 因为使用了jwt所以这里不需要csrf</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line">http.csrf().disable();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line">http.exceptionHandling().authenticationEntryPoint(customAuthenticationEntryPoint);<span class="comment">// 未登录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">98</span></pre></td><td class="code"><pre><span class="line">http.exceptionHandling().accessDeniedHandler(customAccessDeniedHandler); <span class="comment">// 无权访问</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">99</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">100</span></pre></td><td class="code"><pre><span class="line">http.httpBasic();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">101</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//禁用session,而使用token</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">102</span></pre></td><td class="code"><pre><span class="line">http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">103</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">104</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">105</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">106</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">107</span></pre></td><td class="code"><pre><span class="line">auth.authenticationProvider(adminAuthenticationProvider);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">108</span></pre></td><td class="code"><pre><span class="line">auth.authenticationProvider(tenantAuthenticationProvider);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">109</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">110</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">111</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个必须重写，才能使用AuthenticationManager，在成员变量注入进来，再注入过滤器中</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">112</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">113</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">114</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">115</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">116</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">117</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">118</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面就是默认的过滤器UsernamePasswordAuthenticationFilter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">119</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置一下拦截地址、认证成功失败处理器、authenticationManager</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">120</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">121</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">122</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 默认用户名密码认证过滤器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">123</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">124</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Author</span> guomh 2019/12/02</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">125</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">126</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">127</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">128</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> UserAuthenticationProcessingFilter <span class="title">usernamePasswordAuthenticationFilter</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">129</span></pre></td><td class="code"><pre><span class="line">UserAuthenticationProcessingFilter filter = <span class="keyword">new</span> UserAuthenticationProcessingFilter();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">130</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">131</span></pre></td><td class="code"><pre><span class="line">filter.setAuthenticationManager(authenticationManager);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">132</span></pre></td><td class="code"><pre><span class="line">filter.setAuthenticationSuccessHandler(customAuthenticationSuccessHandler);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">133</span></pre></td><td class="code"><pre><span class="line">filter.setAuthenticationFailureHandler(customAuthenticationFailureHandler);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">134</span></pre></td><td class="code"><pre><span class="line">filter.setFilterProcessesUrl(customSecurityConfig.getAdminLoginProcessingUrl());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">135</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> filter;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">136</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">137</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">138</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">139</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 字符串collection转数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">140</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">141</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> collection</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">142</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> *            字符串集合</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">143</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@return</span> 字符串数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">144</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">145</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String[] toArrays(List&lt;String&gt; collection) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">146</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (CollectionUtils.isEmpty(collection)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">147</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">148</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">149</span></pre></td><td class="code"><pre><span class="line">String[] array = <span class="keyword">new</span> String[collection.size()];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">150</span></pre></td><td class="code"><pre><span class="line">array = collection.toArray(array);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">151</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> array;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">152</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">153</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">154</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">155</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TenantAuthenticationProcessingFilter <span class="title">citictAuthenticationProcessingFilter</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">156</span></pre></td><td class="code"><pre><span class="line">TenantAuthenticationProcessingFilter filter = <span class="keyword">new</span> TenantAuthenticationProcessingFilter();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">157</span></pre></td><td class="code"><pre><span class="line">filter.setAuthenticationManager(authenticationManager);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">158</span></pre></td><td class="code"><pre><span class="line">filter.setAuthenticationSuccessHandler(customAuthenticationSuccessHandler);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">159</span></pre></td><td class="code"><pre><span class="line">filter.setAuthenticationFailureHandler(customAuthenticationFailureHandler);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">160</span></pre></td><td class="code"><pre><span class="line">filter.setFilterProcessesUrl(customSecurityConfig.getLoginProcessingUrl());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">161</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> filter;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">162</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">163</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">164</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="六、微服务中服务之间调用是否需要鉴权"><a href="#六、微服务中服务之间调用是否需要鉴权" class="headerlink" title="六、微服务中服务之间调用是否需要鉴权"></a>六、微服务中服务之间调用是否需要鉴权</h4><p>在微服务中进行权限控制时，通常将资源服务全部放到内网环境中，将API网关暴露在公网。这时<strong>服务间的调用</strong>分为两种情况，一种情况是<strong>将资源放到内网</strong>中， 则服务之间调用不需要鉴权，另一种是通过<strong>API网关发送调用请求</strong>，这时必须经过API网关进行鉴权。</p><p><img src="/2021/07/25/Cloud-PaaS-Learn/1.png" alt="Service-Request"></p><p>现在假设有三个服务：分别是用户服务、订单服务和产品服务。用户如果购买产品，则需要调用产品服务生成订单，那么我们在这个调用过程中有必要鉴权吗？答案是否定的，因为这些资源服务放在内网环境中，完全不用考虑安全问题。<a href="https://cloud.tencent.com/developer/article/1661115" target="_blank" rel="noopener">图片来源</a></p><p><strong>那么服务间的调用如何区分是公网的API网关的请求，还是内网中服务的请求呢？</strong></p><p>为了减少代码的冗余(分别写不同的接口)和请求的冗余(不同的请求参数)，可以<strong>在请求的header中添加一个参数</strong>来区分。</p><p>单体业务简化版业务图：<a href="https://www.cnblogs.com/study-everyday/p/7754596.html" target="_blank" rel="noopener">图片来源</a></p><p><img src="/2021/07/25/Cloud-PaaS-Learn/2.png" alt="Service-Request"></p><p>分布式应用简化版架构图：</p><p><img src="/2021/07/25/Cloud-PaaS-Learn/3.png" alt="Service-Request"></p><p><a href="https://cloud.tencent.com/developer/article/1612175" target="_blank" rel="noopener">参考链接</a></p><p><a href="https://mp.weixin.qq.com/s/yrRPz6SZIoHCHThxHpLChw" target="_blank" rel="noopener">定制化Spring Security的参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;云计算Paas学习&quot;&gt;&lt;a href=&quot;#云计算Paas学习&quot; class=&quot;headerlink&quot; title=&quot;云计算Paas学习&quot;&gt;&lt;/a&gt;云计算Paas学习&lt;/h2&gt;&lt;h4 id=&quot;一、如何使用postman进行登录&quot;&gt;&lt;a href=&quot;#一、如何使用po
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
</feed>
