<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>编辑尼撑</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-04-03T12:51:40.438Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Qiang Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2021/07/03/hello-world/"/>
    <id>http://yoursite.com/2021/07/03/hello-world/</id>
    <published>2021-07-03T15:25:14.049Z</published>
    <updated>2021-04-03T12:51:40.438Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-location-source-gt-post-directory"><a href="#Create-a-new-post-location-source-gt-post-directory" class="headerlink" title="Create a new post, location: source-&gt;_post directory"></a>Create a new post, location: source-&gt;_post directory</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure><h3 id="Create-a-new-draft-location-source-gt-drafts-directory"><a href="#Create-a-new-draft-location-source-gt-drafts-directory" class="headerlink" title="Create a new draft, location: source-&gt;_drafts directory"></a>Create a new draft, location: source-&gt;_drafts directory</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new  draft <span class="string">"My New Draft"</span></span></pre></td></tr></table></figure><h3 id="Preview-a-new-draft-shut-down-old-server"><a href="#Preview-a-new-draft-shut-down-old-server" class="headerlink" title="Preview a new draft (shut down old server)"></a>Preview a new draft (shut down old server)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo server --draft</span></pre></td></tr></table></figure><h3 id="publish-a-new-draft-shut-down-old-server"><a href="#publish-a-new-draft-shut-down-old-server" class="headerlink" title="publish a new draft (shut down old server)"></a>publish a new draft (shut down old server)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo publish <span class="string">"My New draft"</span></span></pre></td></tr></table></figure><h3 id="Create-a-new-normal-location-source-gt-c-directory"><a href="#Create-a-new-normal-location-source-gt-c-directory" class="headerlink" title="Create a new normal, location: source-&gt;c directory"></a>Create a new normal, location: source-&gt;c directory</h3><h4 id="normal-is-not-blog-page-it-likes-about-or-contact-us-page"><a href="#normal-is-not-blog-page-it-likes-about-or-contact-us-page" class="headerlink" title="normal is not blog page, it likes about or contact us page."></a>normal is not blog page, it likes about or contact us page.</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">"My new Normal"</span></span></pre></td></tr></table></figure><h3 id="Preview-a-new-normal"><a href="#Preview-a-new-normal" class="headerlink" title="Preview a new normal"></a>Preview a new normal</h3><p><a href="http://localhost:4000/c/" target="_blank" rel="noopener">http://localhost:4000/c/</a></p><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Clean-cache"><a href="#Clean-cache" class="headerlink" title="Clean cache"></a>Clean cache</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo clean</span></pre></td></tr></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>If you want to show Chinese, you must make sure md is saved with utf-8</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CUDA-Programmer-Learn-Two</title>
    <link href="http://yoursite.com/2021/07/03/CUDA-Programmer-Learn-Two/"/>
    <id>http://yoursite.com/2021/07/03/CUDA-Programmer-Learn-Two/</id>
    <published>2021-07-03T15:25:06.000Z</published>
    <updated>2021-07-03T15:25:06.657Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CUDA-Programmer-Learn-Two</title>
    <link href="http://yoursite.com/2021/07/03/CUDA-Programmer-Learn-two/"/>
    <id>http://yoursite.com/2021/07/03/CUDA-Programmer-Learn-two/</id>
    <published>2021-07-03T15:25:06.000Z</published>
    <updated>2021-07-03T15:33:30.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CUDA编程学习笔记"><a href="#CUDA编程学习笔记" class="headerlink" title="CUDA编程学习笔记"></a>CUDA编程学习笔记</h2><p>本笔记主要<a href="https://face2ai.com/program-blog/#GPU%E7%BC%96%E7%A8%8B%EF%BC%88CUDA%EF%BC%89" target="_blank" rel="noopener">参考: 谭升</a>大神的博客进行了部分关键知识的摘录，可能有些地方回去单独查找一些资料进行解释。</p><p>GPU中使用CUDA编程的核心部分分为：核函数、内存管理、线程管理和流。</p><p>在CUAD编程中特有的功能为：通过组织层次结构在GPU上组织线程的方法；通过组织层次结构在GPU上组织内存的方法。</p><p>在实际的CUDA应用开发过程中：需要从三个角度来思考如何解决问题？</p><ol><li>领域层，根据所要解决的问题的条件，在领域层分析数据和函数</li><li>逻辑层，需要考虑线程的层次结构，可以获得良好的可扩展性。</li><li>硬件层，通过理解线程如何映射到机器上，能充分帮助我们提高性能。</li></ol><h4 id="一、内存管理"><a href="#一、内存管理" class="headerlink" title="一、内存管理"></a>一、内存管理</h4><div class="table-container"><table><thead><tr><th style="text-align:center">标准C函数</th><th style="text-align:center">CUDA C函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">malloc</td><td style="text-align:center">cudaMalloc</td><td style="text-align:center">内存分配</td></tr><tr><td style="text-align:center">memcpy</td><td style="text-align:center">cudaMemcpy</td><td style="text-align:center">内存复制</td></tr><tr><td style="text-align:center">memset</td><td style="text-align:center">cudaMemset</td><td style="text-align:center">内存设置</td></tr><tr><td style="text-align:center">free</td><td style="text-align:center">cudaFree</td><td style="text-align:center">释放内存</td></tr></tbody></table></div><h4 id="二、线程管理"><a href="#二、线程管理" class="headerlink" title="二、线程管理"></a>二、线程管理</h4><p>一个核函数只能有一个grid，一个grid可以有很多个块，每个块可以有很多的线程，这种分层的组织结构使得我们的并行过程更加自如灵活。一个线程块block中的线程可以完成同步和内存共享。<strong>不同块内线程不能相互影响，他们是物理隔离的。</strong></p><p>每个线程都执行同样的一段串行代码，那么怎么让这段相同的代码对应不同的数据呢？</p><p>依靠下面两个内置结构体确定线程标号：blockIdx（线程块在线程网格内的位置索引），threadIdx（线程在线程块内的位置索引）。这两个内置结构体基于 uint3 定义，包含三个无符号整数的结构，通过三个字段来指定：blockIdx.x，blockIdx.y，blockIdx.z，threadIdx.x，threadIdx.y，threadIdx.z。</p><p>blockIdx对应的范围为gridDim，threadIdx对应的范围为blockDim。他们是dim3类型(基于uint3定义的数据结构)的变量，也包含三个字段x,y,z。blockDim.x，blockDim.y，blockDim.z。</p><p>通过指定grid和block的维度，我们可以配置：1、内核中线程的数目；2、内核中使用的线程布局。可以使用<strong>dim3类型</strong>的grid维度和block维度配置内核，也可以使用int类型的变量，或者常量直接初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">kernel_name&lt;&lt;&lt;<span class="number">4</span>,<span class="number">8</span>&gt;&gt;&gt;(argument <span class="built_in">list</span>);</span></pre></td></tr></table></figure><p>上面这条指令的线程布局是：</p><p><img src="/2021/07/03/CUDA-Programmer-Learn-two/1.png" alt="CUDA-Program-Lean-Plus"></p><p>核函数是同时复制到多个线程执行的，上文我们说过一个对应问题，多个计算执行在一个数据，肯定是浪费时间，所以为了让多线程按照我们的意愿对应到不同的数据，就要给线程一个唯一的标识，由于设备内存是线性的（基本市面上的内存硬件都是线性形式存储数据的）我们观察上图，可以用threadIdx.x 和blockIdx.x 来组合获得对应的线程的唯一标识。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//主机端显示等待设备端执行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cudaError_t <span class="title">cudaDeviceSynchronize</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//主机端隐式等待设备端执行 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//当核函数启动后的下一条指令就是从设备复制数据回主机端，那么主机端必须要等待设备端计算完成。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function">cudaError_t <span class="title">cudaMemcpy</span><span class="params">(<span class="keyword">void</span>* dst,<span class="keyword">const</span> <span class="keyword">void</span> * src,</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="params">  <span class="keyword">size_t</span> count,cudaMemcpyKind kind)</span></span>;</span></pre></td></tr></table></figure><p>所有CUDA核函数的启动都是异步的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写核函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">kernel_name</span><span class="params">(argument <span class="built_in">list</span>)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//CUDA小技巧，当我们进行调试的时候可以把核函数配置成单线程的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">kernel_name&lt;&lt;&lt;<span class="number">1</span>,<span class="number">1</span>&gt;&gt;&gt;(argument <span class="built_in">list</span>)</span></pre></td></tr></table></figure><p><strong>错误处理</strong>，获得每个函数执行后的返回结果，然后对不成功的信息加以处理，CUDA C 的API每个调用都会返回一个错误代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHECK(call) \</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#123;\</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cudaError_t error=call;\</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(error!=cudaSuccess)\</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#123;\</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"ERROR: %s:%d,"</span>,__FILE__,__LINE__);\</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"code:%d,reason:%s\n"</span>,error,cudaGetErrorString(error));\</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);\</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;\</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>用CPU计时</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cpuSecond</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tp</span>;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  gettimeofday(&amp;tp,<span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span>((<span class="keyword">double</span>)tp.tv_sec+(<span class="keyword">double</span>)tp.tv_usec*<span class="number">1e-6</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>理论极限最大化</strong></p><p>得到了实际操作值，我们需要知道的是我们能优化的极限值是多少，也就是机器的理论计算极限，这个极限我们永远也达不到，但是我们必须明确的知道，比如理论极限是2秒，我们已经从10秒优化到2.01秒了，基本就没有必要再继续花大量时间优化速度了，而应该考虑买更多的机器或者更新的设备。各个设备的理论极限可以通过其芯片说明计算得到。具体的计算指标为：</p><ul><li>单精度峰值浮点数计算次数</li><li>内存带宽峰值</li><li>指令比</li></ul><h4 id="三、组织并行线程"><a href="#三、组织并行线程" class="headerlink" title="三、组织并行线程"></a>三、组织并行线程</h4><p>介绍每一个线程是怎么确定唯一的索引，然后建立并行计算，并且不同的线程组织形式是怎样影响性能的？</p><p><strong>使用快和线程建立矩阵索引</strong></p><p>多线程的优点就是每个线程处理不同的数据计算，那么怎么分配好每个线程处理不同的数据，而不至于多个不同的线程处理同一个数据，或者避免不同的线程没有组织的乱访问内存。</p><p><img src="/2021/07/03/CUDA-Programmer-Learn-two/2.png" alt="CUDA-Program-Learn-Plus"></p><p>这里(ix,iy)就是整个线程模型中任意一个线程的索引，或者叫做全局地址，局部地址当然就是(threadIdx.x,threadIdx.y)了，当然这个局部地址目前还没有什么用处，他只能索引线程块内的线程，不同线程块中有相同的局部索引值。</p><p>前面讲过CUDA每一个线程执行相同的代码，也就是异构计算中说的多线程单指令，如果每个不同的线程执行同样的代码，又处理同一组数据，将会得到多个相同的结果，显然这是没意义的，为了让不同线程处理不同的数据，CUDA常用的做法是让不同的线程对应不同的数据，也就是用线程的全局标号对应不同组的数据。</p><p>设备内存或者主机内存都是线性存在的，比如一个二维矩阵 (8×6)，存储在内存中是这样的：</p><p><img src="/2021/07/03/CUDA-Programmer-Learn-two/3.png" alt="CUDA-Program-Learn-Plus"></p><p>图像块中数据寻址的计算步骤：</p><ul><li>线程和块索引（来计算线程的全局索引），矩阵中给定点的坐标（ix,iy）</li><li>(ix,iy)对应的线性内存的位置</li></ul><p>线性位置的计算方法是：</p><script type="math/tex; mode=display">idx=ix+iy∗nx</script><h4 id="四、执行模型"><a href="#四、执行模型" class="headerlink" title="四、执行模型"></a>四、执行模型</h4><p>用CUDA的目的其实说白了就是为计算速度快，所以压榨性能，提高效率其实就是CUDA学习的最终目的。什么时候我们沿着硬件设计的思路设计程序，我们就会得到百战百胜。CUDA执行模型揭示了GPU并行架构的抽象视图，了解CUDA的执行模型，可以帮助我们优化指令吞吐量，和内存使用来获得极限速度。</p><p><strong>GPU架构概述：</strong>GPU架构是围绕一个流式多处理器（SM）的扩展阵列搭建的。通过复制这种结构来实现GPU的硬件并行。</p><p>下面图中展示了流式多处理器中的一些核心组件：CUDA核心、共享内存/一级缓存、寄存器文件、加载/存储单元、特殊功能单元、线程束调度器。</p><p><img src="/2021/07/03/CUDA-Programmer-Learn-two/4.png" alt="CUDA-Program-Learn-Plus"></p><p>GPU中每个SM都能支持数百个线程并发执行，每个GPU通常有多个SM，当一个核函数的网格被启动的时候，多个block会被同时分配给可用的SM上执行。</p><p><strong>注意:</strong> 当一个blcok被分配给一个SM后，他就只能在这个SM上执行了，不可能重新分配到其他SM上了，多个线程块可以被分配到同一个SM上。在SM上同一个块内的多个线程进行线程级别并行，<strong>而同一线程内，指令利用指令级并行将单个线程处理成流水线。</strong></p><p><strong>线程束：</strong>CUDA  采用单指令多线程SIMT架构管理执行线程，不同设备有不同的线程束大小，但是到目前为止基本所有设备都是维持在32，也就是说每个SM上有多个block，一个block有多个线程（可以是几百个，但不会超过某个最大值），但是从机器的角度，在某时刻T，SM上只执行一个线程束，也就是32个线程在同时同步执行，线程束中的每个线程执行同一条指令。</p><p><strong>SIMD vs SIMT：</strong>单指令多数据的执行属于向量机，比如我们有四个数字要加上四个数字，那么我们可以用这种单指令多数据的指令来一次完成本来要做四次的运算。这种机制的问题就是过于死板，不允许每个分支有不同的操作，所有分支必须同时执行相同的指令，必须执行没有例外。相比之下单指令多线程SIMT就更加灵活了，虽然两者都是将相同指令广播给多个执行单元，但是SIMT的某些线程可以选择不执行，也就是说同一时刻所有线程被分配给相同的指令，SIMD规定所有人必须执行，而SIMT则规定有些人可以根据需要不执行，这样SIMT就保证了线程级别的并行，而SIMD更像是指令级别的并行。</p><p>SIMT包括以下SIMD不具有的关键特性：</p><ol><li>每个线程都有自己的指令地址计数器</li><li>每个线程都有自己的寄存器状态</li><li>每个线程可以有一个独立的执行路径</li></ol><p>而上面这三个特性在编程模型可用的方式就是给每个线程一个唯一的标号（blckIdx,threadIdx），并且这三个特性保证了各线程之间的独立。</p><p><strong>问题：如何将线程的标号唯一的对应到SM流式多处理器中的block，对应到block后CUDA核和指令寄存器之间的关系如何确定?</strong></p><h4 id="五、CUDA编程的组件与逻辑"><a href="#五、CUDA编程的组件与逻辑" class="headerlink" title="五、CUDA编程的组件与逻辑"></a>五、CUDA编程的组件与逻辑</h4><p>下图从逻辑角度和硬件角度描述了CUDA编程模型对应的组件。</p><p><img src="/2021/07/03/CUDA-Programmer-Learn-two/5.png" alt="CUDA-Program-Learn-Plus"></p><p>SM中共享内存，和寄存器是关键的资源，线程块中线程通过共享内存和寄存器相互通信协调。寄存器和共享内存的分配可以严重影响性能！</p><p>每个SM有<strong>两个线程束调度器，和两个指令调度单元</strong>，当一个线程块被指定给一个SM时，线程块内的所有线程被分成线程束，线程束选择其中两个线程束，在用指令调度器存储两个线程束要执行的指令（就像上面例子中分水果的水果一样，我们这里有两个班，两个班的老师各自控制的自己的水果，老师就是指令调度器）像第一张图上的显示一样，每16个CUDA核心为一个组，还有16个加载/存储单元或4个特殊功能单元。当某个线程块被分配到一个SM上的时候，会被分成多个线程束，线程束在SM上交替执行。</p><p><strong>开发高性能计算程序关键的两个步骤：1、保证结果正确，和程序健壮性；2、优化速度。</strong></p><p><strong>性能分析的主要关注点：</strong></p><ol><li>应用程序代码的空间或时间复杂度</li><li>特殊指令的使用</li><li>函数调用的频率和持续时间</li></ol><p><strong>性能分析工具：</strong></p><ul><li>nvvp</li><li>nvprop</li></ul><h4 id="六、线程束和线程块"><a href="#六、线程束和线程块" class="headerlink" title="六、线程束和线程块"></a>六、线程束和线程块</h4><p>线程束是SM中基本的执行单元，当一个网格被启动（网格被启动，等价于一个内核被启动，每个内核对应于自己的网格），网格中包含线程块，线程块被分配到某一个SM上以后，将分为多个线程束，每个线程束一般是32个线程（目前的GPU都是32个线程，但不保证未来还是32个）在一个线程束中，所有线程按照单指令多线程SIMT的方式执行，每一步执行相同的指令，但是处理的数据为私有的数据，下图反应的就是逻辑，实际，和硬件的图形化。</p><p><img src="/2021/07/03/CUDA-Programmer-Learn-two/6.png" alt="CUDA-Program-Learn-Plus"></p><p><strong>线程束的分化：</strong>那么当一个线程束的32个线程执行这段代码的时候，如果其中16个执行if中的代码段，而另外16个执行else中的代码块，同一个线程束中的线程，执行不同的指令。<strong>线程束分化会产生严重的性能下降。条件分支越多，并行性削弱越严重。</strong>（因为分配命令的调度器就一个，所以满足if条件的线程得到if中的指令执行，不满足的部分等待。当满足if条件的线程执行完后，不满足的线程执行else中的指令，其余线程等待）</p><p><strong>如何解决线程束的分化？</strong></p><p>根本思路是避免同一个线程束内的线程分化，而让我们能控制线程束内线程行为的原因是线程块中线程分配到线程束是有规律的而不是随机的。这就使得我们根据线程编号来设计分支是可以的，补充说明下，当一个线程束中所有的线程都执行if或者，都执行else时，不存在性能下降；只有当线程束内有分歧产生分支的时候，性能才会急剧下降。线程束内被分配的线程是可以被我们控制的，那么我们就把都执行if的线程塞到一个线程束中，或者让一个线程束中的线程都执行if，另外线程都执行else的这种方式可以将效率提高很多。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//低效的if else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">mathKernel1</span><span class="params">(<span class="keyword">float</span> *c)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tid = blockIdx.x* blockDim.x + threadIdx.x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> a = <span class="number">0.0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> b = <span class="number">0.0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (tid % <span class="number">2</span> == <span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">a = <span class="number">100.0f</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">b = <span class="number">200.0f</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">c[tid] = a + b;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//高效的if else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">mathKernel2</span><span class="params">(<span class="keyword">float</span> *c)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tid = blockIdx.x* blockDim.x + threadIdx.x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> a = <span class="number">0.0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> b = <span class="number">0.0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((tid/warpSize) % <span class="number">2</span> == <span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">a = <span class="number">100.0f</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">b = <span class="number">200.0f</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">c[tid] = a + b;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//上面warpSize表示线程束中线程的大小,比如总64个线程，分到了两个线程束，一个线程束32个线程。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//那么0-31的线程束都是if内的指令，32-63的线程束都是else指令。</span></span></pre></td></tr></table></figure><h4 id="七、资源分配"><a href="#七、资源分配" class="headerlink" title="七、资源分配"></a>七、资源分配</h4><p>每个SM上执行的基本单位是线程束，也就是说，单指令通过指令调度器广播给某线程束的全部线程，这些线程同一时刻执行同一命令。对于线程束来说有激活和未激活两个状态，线程束一旦被激活来到片上，那么他就不会再离开SM直到执行结束。而每个SM上有多少个线程束处于激活状态，取决于以下资源：</p><ol><li>程序计数器</li><li>寄存器</li><li>共享内存</li></ol><p>一个SM上被分配多少个线程块和线程束取决于SM中可用的寄存器和共享内存，以及内核需要的寄存器和共享内存大小。</p><p>当寄存器和共享内存分配给了线程块，这个线程块处于活跃状态，所包含的线程束称为活跃线程束。活跃的线程束又分为三类：</p><ul><li>选定的线程束</li><li>阻塞的线程束</li><li>符合条件的线程束 //32个CUDA核心可以用于执行；执行所需要的资源全部就位</li></ul><p>当SM要执行某个线程束的时候，执行的这个线程束叫做选定的线程束，准备要执行的叫符合条件的线程束，如果线程束不符合条件还没准备好就是阻塞的线程束。</p><h4 id="八、延迟隐藏"><a href="#八、延迟隐藏" class="headerlink" title="八、延迟隐藏"></a>八、延迟隐藏</h4><p>最大化是要最大化硬件，尤其是计算部分的硬件满跑，都不闲着的情况下利用率是最高的，总有人闲着，利用率就会低很多，即最大化功能单元的利用率。<strong>利用率与常驻线程束直接相关。</strong>硬件中线程束调度器负责调度线程束调度，当每时每刻都有可用的线程束供其调度，这时候可以达到计算资源的完全利用，以此来保证通过其他常驻线程束中发布其他指令的，可以隐藏每个指令的延迟。</p><p>对于指令的延迟，通常分为两种：算术指令、内存指令。</p><p>算数指令延迟是一个算术操作从开始，到产生结果之间的时间，这个时间段内只有某些计算单元处于工作状态，而其他逻辑计算单元处于空闲。算术延迟 10~20   个时钟周期</p><p>内存指令延迟很好理解，当产生内存访问的时候，计算单元要等数据从内存拿到寄存器，这个周期是非常长的。内存延迟 400~800 个时钟周期</p><p>所需线程束=延迟×吞吐量</p><p>同样，与指令周期隐藏延迟类似，内存隐藏延迟是靠内存读取的并发操作来完成的，需要注意的是，指令隐藏的关键目的是使用全部的计算资源，而内存读取的延迟隐藏是为了使用全部的内存带宽，内存延迟的时候，计算资源正在被别的线程束使用，所以我们不考虑内存读取延迟的时候计算资源在做了什么。</p><p>所以，延迟的隐藏取决于活动的线程束的数量，数量越多，隐藏的越好，但是线程束的数量又受到上面的说的资源影响。所以这里就需要寻找最优的执行配置来达到最优的延迟隐藏。</p><h4 id="九、同步"><a href="#九、同步" class="headerlink" title="九、同步"></a>九、同步</h4><p>块级别的就是同一个块内的线程会同时停止在某个设定的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">__syncthread();</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CUDA编程学习笔记&quot;&gt;&lt;a href=&quot;#CUDA编程学习笔记&quot; class=&quot;headerlink&quot; title=&quot;CUDA编程学习笔记&quot;&gt;&lt;/a&gt;CUDA编程学习笔记&lt;/h2&gt;&lt;p&gt;本笔记主要&lt;a href=&quot;https://face2ai.com/prog
      
    
    </summary>
    
    
      <category term="CUDA Programmer" scheme="http://yoursite.com/categories/CUDA-Programmer/"/>
    
    
      <category term="CUDA Programmer" scheme="http://yoursite.com/tags/CUDA-Programmer/"/>
    
  </entry>
  
  <entry>
    <title>CUDA-Programmer-Learn-One</title>
    <link href="http://yoursite.com/2021/07/03/CUDA-Programmer-Learn-One/"/>
    <id>http://yoursite.com/2021/07/03/CUDA-Programmer-Learn-One/</id>
    <published>2021-07-03T15:21:18.000Z</published>
    <updated>2021-07-03T15:24:42.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CUDA编程学习笔记"><a href="#CUDA编程学习笔记" class="headerlink" title="CUDA编程学习笔记"></a>CUDA编程学习笔记</h2><p>本笔记主要<a href="https://face2ai.com/program-blog/#GPU%E7%BC%96%E7%A8%8B%EF%BC%88CUDA%EF%BC%89" target="_blank" rel="noopener">参考: 谭升</a>大神的博客进行了部分关键知识的摘录，可能有些地方回去单独查找一些资料进行解释。</p><h4 id="一、编程模型"><a href="#一、编程模型" class="headerlink" title="一、编程模型"></a>一、编程模型</h4><p>1、 <strong>简单介绍线程层级：</strong>CUDA编程是一个多线程编程，数个线程(Thread)组成一个线程块(Block)，所有线程块组成一个线程网格(Grid)。目前的GPU限制一个<strong>线程块</strong>中，最多可以安排1024个线程。由于<strong>32个相邻的线程会组成一个线程束</strong>(Thread Warp)，而一个线程束中的线程会运行同样的指令。因此一般线程块中线程的数量被安排为32的倍数，选用256是比较合适的。</p><p>2、<strong>内核函数：</strong>CUDA每个线程执行的函数。关键字为global，返回值的关键字为void。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//kernal definition</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">vecAdd</span><span class="params">(<span class="keyword">float</span>* A, <span class="keyword">float</span>* B, <span class="keyword">float</span>* C)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> i=threadId.x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    C[i]=A[i]+B[i];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    vecAdd&lt;&lt;&lt;<span class="number">1</span>, N&gt;&gt;&gt;(A, B, C);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">matAdd</span><span class="params">(<span class="keyword">float</span> A[N][N], <span class="keyword">float</span> B[N][N], <span class="keyword">float</span> C[N][N])</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//blockDim代表当前线程块的尺寸</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> i = blockIdx.x * blockDim.x + threadIdx.x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> j = blockIdx.y * blockDim.y + threadIdx.y;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span>(i &lt; N &amp;&amp; j &lt; N)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        C[j][i] = A[j][i] + B[j][i]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    dim3 threadsPerBlock(<span class="number">16</span>,<span class="number">16</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="function">dim3 <span class="title">numBlocks</span><span class="params">(N / threadsPerBlock.x, N / threadsPerBlock.y)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    matAdd&lt;&lt;&lt;numBlocks, threadsPerBlock&gt;&gt;&gt;(A, B, C);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>SIMT，相同指令，不同线程</strong></p><p>3、<strong>内存层级：</strong>一般主机端内存通过PCI-E总线与设备端内存交换数据。数据交换的速度等于PCI-E总线的速度。</p><ol><li>寄存器和本地内存绑定到了每个线程，其他线程无法访问。</li><li>同一个线程块内的线程，可以访问同一块共享内存。注意，即使两个线程块被调度到了同一个SM上，他们的共享内存也是隔离开的，不能互相访问。</li><li>网格中的所有线程都可以自由读写全局内存。</li><li>常量内存和纹理内存只能被CPU端修改，GPU内的线程只能读取数据。</li></ol><p>4、<strong>CPU/GPU混合编程：</strong></p><p>CPU和GPU的内存是独立的，如何在两者之间共享数据。</p><ul><li>主机端(Host，即CPU)执行串行代码，然后调用内核函数，让设备端(Device，即GPU)执行并行代码。如此交错执行。<ul><li>一、因此在运行内核函数前，主机端需要调用内存拷贝函数，将数据通过PCI-E总线拷贝到设备端。内核运行结束后，需要CPU再次调用内存拷贝函数，将数据拷回主机端内存。</li><li>二、使用统一编址，将设备端的内存和主机端内存编到一起。这样主机就不需要显式的调用函数将数据拷贝到设备端内存了。</li></ul></li><li>除了CPU/GPU交错执行代码的方式外，还可以通过使用事件(event)和流(stream)等方式，让CPU/GPU并行工作，提升整体的效率。</li></ul><p>5、<strong>计算能力：</strong>指不同的GPU版本，每个版本具有不同的特性，编程也会有所差异。CUDA的版本与计算能力没有关系，只是表示对不同架构的支持。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//CPU、OpenCV、CUDA分别执行图像灰度转换</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui.hpp"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/opencv.hpp"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//CPU转换</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="function">Mat <span class="title">cpuConvertGray</span><span class="params">(Mat src, <span class="keyword">int</span> <span class="built_in">height</span>, <span class="keyword">int</span> <span class="built_in">width</span>)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    Mat outImg = zeros(imgHeight, imgWidth, CV_8UC1, Scalar(<span class="number">0</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;<span class="built_in">height</span>; ++y)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="built_in">width</span>; ++x)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            outImg.at&lt;uchar&gt;(y,x) = <span class="number">0.2126</span> * (<span class="keyword">float</span>)src.at&lt;Vec3b&gt;(y,x)[<span class="number">2</span>] + \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                <span class="number">0.7152</span> * (<span class="keyword">float</span>)src.at&lt;Vec3b&gt;(y,x)[<span class="number">1</span>] + \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                <span class="number">0.0722</span> * (<span class="keyword">float</span>)src.at&lt;Vec3b&gt;(y,x)[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> outImg;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//OpenCV转换</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="function">Mat <span class="title">openCvtGray</span><span class="params">(Mat src)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    Mat out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    cvtColor(src, out, COLOR_BGR2GRAY);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//CUDA转换</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">gpuConvertGray</span><span class="params">(uchar3* <span class="keyword">const</span> input, <span class="keyword">unsigned</span> <span class="keyword">char</span>* output, <span class="keyword">int</span> <span class="built_in">height</span>, <span class="keyword">int</span> <span class="built_in">width</span>)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> idx = blockIdx.x * blockDim.x + threadIdx.x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> idy = blockIdx.y * blockDim.y + threadIdy.y;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span>(idx &lt; <span class="built_in">width</span> &amp;&amp; idy &lt; <span class="built_in">height</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        uchar3 rgbImg = input[idy*<span class="built_in">width</span>+idx];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        output[idy*<span class="built_in">width</span>+idx]=<span class="number">0.299f</span> * rgb.x + <span class="number">0.587f</span> * rgb.y + <span class="number">0.114f</span> * rgb.z;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">clock_t</span> start, <span class="built_in">end</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">    Mat srcImg = imread(imagePath);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> imgHeight = srcImg.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> imgWidth = srcImg.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">    Mat grayImg = zeros(imgHeight, imgWidth, CV_8UC1, Scalar(<span class="number">0</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">    start = clock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//在CPU上进行图像灰度转化</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">    grayImg = cpuConvertGray(srcImg, imgHeight, imgWidth);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">end</span> = clock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"Cpu exec time is %.8f\n"</span>, (<span class="keyword">double</span>)(<span class="built_in">end</span>-start)/CLOCKS_PER_SEC);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">    Mat outImg = zeros(imgHeight, imgWidth, CV_8UC1, Scalar(<span class="number">0</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">    uchar3* input;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>* output;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//使用opencv转化</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">    start = clock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">    grayImg = openCvtGray(srcImg);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">end</span> = clock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"OpenCV exec time is %.8f\n"</span>, (<span class="keyword">double</span>)(<span class="built_in">end</span>-start)/CLOCKS_PER_SEC);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//在GPU上分配内存</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">    cudaMalloc((<span class="keyword">void</span>**)&amp;input, <span class="built_in">height</span>*<span class="built_in">width</span>*<span class="keyword">sizeof</span>(uchar3));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">    cudaMalloc((<span class="keyword">void</span>**)&amp;output, <span class="built_in">height</span>*<span class="built_in">width</span>*<span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//将图像数据从host拷贝到gpu上</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">    cudaMemcpy(input, src.data, <span class="built_in">height</span>*<span class="built_in">width</span>*<span class="keyword">sizeof</span>(uchar3), cudaMemcpyHostToDevice);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">    <span class="function">dim3 <span class="title">threadsPerBlock</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">    <span class="function">dim3 <span class="title">blocksPerGrid</span><span class="params">((imgWidth+threadsPerBlock.x<span class="number">-1</span>) / threadsPerBlock.x, \</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="params">                       (imgHeight+threadsPerBlock.y<span class="number">-1</span>) / threadsPerBlock.y)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">    start = clock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//启动内核</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">    gpuConvertGray&lt;&lt;&lt;blocksPerGrid, threadsPerBlock&gt;&gt;&gt;(input, output, imgHeight, imgWidth);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//执行一个内核是一个异步操作，因此需要同步统计时间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">    cudaDeviceSynchronize();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">end</span> = clock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"Cuda exec time is %.8f\n"</span>, (<span class="keyword">double</span>)(<span class="built_in">end</span>-start)/CLOCKS_PER_SEC);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">    cudaMemcpy(grayImg.data, output, imgHeight*imgWidth*<span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>), cudaMemcpyDeviceToHost);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">    cudaFree(input);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">cudaFree(output);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>6、<strong>NVCC编译器编译CUDA程序</strong></p><p>NVCC提供了简单方便的接口，能够很好的同时处理主机端和设备端代码。</p><ul><li><p>离线编译</p><p><em>分离CUDA程序中的主机端代码(host code)和设备端代码(device code)</em>  将设备端代码编译成一种虚拟汇编文件(名为PTX)，再接着编译成二进制代码(名为cubin) ，将主机端代码中含有”&lt;&lt;&lt;&gt;&gt;&gt;”的代码(即内核调用)替换为CUDA运行库中的函数调用代码。之后NVCC会借助其他编译器(如gcc)将主机端代码编译出来，主机端代码和设备端代码被编译好后，nvcc会将两段代码链接起来。</p></li><li><p>在线编译</p><p>PTX是一个虚拟汇编文件。其形式虽然很像汇编，但里面的每一条指令实际上是一个虚拟的指令，与机器码无法对应。需要编译器或设备驱动程序将其翻译成对应平台的汇编/机器码才能运行。</p><p>如果在编译过程中，NVCC不将设备端代码编译为cubin文件，即二进制代码，而是停在PTX代码上。设备驱动(device  driver)会负责在运行时，使用PTX代码生成二进制代码。这个过程被称作在线编译(JIT Compilation, Just-In-Time  Compilation)。</p><p>在线编译必然会使得程序启动的时间延长，不过设备驱动程序会自动缓存编译出来的二进制代码(也被称作compute cache)。</p></li></ul><p>7、<strong>CUDA C运行库</strong></p><p>7.1 初始化：CUDA运行库没有显式的初始化函数，在调用第一个函数时会自动初始化(设备和版本管理函数不行)。初始化时，会产生一个全局可见的设备上下文(device context)。主机端代码调用了<code>cudaDeviceReset()</code>函数，则会销毁掉这个上下文。注意，销毁的上下文是主机端正在操纵的设备。如要更换，需要使用<code>cudaSetDevice()</code>来进行切换。</p><p>7.2 设备内存：</p><p>CUDA运行库提供了函数以分配/释放设备端的内存(全局内存+常量内存+纹理内存)，以及与主机端内存传输数据。</p><ul><li><p>线性存储(linear memory)：在GPU上用40位的地址线寻址</p><p>线性内存可以用<code>cudaMalloc()</code>分配，用<code>cudaFree()</code>释放，用<code>cudaMemcpy()</code>复制数据，用<code>cudaMemset()</code>赋值。</p><p>对于2D或3D数组，可以使用<code>cudaMallocPitch()</code>和<code>cudaMalloc3D()</code>来分配内存。这两个函数会自动padding，以满足内存对齐的要求，提高内存读写效率。</p></li><li><p>CUDA arrays—与纹理内存有关</p></li></ul><p>在设备内存中定义全局变量，则需要使用使用<code>__constant__</code>或<code>__device__</code>来修饰，并使用<code>cudaMemcpyToSymbol()</code>和<code>cudaMemcpyFromSymbol()</code>来读写。</p><p>实际上，当使用<code>__constant__</code>关键字时，是申请了一块常量内存；而使用<code>__device__</code>时，是普通的全局内存。因此<code>__device__</code>申请的内存需要申请，而<code>__constant__</code>不用。不管是全局内存，还是常量内存，需要用带有<code>Symbol</code>的函数拷贝。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">__constant__ <span class="keyword">float</span> constData[<span class="number">256</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> data[<span class="number">256</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">cudaMemcpyToSymbol(&amp;constData, data, <span class="keyword">sizeof</span>(data));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">cudaMemcpyFromSymbol(&amp;data, constData, <span class="keyword">sizeof</span>(data));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">__device__ <span class="keyword">float</span> devData;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> value = <span class="number">3.14f</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">cudaMemcpyToSymbol(devData, &amp;value, <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">__device__ <span class="keyword">float</span>* devPtr;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span>* ptr;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">cudaMalloc(&amp;ptr, <span class="number">256</span>*<span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">cudaMemcpyToSymbol(devPtr, &amp;ptr, <span class="keyword">sizeof</span>(ptr));</span></pre></td></tr></table></figure><p>8、<strong>共享内存</strong></p><p>不管是全局变量还是局部变量，都需要使用<code>__shared__</code>来修饰。不过需要注意的是，即使定义为全局变量，共享内存依旧只能被同一线程块内的线程可见。但是注意，并不是什么时候都可以使用共享内存来获取加速的。例如内核函数计算出来结果后，如果这个结果只需要传输回主机端，而不需要再次被用到时，直接写回全局内存会比较快。如果先写回共享内存，再写回全局内存，反而会比较缓慢。一般来讲，当需要频繁读写，或是有原子操作时，使用共享内存替代全局内存，会取得比较大的增益。</p><p><strong>共享内存只能为线程块内的线程共享。如果需要整个线程网格中线程都能访问，则需要全局内存或常量内存。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//直方图统计</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">__shared__ <span class="keyword">unsigned</span> <span class="keyword">char</span> hist_shared[<span class="number">256</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">getGrayHistByCudaUsingSharedMem</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> * <span class="keyword">const</span> grayData,</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="params">                                               <span class="keyword">unsigned</span> <span class="keyword">int</span> * <span class="keyword">const</span> hist,</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="params">                                               uint imgheight,</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="params">                                               uint imgwidth)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>9、<strong>锁页内存</strong></p><p>锁页内存指的是主机端上不会被换出到虚拟内存(位于硬盘)上的内存。</p><p>锁页内存的分配与释放：在CUDA程序中，使用<code>cudaHostAlloc()</code>，可以分配锁页内存，使用<code>cudaFreeHost()</code>来释放锁页内存，或者使用<code>cudaHostRegister()</code>来将<code>malloc()</code>分配的内存指定为锁页内存。</p><p>10、<strong>合并写内存(Write-Combining Memory)</strong></p><p>11、<strong>异步并行执行</strong></p><ul><li><p>主机端/设备端并行：</p><ul><li>内核启动与执行</li><li>设备端内部传输数据</li><li>使用流或内存映射传输数据</li><li>设备端memset函数cudaMemset())</li></ul></li><li><p>内核并行执行</p><ul><li>计算能力2.x及以上的设备，支持多个内核函数同时执行。</li><li>执行多个内核函数，需要主机端不同的线程启动。如果一个线程依次启动多个内核，则这些内核会串行执行。同一线程的内核函数返回时会触发隐式的同步。</li><li>多个内核函数必须位于同一个CUDA上下文(CUDA context)上。不同CUDA上下文上的内核不能并行。</li></ul></li><li><p>数据传输和内核执行并行(需要使用锁页内存)</p><ul><li>一些设备支持数据传输(主机端/设备端、设备端/设备端)和内核执行并行，可通过检查<code>asyncEngineCount</code>来确认。</li></ul></li><li><p>数据传入核传出并行</p></li><li><p>流(stream)</p><p>可以通过<code>cudaStreamCreateWithPriority()</code>来在创建流时指定流的优先级。可以指定的优先级可由<code>cudaDeviceGetStreamPriorityRange()</code>来获得。</p><p>运行时，高优先级stream中的线程块不能打断正在执行的低优先级stream的线程块(即不是抢占式的)。但是当低优先级stream的线程块退出SM时，高优先级stream中的线程块会被优先调度进SM。</p><ul><li>在CUDA中，流(streams)指的是在GPU上一连串执行的命令。</li><li>不同的线程，可以向同一个流填入任务。</li><li>同一个流内的任务会按顺序执行。</li><li>同一设备上不同的流有可能并行，其执行顺序不会有保证。</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//流的创建和销毁</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">cudaStream_t stream[<span class="number">2</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    cudaStreamCreate(&amp;stream[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    cudaStreamDestroy(stream[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//当设备还在执行流中的任务，而用户调用cudaStreamDestroy()函数时，函数会立刻执行(不会阻塞)。之后，当流中的任务完成后，与流相关的资源会自动释放。</span></span></pre></td></tr></table></figure><p>12、<strong>显示同步(Explicit Synchronization)</strong></p><p><strong>cudaDeviceSynchronize():</strong>  直到<strong>所有线程</strong>向设备端的<strong>所有流</strong>的<strong>所有已送入指令</strong>完成，才会退出阻塞。</p><p><strong>cudaStreamSynchronize():</strong> 直到<strong>指定流</strong>的<strong>之前所有已送入指令</strong>完成，才会退出阻塞。</p><p><strong>cudaStreamWaitEvent():</strong> 需要stream和event作为输入参数。需要等待该函数等待的事件(Event)发生后，才能执行。</p><p>13、<strong>隐式同步(Implicit Synchronization)</strong></p><p>一般来讲，不同流内的命令可以并行。但是当任何一个流执行如下的命令时，情况例外，不能并行：</p><ul><li>锁页内存的分配</li><li>设备端内存分配  </li><li>设备端内存设置(memset) </li><li>设备内部拷贝 </li><li>NULL stream内的命令</li><li>L1 cache/共享内存空间的重新分配</li></ul><p>14、<strong>回调函数</strong></p><p>可以使用<code>cudaStreamAddCallback()</code>函数，向流中添加callback。该callback会在流中之前所有的任务完成后被调用。如果stream参数设为0，则代表之前的所有stream的任务执行完后就调用该callback。</p><p>回调函数和<code>cudaStreamWaitEvent()</code>一样，对于在加在callback之后的指令，必须等待callback<em>执行完成</em>后，才会继续执行。</p><p>回调函数中不能直接或间接的执行CUDA函数，否则会因为等待自己完成而造成死锁。</p><p>15、<strong>事件(Event)</strong></p><p>事件(Event)可以被压入流中以监视流的运行情况，或者用于精确计时。如果向stream 0压入事件，则当压入事件前向所有流压入的任务完成后，事件才被触发。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cudaEvent_t start, <span class="built_in">stop</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">cudaEventCreate(&amp;start);   <span class="comment">//创建</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">cudaEventCreate(&amp;<span class="built_in">stop</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">cudaEventDestroy(start);    <span class="comment">//销毁</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">cudaEventDestroy(<span class="built_in">stop</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算时间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">cudaEventRecord(start, <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    cudaMemcpyAsync(inputDev + i * <span class="built_in">size</span>, inputHost + i * <span class="built_in">size</span>, <span class="built_in">size</span>, cudaMemcpyHostToDevice, stream[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    MyKernel&lt;&lt;&lt;<span class="number">100</span>, <span class="number">512</span>, <span class="number">0</span>, stream[i]&gt;&gt;&gt;(outputDev + i * <span class="built_in">size</span>, inputDev + i * <span class="built_in">size</span>, <span class="built_in">size</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    cudaMemcpyAsync(outputHost + i * <span class="built_in">size</span>, outputDev + i * <span class="built_in">size</span>, <span class="built_in">size</span>, cudaMemcpyDeviceToHost, stream[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">cudaEventRecord(<span class="built_in">stop</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">cudaEventSynchronize(<span class="built_in">stop</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> elapsedTime;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">cudaEventElapsedTime(&amp;elapsedTime, start, <span class="built_in">stop</span>);</span></pre></td></tr></table></figure><p>16、<strong>多设备系统</strong></p><ul><li>设备枚举</li><li>设备选择</li><li>流和事件的执行情况<ul><li><strong>内核启动</strong>：如果将内核压入不属于当前设备的流中，则内核会启动失败。也就是说，如果要向一个流中压入内核，必须先切换到流所在的设备。</li><li><strong>内存拷贝</strong>：如果对一个不属于当前设备的流进行内存拷贝工作，内存拷贝会成功。</li><li><strong>cudaEventRecord()</strong>：必须现将设备上下文切换过去，再向流压入事件。</li><li><strong>cudaEventElapsedTime()</strong>：计算时间差前，必须先切换设备。</li><li><strong>cudaEventSynchronize() and cudaEventQuery()</strong>：即使处于不同的设备，事件同步和事件查询依然有效。</li><li><strong>cudaStreamWaitEvent()</strong>：比较特殊，即使函数输入的流和事件不在同一个设备上，也能成功执行。也就是说，可以让流等待另一个设备上(当然当前设备也可以)的事件。这个函数可以用作多个设备间的同步。</li></ul></li><li>内存的访问</li><li>(设备间)对等内存访问：计算能力2.0及以上的设备支持设备间对等内存访问，这意味着两个GPU之间的传输和访问可以不经过主机端中转，速度会有提升。</li><li>(设备间)对等内存访问：对等设备的地址是统一编址的，可以使用<code>cudaMemcpyPeer()、cudaMemcpyPeerAsync()、cudaMemcpy3DPeer、cudaMemcpy3DPeerAsync()</code>来进行直接拷贝。无需先拷贝会主机端内存，再转到另一块卡上。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//设备枚举</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> deviceCount;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">cudaGetDeviceCount(&amp;deviceCount);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> device;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(device=<span class="number">0</span>; device&lt;deviceCount; device++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    cudaDeviceProp deviceProp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    cudaGetDeviceProperties(&amp;deviceProp, device);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"Device %d has compute capability %d.%d.\n"</span>, device, deviceProp.major, deviceProp.minor);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//设备选择</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用cudaSetDevice()选择设备，当不选择时，默认使用设备0。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意，所有的内存分配、内核函数启动、流和事件的创建等，都是针对当前选择的设备的。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> <span class="built_in">size</span> = <span class="number">1024</span> * <span class="keyword">sizeof</span>(<span class="keyword">float</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">cudaSetDevice(<span class="number">0</span>);   <span class="comment">// Set device 0 as current</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span>* p0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">cudaMalloc(&amp;p0, <span class="built_in">size</span>);  <span class="comment">// Allocate memory on device 0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">MyKernel&lt;&lt;&lt;<span class="number">1000</span>, <span class="number">128</span>&gt;&gt;&gt;(p0);    <span class="comment">// Launch kernel on device 0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">cudaSetDevice(<span class="number">1</span>);   <span class="comment">// Set device 1 as current</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span>* p1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">cudaMalloc(&amp;p1, <span class="built_in">size</span>);  <span class="comment">// Allocate memory on device 1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">MyKernel&lt;&lt;&lt;<span class="number">1000</span>, <span class="number">128</span>&gt;&gt;&gt;(p1); <span class="comment">// Launch kernel on device 1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//设备间，对等内存拷贝</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">cudaSetDevice(<span class="number">0</span>);   <span class="comment">// Set device 0 as current</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span>* p0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> <span class="built_in">size</span> = <span class="number">1024</span> * <span class="keyword">sizeof</span>(<span class="keyword">float</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">cudaMalloc(&amp;p0, <span class="built_in">size</span>);  <span class="comment">// Allocate memory on device 0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">cudaSetDevice(<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span>* p1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">cudaMalloc(&amp;p1, <span class="built_in">size</span>);  <span class="comment">// Allocate memory on device 1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">cudaSetDevice(<span class="number">0</span>);       <span class="comment">// Set Device 0 as Current</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">MyKernel&lt;&lt;&lt;<span class="number">1000</span>, <span class="number">128</span>&gt;&gt;&gt;(p0);    <span class="comment">// Launch Kernel on Device 0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">cudaSetDevice(<span class="number">1</span>);               <span class="comment">// Set Device 1 as Current</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">cudaMemcpyPeer(p1, <span class="number">1</span>, p0, <span class="number">0</span>, <span class="built_in">size</span>); <span class="comment">// Copy p0 to p1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">MyKernel&lt;&lt;&lt;<span class="number">1000</span>, <span class="number">128</span>&gt;&gt;&gt;(p1);        <span class="comment">// Launch Kernel on Device 1</span></span></pre></td></tr></table></figure><p>如果使用的是NULL stream，如果拷贝的双方中的任何一方，在设备拷贝前有任务未完成，则拷贝会被阻塞，直至任务完成。*  只有拷贝结束后，两者的后续任务才能继续执行。</p><h4 id="二、性能优化"><a href="#二、性能优化" class="headerlink" title="二、性能优化"></a>二、性能优化</h4><p>性能优化的原则：</p><ol><li>最大化并行，以提升资源利用率</li><li>优化内存排布，以最大化内存吞吐</li><li>最大化指令吞吐</li></ol><p>性能分析工具：CUDA profiler</p><p><strong>应用级别并行</strong>： 尽可能让主机端、设备端、PCI-E总线并行工作。对此可以使用异步CUDA函数，以及流(Stream)来实现。</p><p>同步操作，以及内存的共享会影响程序的并行性。因此需要仔细设计算法流程，尽量减少同步和内存共享。</p><p><strong>设备级别同步：</strong>可以通过流的方式，尽可能的让多个内核并行，提升利用率。</p><p><strong>处理器级别并行：</strong>延迟(latency)指的是线程束(从上一个动作开始)到它处于ready状态的时钟数。 例如线程束先提交了一个内存访问请求，然后等了400个时钟周期，内存管理系统才返回数据，线程束可以继续执行。这400个时钟周期称为延迟。</p><p>当一个线程束发生延迟时，线程束调度器(warp  scheduler)会将其他处于ready状态的线程束调度到SP上。等到延迟结束后，再将该线程调度回SP继续执行。这样一来，前一个线程束的延迟，就被另一个线程束的执行所隐藏了。 这一过程被称作延迟的隐藏(hidden latency)。  </p><p>隐藏延迟是GPU编程的核心概念。由于GPU具有巨大的寄存器空间，线程的切换不存在损耗。因此，通过向GPU上分配足够多的线程，可以让这些线程延迟互相交错，以起到隐藏延迟的作用，提高硬件利用率。</p><p><strong>最大化内存吞吐：</strong>主要手段就是少用低带宽的内存。首先要尽可能减少主机端和设备端间的设备传输(PCI-E，特别慢)，其次要尽可能减少全局内存的读写(快于PCI-E，但是相对于片内内存来说，还是挺慢的)；尽可能的使用片内的内存(寄存器、cache、共享内存)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CUDA编程学习笔记&quot;&gt;&lt;a href=&quot;#CUDA编程学习笔记&quot; class=&quot;headerlink&quot; title=&quot;CUDA编程学习笔记&quot;&gt;&lt;/a&gt;CUDA编程学习笔记&lt;/h2&gt;&lt;p&gt;本笔记主要&lt;a href=&quot;https://face2ai.com/prog
      
    
    </summary>
    
    
      <category term="CUDA-Programmer" scheme="http://yoursite.com/categories/CUDA-Programmer/"/>
    
    
      <category term="CUDA-Programmer" scheme="http://yoursite.com/tags/CUDA-Programmer/"/>
    
  </entry>
  
  <entry>
    <title>CUDA-Programmer-Learn-Zero</title>
    <link href="http://yoursite.com/2021/07/03/CUDA-Programmer-Learn-Zero/"/>
    <id>http://yoursite.com/2021/07/03/CUDA-Programmer-Learn-Zero/</id>
    <published>2021-07-03T15:14:11.000Z</published>
    <updated>2021-07-03T15:16:39.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CUDA编程学习笔记"><a href="#CUDA编程学习笔记" class="headerlink" title="CUDA编程学习笔记"></a>CUDA编程学习笔记</h2><h4 id="一、CUDA编程模式的基本概念"><a href="#一、CUDA编程模式的基本概念" class="headerlink" title="一、CUDA编程模式的基本概念"></a>一、CUDA编程模式的基本概念</h4><p>CUDA是一种通用的异构并行计算平台和编程模型，你可以利用CUDA平台像在CPU上那样使用GPU来进行计算。</p><p>一般的CUDA(.cu)程序的执行步骤为：</p><ol><li>分配GPU显存</li><li>将待处理的数据从HOST内存拷贝到GPU的显存</li><li>调用核函数对存储在GPU显存中的数据进行处理</li><li>将结果从GPU显存拷贝到HOST内存</li><li>释放GPU显存</li></ol><h4 id="二、CUDA编程模式的两大重点"><a href="#二、CUDA编程模式的两大重点" class="headerlink" title="二、CUDA编程模式的两大重点"></a>二、CUDA编程模式的两大重点</h4><ol><li><p>通过层次结构来组织线程</p><p>1.1 线程的管理：<strong>线程网格(Grid)、线程块(Block)、线程束(Warp)和线程(Thread)</strong></p><p>1.2 一个内核启动所生成的所有线程称为一个网格，同一网格内的所有线程共享同一块全局内存空间。一个网格有多个线程块构成。一个线程块由一组线程构成</p><p>1.3 优势：合理的利用资源，优化性能</p></li><li><p>通过层次结构来组织内存</p><p>2.1 GPU的各级缓存和显存是可以通过程序进行控制的。具体有寄存器、共享内存、常量内存和全局内存等</p><p>2.2 <strong>寄存器</strong>是GPU上运行速度最快的内存空间，带宽通常为8TB/s,延时为一个时钟周期。<strong>共享内存</strong>是GPU上可受用户控制的一级缓存，带宽通常为1.5TB/s,延迟为1~32个时钟周期。<strong>全局内存</strong>是GPU中最大的，延迟最高且最常被使用的内存。</p><p><img src="/2021/07/03/CUDA-Programmer-Learn-Zero/1.jpg" alt="Cuda-memory-struct"></p></li></ol><h5 id="三、矩阵运算"><a href="#三、矩阵运算" class="headerlink" title="三、矩阵运算"></a>三、矩阵运算</h5><p>1、矩阵索引：在一个二维矩阵加法的核函数中，一个线程通常被分配一个数据元素来处理。首先要完成的任务是如何使用块和线程索引从全局内存中访问指定的数据。</p><p><strong>如何映射线程的Id到图像矩阵的坐标上？</strong></p><p>可以使用如下的公式将线程网格和线程块的索引映射到矩阵坐标上,称为坐标索引。</p><script type="math/tex; mode=display">ix = blockIdx.x * blockDim.x + threadIdx.x \\iy = blockIdx.y * blockDim.y + threadIdx.y</script><p>可以使用如下公式将矩阵坐标映射到全局内存的索引/存储单元上，称为全局索引(因为数据在内存的存储往往是一维的，需要地址映射)。</p><script type="math/tex; mode=display">idx = iy*nx + ix,\quad nx表示x维度上元素的个数</script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">sumMatUsingGPU</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* A, <span class="keyword">unsigned</span> <span class="keyword">char</span>* B, <span class="keyword">unsigned</span> <span class="keyword">char</span>* C, uint <span class="built_in">height</span>, uint <span class="built_in">width</span>)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ix = blockIdx.x * blockDim.x + threadIdx.x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> iy = blockIdy.y * blockDim.y + threadIdy.y;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> idx = iy * <span class="built_in">width</span> + ix;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span>(ix &lt; <span class="built_in">width</span> &amp;&amp; iy &lt; <span class="built_in">height</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        C[idx] = A[idx] + B[idx];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    uint <span class="built_in">height</span> = <span class="number">5</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    uint <span class="built_in">width</span> = <span class="number">20</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> byteSize = <span class="built_in">height</span> * <span class="built_in">width</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">size_t</span> nBytes = byteSize * <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">float</span> *h_A, *h_B, *h_C;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    h_A = (<span class="keyword">float</span> *)<span class="built_in">malloc</span>(nBytes);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    h_B = (<span class="keyword">float</span> *)<span class="built_in">malloc</span>(nBytes);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    h_C = (<span class="keyword">float</span> *)<span class="built_in">malloc</span>(nBytes);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>* A, *B, *C;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    cudaMalloc(&amp;A, byteSize*<span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    cudaMalloc(&amp;B, byteSize*<span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    cudaMalloc(&amp;C, byteSize*<span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    cudaMemcpy(A, h_A, nBytes, cudaMemcpyHostToDeviec);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    cudaMemcpy(B, h_B, nBytes, cudaMemcpyHostToDeviec);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    cudaMemcpy(C, h_C, nBytes, cudaMemcpyHostToDeviec);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    <span class="function">dim3 <span class="title">thread</span><span class="params">(<span class="built_in">height</span>/<span class="number">5</span>,<span class="built_in">width</span>/<span class="number">5</span>)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    <span class="function">dim3 <span class="title">block</span><span class="params">(<span class="built_in">height</span>, <span class="built_in">width</span>)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    sumMatUsingGPU&lt;&lt;&lt;block, thread&gt;&gt;&gt;(A, B, C, <span class="built_in">height</span>, <span class="built_in">width</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    cudaMemcpy(h_c, d_c, nBytes, cudaMemcpyDeviceToHost);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    cudaFree(A);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    cudaFree(B);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    cudaFree(C);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">nvcc -arch=sm_20 sumOnGPU.cu -o sumOnGPU</span></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>限定符</th><th>执行</th><th>调用</th><th>备注</th></tr></thead><tbody><tr><td><code>__global__</code></td><td>在设备端执行</td><td>可从主机、设备端调用</td><td>必须有一个void返回类型</td></tr><tr><td><code>__device__</code></td><td>在设备端执行</td><td>仅能从设备端调用</td><td></td></tr><tr><td><code>__host__</code></td><td>在主机端执行</td><td>仅能从主机端上调用</td><td>可以省略不写</td></tr></tbody></table></div><h4 id="四、如何提升并行能力"><a href="#四、如何提升并行能力" class="headerlink" title="四、如何提升并行能力"></a>四、如何提升并行能力</h4><ul><li>降低延迟，延迟是指操作从开始到结束所需要的时间，一般用微秒计算，延迟越低越好。</li><li>提高带宽，带宽是单位时间内处理的数据量，一般用MB/s或者GB/s表示。</li><li>提高吞吐量，吞吐量是单位时间内成功处理的运算数量，一般用gflops来表示（十亿次浮点计算），吞吐量和延迟有一定关系，都是反应计算速度的，<strong>一个是时间除以运算次数，得到的是单位次数用的时间–延迟，一个是运算次数除以时间，得到的是单位时间执行次数–吞吐量。</strong></li></ul><h4 id="五、计算机架构"><a href="#五、计算机架构" class="headerlink" title="五、计算机架构"></a>五、计算机架构</h4><p>划分不同计算机结构的方法有很多，广泛使用的一种被称为佛林分类法Flynn’s Taxonomy，<strong>根据指令和数据进入CPU的方式分类</strong>，分为以下四类：</p><ol><li>单指令单数据SISD（传统串行计算机，386）</li><li>单指令多数据SIMD（并行架构，比如向量机，所有核心指令唯一，但是数据不同，现在CPU基本都有这类的向量指令）</li><li>多指令单数据MISD（少见，多个指令围殴一个数据）</li><li>多指令多数据MIMD（并行架构，多核心，多指令，异步处理多个数据流，从而实现空间上的并行，MIMD多数情况下包含SIMD，就是MIMD有很多计算核，计算核支持SIMD）</li></ol><p><strong>根据内存划分</strong>，分为以下两类：</p><ol><li><p>分布式内存的多节点系统</p><p>通常叫做集群，就是一个机房好多机箱，每个机箱都有内存处理器电源等一些列硬件，通过网络互动，这样组成的就是分布式。</p></li><li><p>共享内存的多处理器系统</p><p>单个主板有多个处理器，他们共享相同的主板上的内存，内存寻址空间相同，通过PCIe和内存互动。</p><p><strong>多个处理器可以分多片处理器，和单片多核（众核many-core）</strong>，也就是有些主板上挂了好多片处理器，也有的是一个主板上就一个处理器，但是这个处理器里面有几百个核。<strong>GPU就属于众核系统</strong></p></li></ol><ul><li>CPU适合执行复杂的逻辑，比如多分支，其核心比较重（复杂）</li><li>GPU适合执行简单的逻辑，大量的数据计算，其吞吐量更高，但是核心比较轻（结构简单）</li></ul><h4 id="六、异构架构"><a href="#六、异构架构" class="headerlink" title="六、异构架构"></a>六、异构架构</h4><p>拥有不同计算机架构体系的硬件相互配合完成高吞吐量工作的系统。例如：CPU我们可以把它看做一个指挥者，主机端，host，而完成大量计算的GPU是我们的计算设备，device。下图来之谭升的知乎</p><p><img src="/2021/07/03/CUDA-Programmer-Learn-Zero/2.png" alt="Cuda-memory-struct"></p><ul><li>左图：一个四核CPU一般有四个ALU，ALU是完成逻辑计算的核心，也是我们平时说四核八核的核，控制单元，缓存也在片上，DRAM是内存，一般不在片上，CPU通过总线访问内存。</li><li>右图：GPU，绿色小方块是ALU，我们注意红色框内的部分SM，这一组ALU公用一个Control单元和Cache，<strong>这个部分相当于一个完整的多核CPU</strong>，但是<strong>不同的是ALU多了，control部分变小，可见计算能力提升了，控制能力减弱了，</strong>所以对于控制（逻辑）复杂的程序，一个GPU的SM是没办法和CPU比较的，但是对了逻辑简单，数据量大的任务，GPU更高效。注意，一个GPU有好多个SM，而且越来越多。</li></ul><p>CPU和GPU之间通过PCIe总线连接，用于传递指令和数据，这部分也是后面要讨论的性能瓶颈之一。</p><p>一个异构应用包含两种以上架构，所以分为主机端代码和设备端代码。主机代码在主机端运行，被<strong>编译成主机架构的机器码</strong>，设备端的在设备上执行，<strong>被编译成设备架构的机器码</strong>，所以主机端的机器码和设备端的机器码是隔离的，自己执行自己的，没办法交换执行。</p><p>主机端代码主要是<strong>控制设备，完成数据传输等控制类工作</strong>，设备端主要的任务就是<strong>计算</strong>。</p><p>NVIDIA目前有多种计算平台，每个平太针对不同的应用场景，比如Tegra用于嵌入式，Geforce是我们平时打游戏用到，Tesla主要用于计算。</p><p>衡量GPU计算能力的主要靠下面两种<strong>容量特征</strong>：<strong>CUDA核心数和内存大小</strong>。<strong>计算能力的性能指标</strong>：<strong>峰值计算能力和内存带宽</strong>。下图来之谭升的知乎</p><p><img src="/2021/07/03/CUDA-Programmer-Learn-Zero/3.png" alt="Cuda-memory-struct"></p><p>CPU和GPU线程的区别：</p><ol><li>CPU线程是重量级实体，操作系统交替执行线程，线程上下文切换花销很大。</li><li>GPU线程是轻量级的，GPU应用一般包含成千上万的线程，多数在排队状态，线程之间切换基本没有开销。</li><li>CPU的核被设计用来尽可能减少一个或两个线程运行时间的延迟，而GPU核则是大量线程，最大幅度提高吞吐量。</li></ol><p>CUDA nvcc编译器会自动分离你代码里面的不同部分，如图中主机代码用C写成，使用本地的C语言编译器编译，设备端代码，也就是核函数，用CUDA C编写，通过nvcc编译，链接阶段，在内核程序调用或者明显的GPU设备操作时，添加运行时库。</p><p>可以用到的工具：</p><ul><li>Nvidia Nsight集成开发环境</li><li>CUDA-GDB 命令行调试器</li><li>性能分析可视化工具</li><li>CUDA-MEMCHECK工具</li><li>GPU设备管理工具</li></ul><p><a href="https://face2ai.com/program-blog/#GPU%E7%BC%96%E7%A8%8B%EF%BC%88CUDA%EF%BC%89" target="_blank" rel="noopener">学习参考资料</a></p><p><a href="https://zhuanlan.zhihu.com/p/346910129" target="_blank" rel="noopener">总结性资料</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CUDA编程学习笔记&quot;&gt;&lt;a href=&quot;#CUDA编程学习笔记&quot; class=&quot;headerlink&quot; title=&quot;CUDA编程学习笔记&quot;&gt;&lt;/a&gt;CUDA编程学习笔记&lt;/h2&gt;&lt;h4 id=&quot;一、CUDA编程模式的基本概念&quot;&gt;&lt;a href=&quot;#一、CUDA
      
    
    </summary>
    
    
      <category term="CUDA Programmer" scheme="http://yoursite.com/categories/CUDA-Programmer/"/>
    
    
      <category term="CUDA Programmer" scheme="http://yoursite.com/tags/CUDA-Programmer/"/>
    
  </entry>
  
  <entry>
    <title>Principles-Of-Computer-Composition-Zero</title>
    <link href="http://yoursite.com/2021/07/03/Principles-Of-Computer-Composition-Zero/"/>
    <id>http://yoursite.com/2021/07/03/Principles-Of-Computer-Composition-Zero/</id>
    <published>2021-07-03T15:06:30.000Z</published>
    <updated>2021-07-03T15:13:35.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机组成原理部分知识学习笔记"><a href="#计算机组成原理部分知识学习笔记" class="headerlink" title="计算机组成原理部分知识学习笔记"></a>计算机组成原理部分知识学习笔记</h2><h4 id="一、线程绑定CPU核心的意义"><a href="#一、线程绑定CPU核心的意义" class="headerlink" title="一、线程绑定CPU核心的意义"></a>一、线程绑定CPU核心的意义</h4><p>在多核CPU中合理的调度线程在各个核上运行可以获得更高的性能。在多线程编程中，<strong>每个线程处理的任务优先级是不一样</strong>的，对于<strong>要求实时性比较高</strong>的线程或者是<strong>主线程</strong>，对于这种线程可以<strong>在创建线程时指定其绑定到某个CPU核</strong>上，以后这个核就专门处理该线程。这样可以使得该线程的任务可以得到较快的处理(<strong>因为减少了线程上下文在多核间切换时候的开销)</strong>，特别是和用户直接交互的任务，较短的响应时间可以提升用户的体验感。<br>原文链接：<a href="https://blog.csdn.net/weixin_42031299/article/details/114376419" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42031299/article/details/114376419</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE             <span class="comment">/* See feature_test_macros(7) */</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_setaffinity_np</span><span class="params">(<span class="keyword">pthread_t</span> thread, <span class="keyword">size_t</span> cpusetsize, <span class="keyword">const</span> <span class="keyword">cpu_set_t</span> *cpuset)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_getaffinity_np</span><span class="params">(<span class="keyword">pthread_t</span> thread, <span class="keyword">size_t</span> cpusetssoize, <span class="keyword">cpu_set_t</span> *cpuset)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译和链接的时候需要在Makefile中添加 -pthread动态so库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">原文链接：https:<span class="comment">//blog.csdn.net/bandaoyu/article/details/113700713</span></span></pre></td></tr></table></figure><h4 id="二、进程绑定CPU核心"><a href="#二、进程绑定CPU核心" class="headerlink" title="二、进程绑定CPU核心"></a>二、进程绑定CPU核心</h4><p>在Linux系统中，进程的调度切换是由内核自动完成的，在多核CPU上，进程有可能在不同的CPU核上来回切换执行，这对CPU的缓存不是很有利。</p><p><img src="/2021/07/03/Principles-Of-Computer-Composition-Zero/1.png" alt="CPU"></p><p>在多核CPU结构中，每个核心有各自的L1、L2缓存，而L3缓存是共用的。如果一个进程在核心间来回切换，各个<strong>核心的缓存命中率</strong>就会受到影响。相反如果进程不管如何调度，都始终可以在一个核心上执行，那么其数据的L1、L2 缓存的命中率可以显著提高。如下为绑定CPU的具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、使用 **CPU_**系列函数，必须定义 _GNU_SOURCE 宏，告诉编译器启用这些函数。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//2、首先声明一个 cpu_set_t，然后用 CPU_ZERO()初始化bit数据：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//The cpu_set_t data type is implemented as a bitset. </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">cpu_set_t</span> mask;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//将cpu_set_t结构体清零，Clears set, so that it contains no CPUs. </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">CPU_ZERO(&amp;mask);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//接下来把进程绑定到某几个CPU核心，这要用CPU_SET()来设置cpu_set_t中相应的bit位，比如想让进程只在核心1或核心5上执行：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">CPU_SET(<span class="number">1</span>, &amp;mask); <span class="comment">//Add CPU cpu to set. </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//最后用sched_setaffinity完成实际的绑定：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//sched_setaffinity(pid_t pid, unsigned int cpusetsize, cpu_set_t *mask) </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//该函数设置进程为pid的这个进程,让它运行在mask所设定的CPU上.如果pid的值为0,则表示指定的是当前进程,使当前进程运行在mask所设定的那些CPU上.第二个参数cpusetsize是mask所指定的数的长度.通常设定为sizeof(cpu_set_t).如果当前pid所指定的进程此时没有运行在mask所指定的任意一个CPU上,则该指定的进程会从其它CPU上迁移到mask的指定的一个CPU上运行. </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">sched_setaffinity(<span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">cpu_set_t</span>), &amp;mask);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//sched_getaffinity获取绑定关系</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//Remove CPU cpu from set. </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">CPU_CLR()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test to see if CPU cpu is a member of set.  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">CPU_ISSET()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//Return the number of CPUs in set.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">CPU_COUNT()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//The constant CPU_SETSIZE (currently 1024) specifies a value one greater than the maximum CPU number that can be stored in cpu_set_t. </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">num = sysconf(_SC_NPROCESSORS_CONF);  <span class="comment">//获取核数</span></span></pre></td></tr></table></figure><p>举例：假定有一台双核机器，这段程序我们起了20个进程，从0开始每个进程分配一个进程号（注意是这里值我们自己起的进程号，不是进程pid），奇数进程号绑定绑定在 Core 0上执行，偶数号的进程绑定在 Core 1上执行。<br>链接：<a href="https://www.jianshu.com/p/f59d7df06432" target="_blank" rel="noopener">https://www.jianshu.com/p/f59d7df06432</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _GNU_SOURCE</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sched.h&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> pid, <span class="keyword">int</span> core)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">cpu_set_t</span> mask;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">CPU_ZERO(&amp;mask);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">CPU_SET(core, &amp;mask);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    设置亲和性</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">sched_setaffinity(<span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">cpu_set_t</span>), &amp;mask);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">gettimeofday(&amp;tv, <span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="built_in">begin</span>=tv.tv_sec * <span class="number">1000</span> * <span class="number">1000</span> + tv.tv_usec;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> arr[N];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i != N; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        arr[i] = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">long</span> sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i != N; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        sum += arr[i];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    gettimeofday(&amp;tv, <span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">long</span> <span class="built_in">end</span> = tv.tv_sec * <span class="number">1000</span> * <span class="number">1000</span>+ tv.tv_usec;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>, <span class="built_in">end</span> - <span class="built_in">begin</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//for(int i=0; i&lt;2; i++)&#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//printf("%d, %d\n",pid,sched_getcpu());</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">20</span>; ++i)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">pid_t</span> pid = fork(); <span class="comment">//fork函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(pid==<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">run</span>(i, i%<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//Makefile编译和链接</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">g++ thread_bind_cpu.cpp -o thread_bind_cpu</span></pre></td></tr></table></figure><p>测试的部分结果，得出绑定对应的CPU对计算性能有一定的提升。</p><div class="table-container"><table><thead><tr><th>次数</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>绑CPU核</td><td>849/us</td><td>838/us</td><td>835/us</td><td>818/us</td><td>834/us</td><td>819/us</td><td>838/us</td><td>819/us</td><td>841/us</td><td>823/us</td></tr><tr><td>不绑定核</td><td>868/us</td><td>903/us</td><td>943/us</td><td>918/us</td><td>954/us</td><td>981/us</td><td>985/us</td><td>987/us</td><td>1025/us</td><td>960/us</td></tr></tbody></table></div><p><a href="https://linux.die.net/man/3/cpu_set" target="_blank" rel="noopener">cpu_set_t的参考链接</a>  | <a href="https://linux.die.net/man/2/sched_setaffinity" target="_blank" rel="noopener">sched_setaffinity的参考链接</a>  </p><p><strong>Linux中的fork()函数</strong></p><p><strong>一个进程</strong>，<strong>包括代码、数据和分配给进程的资源</strong>。fork（）函数通过系统调用创建一个与原来进程几乎完全相同的进程，也就是两个进程可以做完全相同的事。一个进程调用fork（）函数后，系统先给新的进程分配资源，例如存储数据和代码的空间。然后把原来的进程的所有值都复制到新的新进程中，只有少数值与原来的进程的值不同。相当于克隆了一个自己。在<strong>fork函数执行完毕后</strong>，<strong>如果创建新进程成功</strong>，<strong>则出现两个进程，一个是子进程，一个是父进程</strong>。<strong>在子进程中，fork函数返回0，在父进程中，fork返回新创建子进程的进程ID</strong>。我们可以通过fork返回的值来判断当前进程是子进程还是父进程。用大神的话说“其实就相当于链表，进程形成了链表，父进程的fpid(p 意味point)指向子进程的进程id, 因为子进程没有子进程，所以其fpid为0。</p><p>fork出错可能有两种原因：1、当前的进程数已经达到了系统规定的上限，这时errno的值被设置为EAGAIN。2、系统内存不足，这时errno的值被设置为ENOMEM。</p><p>创建新进程成功后，系统中出现两个基本完全相同的进程，这两个进程<strong>执行没有固定的先后顺序</strong>，哪个进程先执行要看系统的进程调度策略。 <strong>每个进程都有一个独特（互不相同）的进程标识符（process ID），可以通过getpid（）函数获得</strong>，还有一个记录父进程pid的变量，可以通过getppid（）函数获得变量的值。</p><p><strong>注意：</strong> <strong>fork()不是从#include处开始复制代码的</strong>，这是因为fork是把进程当前的情况拷贝一份，执行fork时，进程已经执行完了int count=0;fork只拷贝下一个要执行的代码到新的进程。</p><p><a href="https://www.cnblogs.com/dongguolei/p/8086346.html" target="_blank" rel="noopener">原文链接</a></p><h4 id="三、对上面一、二的补充"><a href="#三、对上面一、二的补充" class="headerlink" title="三、对上面一、二的补充"></a>三、对上面一、二的补充</h4><p>1、查看绑定情况</p><p>查看进程的绑定核情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">taskset -p pid</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; pid xxx<span class="string">'s current affinity mask: 6 //6的二进制表示为110,则表示该pid在cpu1和cpu2上运行，从0开始计数</span></span></span></pre></td></tr></table></figure><p>2、程序启动时绑定</p><p>3、程序启动后绑定</p><p>4、查看cpu的核数</p><p>使用<code>cat /proc/cpuinfo</code>查看cpu信息: processor指明第几个cpu处理器，cpu cores指明每个处理器的核数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sysconf</span><span class="params">(_SC_NPROCESSORS_CONF)</span></span>;<span class="comment">/* 返回系统可以使用的核数，但是其值会包括系统中禁用的核的数目，因 此该值并不代表当前系统中可用的核数 */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sysconf</span><span class="params">(_SC_NPROCESSORS_ONLN)</span></span>;<span class="comment">/* 返回值真正的代表了系统当前可用的核数 */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 以下两个函数与上述类似 */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sysinfo.h&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_nprocs_conf</span> <span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">/* 可用核数 */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_nprocs</span> <span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">/* 真正的反映了当前可用核数 */</span></span></pre></td></tr></table></figure><p>原文链接：<a href="https://blog.csdn.net/bandaoyu/article/details/113700713" target="_blank" rel="noopener">https://blog.csdn.net/bandaoyu/article/details/113700713</a></p><h4 id="四、简述Opaque-不透明类型"><a href="#四、简述Opaque-不透明类型" class="headerlink" title="四、简述Opaque(不透明类型)"></a>四、简述Opaque(不透明类型)</h4><p>在计算机科学中，<strong>不透明数据类型</strong>(opaque is a data type)是其具体<strong>数据结构未在接口中定义</strong>的数据类型。 这会<strong>强制隐藏信息</strong>，因为<strong>它的值</strong>只能<strong>通过调用有权访问</strong>缺失信息<strong>的子例程</strong>来操作。 类型的<strong>具体表示对其用户是隐藏的</strong>，<strong>可见的实现是不完整的</strong>。 <strong>如果</strong>表示可见的数据类型称为透明，<strong>否则</strong>称为不透明类型。 不透明数据类型经常用于实现抽象数据类型。 </p><p>不透明数据类型的<strong>典型示例</strong>包括操作系统向应用软件提供的资源句柄。 例如，线程的 POSIX 标准定义了一个基于许多不透明类型的应用程序编程接口，这些类型代表线程或同步原语，如<strong>互斥锁或条件变量</strong>。</p><p><a href="https://en.wikipedia.org/wiki/Opaque_data_type" target="_blank" rel="noopener">参考Wiki</a></p><h4 id="五、缓存相关学习笔记"><a href="#五、缓存相关学习笔记" class="headerlink" title="五、缓存相关学习笔记"></a>五、缓存相关学习笔记</h4><p>主要参考来自于<a href="https://www.cnblogs.com/ricks/p/12400900.html" target="_blank" rel="noopener">此</a></p><h5 id="1、基础知识："><a href="#1、基础知识：" class="headerlink" title="1、基础知识："></a>1、基础知识：</h5><p>现在的CPU多核技术，都会有几级缓存，老的CPU会有两级内存（L1和L2），新的CPU会有三级内存（L1，L2，L3 ），如下图所示：</p><p><img src="/2021/07/03/Principles-Of-Computer-Composition-Zero/2.png" alt="cache-architecture"></p><p>其中：</p><ul><li>L1缓分成两种，一种是指令缓存，一种是数据缓存。L2缓存和L3缓存不分指令和数据。</li><li>L1和L2缓存在每一个CPU核中，L3则是所有CPU核心共享的内存。</li><li>L1、L2、L3的越离CPU近就越小，速度也越快，越离CPU远，速度也越慢。</li></ul><p>再往后面就是内存，内存的后面就是硬盘，如下为各级的存取速度：</p><ul><li>L1 的存取速度：<strong>4 个CPU时钟周期</strong></li><li>L2 的存取速度： <strong>11 个CPU时钟周期</strong></li><li>L3 的存取速度：<strong>39 个CPU时钟周期</strong></li><li>RAM内存的存取速度<strong>：107 个CPU时钟周期</strong></li></ul><p>数据就从内存向上，先到L3，再到L2，再到L1，最后到寄存器进行CPU计算。为什么会设计成三层？这里有下面几个方面的考虑：</p><ul><li>一个方面是物理速度，如果要更大的容量就需要更多的晶体管，除了芯片的体积会变大，更重要的是大量的晶体管会导致速度下降，因为访问速度和要访问的晶体管所在的位置成反比，也就是当信号路径变长时，通信速度会变慢。这部分是物理问题。</li><li>另外一个问题是，多核技术中，数据的状态需要在多个CPU中进行同步，并且，我们可以看到，cache和RAM的速度差距太大，所以，多级不同尺寸的缓存有利于提高整体的性能。</li></ul><p>同时会产生两个比较重要的问题：</p><ul><li>一个是比较简单的缓存的命中率的问题。</li><li>另一个是比较复杂的缓存更新的一致性问题。</li></ul><h5 id="2、缓存命中-计算机组成原理"><a href="#2、缓存命中-计算机组成原理" class="headerlink" title="2、缓存命中(计算机组成原理)"></a>2、缓存命中(计算机组成原理)</h5><p>缓存基本上来说就是把后面的数据加载到离自己近的地方，对于CPU来说，它是不会一个字节一个字节的加载的，因为这非常没有效率，<strong>一般来说都是要一块一块的加载的</strong>，对于这样的一块一块的数据单位，术语叫<strong>“Cache Line”</strong>，一般来说，一个主流的CPU的Cache Line 是 64  Bytes（也有的CPU用32Bytes和128Bytes），64Bytes也就是16个32位的整型，这就是CPU从内存中捞数据上来的最小数据单位。</p><p><strong>比如：</strong>Cache Line是最小单位（64Bytes），所以先把Cache分成多个Cache Line，比如：L1有32KB，那么，32KB/64B = 512 个 Cache Line。</p><p>一方面，缓存需要把内存里的数据放到放进来，英文叫 <strong>CPU  Associativity</strong>。Cache的数据<strong>放置的策略</strong>决定了内存中的数据块会拷贝到CPU  Cache中的哪个位置上，因为Cache的大小远远小于内存，所以，需要有一种<strong>地址关联</strong>的算法，能够让内存中的数据可以被映射到Cache中来。</p><p>基本上来说，会有如下的一些方法：</p><ul><li>一种方法是，任何一个内存地址的数据可以被缓存在任何一个Cache Line里，这种方法是最灵活的，<strong>但是</strong>，如果我们要知道一个内存是否存在于Cache中，我们就需要进行O(n)复杂度的Cache遍历，这是很没有效率的。<strong>（全相联方式）</strong></li><li>另一种方法，为了降低缓存搜索算法，我们需要使用像Hash Table这样的数据结构，最简单的hash table就是做“求模运算”，比如：我们的L1 Cache有512个Cache Line，那么，公式：<code>（内存地址 mod 512）* 64</code> 就可以直接找到所在的Cache地址的偏移了。<strong>但是</strong>，这样的方式需要我们的程序对内存地址的访问要非常地平均，不然<strong>冲突就会非常严重</strong>。<strong>（直接相联方式）</strong></li><li>为了避免上述的两种方案的问题，于是就要容忍一定的hash冲突，也就出现了 <strong>N-Way 关联</strong>。也就是把连续的N个Cache Line绑成一组，然后，先把找到相关的组，然后再在这个组内找到相关的Cache Line。这叫 <strong>Set Associativity</strong>。<strong>但是</strong>，但是实现难度和造价要比直接映像方式高。<strong>（组相联映像方式）</strong></li></ul><p><img src="/2021/07/03/Principles-Of-Computer-Composition-Zero/3.png" alt="cache-associative-fill-both"></p><p>N-ways  Set-Associative，这个n=1，就是直接映射；n=cache大小，就是全相关映射。我们从上面知道两者都不好，而n最好取中间某个值。那么n到底该选几呢？这比较复杂，和Cache的速度和大小、内存的速度、主频等等很多都相关，在很多情况下都是个经验值，也是大量pre-silicon实验的结果。</p><p>TLB可以看作页表的Cache，<strong>CPU每次转换地址都会查看TLB</strong>，<strong>如果有了就不用去取内存页表了</strong>。<strong>那么TLB和Cache有什么关系呢？</strong>可以说TLB命中是Cache命中的基本条件。TLB不命中，会更新TLB项，这个代价非常大，Cache命中的好处基本都没有了。<strong>在TLB命中的情况下，物理地址才能够被选出，Cache的命中与否才能够达成。</strong>可以看出，只有在TLB命中的前提下，才有可能获得虚拟地址对应的物理地址，知道了物理地址才能得知Cache是否命中。<a href="https://zhuanlan.zhihu.com/p/31859105" target="_blank" rel="noopener">段落参考</a></p><p>在知道物理地址的情况下，如何分析Cache是否命中？</p><p>如下图：根据物理页地址的24位找到对应Cache中的组，也即Directory。然后根据6bits(2<sup>6</sup>=64)的Set Index查找一路中的Cache Line索引(因为一路中包含多个Cache Line)，6bits(2<sup>6</sup>=64)的Offset Into cache line表示在Cache Line 里的偏移量。</p><p><img src="/2021/07/03/Principles-Of-Computer-Composition-Zero/4.png" alt="cache-associative-fill-both"></p><p>（图片来自《<a href="https://manybutfinite.com/post/intel-cpu-caches/" target="_blank" rel="noopener">Cache: a place for concealment and safekeeping</a>》）</p><p>上面的图说明L1Cache可以映射到36bits的内存地址，一共2<sup>36</sup>=64GB的内存。当CPU要访问一个内存的时候，通过这个内存的前24bits 和中间的6bits可以直接定位相应的Cache Line。这里的64GB是处理器可以寻址 64GB 的物理 RAM。同时由于页面一般为4KB。所以需要寻址的位为 64GB / 4KB =2<sup>24</sup>，因此我们的标签需要 24 位 。</p><p>此外，当有数据没有命中缓存的时候，CPU就会以最小为Cache  Line的单元向内存更新数据。当然，CPU并不一定只是更新64Bytes，因为访问主存实在是太慢了，所以，一般都会多更新一些。好的CPU会有一些预测的技术，如果找到一种pattern的话，就会预先加载更多的内存，包括指令也可以预加载。这叫 Prefetching 技术 （参看，Wikipedia 的 <a href="https://en.wikipedia.org/wiki/Cache_prefetching" target="_blank" rel="noopener">Cache Prefetching</a> 和 <a href="http://compas.cs.stonybrook.edu/~nhonarmand/courses/sp16/cse502/slides/13-prefetch.pdf" target="_blank" rel="noopener">纽约州立大学的 Memory Prefetching</a>）。比如，你在for-loop访问一个连续的数组，你的步长是一个固定的数，内存就可以做到prefetching。<a href="https://www.cnblogs.com/ricks/p/12400900.html" target="_blank" rel="noopener">段落参考</a></p><h4 id="六、缓存的一致性"><a href="#六、缓存的一致性" class="headerlink" title="六、缓存的一致性"></a>六、缓存的一致性</h4><p>对于主流的CPU来说，缓存的写操作基本上是两种策略：</p><ul><li>一种是Write Back，写操作只要在cache上，然后再flush到内存上。</li><li>一种是Write Through，写操作同时写到cache和内存上。</li></ul><p>为了提高写的性能，一般来说，主流的CPU（如：Intel Core i7/i9）采用的是Write Back的策略，因为直接写内存实在是太慢了。<strong>现在问题来了</strong>，如果有一个<strong>数据 x 在 CPU 第0核的缓存上被更新了</strong>，那么<strong>其它CPU核上对于这个数据 x 的值也要被更新</strong>，这就是缓存一致性的问题。（当然，对于我们上层的程序我们不用关心CPU多个核的缓存是怎么同步的，这对上层的代码来说都是透明的）。</p><p>一般来说，在CPU硬件上的解决方法有两种方法：</p><ul><li><strong>Directory 协议：</strong>这种方法的典型实现是要设计一个集中式控制器，它是主存储器控制器的一部分。其中有一个目录存储在主存储器中，其中包含有关各种本地缓存内容的全局状态信息。当单个CPU Cache 发出读写请求时，这个集中式控制器会检查并发出必要的命令，以在主存和CPU Cache之间或在CPU  Cache自身之间进行数据同步和传输。</li><li><strong>Snoopy 协议：</strong>这种协议更像是一种数据通知的总线型的技术。CPU Cache通过这个协议可以识别其它Cache上的数据状态。如果有数据共享的话，可以通过广播机制将共享数据的状态通知给其它CPU Cache。这个协议要求每个CPU Cache 都可以<strong>窥探</strong>数据事件的通知并做出相应的反应。<a href="https://www.cnblogs.com/ricks/p/12400900.html" target="_blank" rel="noopener">段落参考</a></li></ul><h4 id="七、程序虚拟地址和实际物理地址的映射"><a href="#七、程序虚拟地址和实际物理地址的映射" class="headerlink" title="七、程序虚拟地址和实际物理地址的映射"></a>七、程序虚拟地址和实际物理地址的映射</h4><p>指令里面的地址是程序空间（虚拟空间）的虚拟地址（程序地址）。所以当 程序真正运行起来的时候，每个虚拟地址必然要对应着一个物理地址（实际存在）。</p><p>分页内存管理机制将虚拟内存和物理内存都分成大小一样大的部分，我们称为页，然后按页进行内存分配。一般页的大小有4KB、8KB、16KB。在该管理机制下内存分配单位化而且不需要空闲连续在一起即可使用。<strong>虚拟地址的页号表示和物理地址页号表示是从0开始的</strong>。</p><p><strong>内存的两种视角</strong></p><ul><li>虚拟地址(线性地址)，进程看到的内存地址称为虚拟地址，他们不对应任何物理实体，每个进程有自己的地址空间。</li><li>物理地址，内存系统看到的地址称为物理地址，他们用实际的地址去查找和存储内容。</li></ul><p><strong>为什么？</strong>如果运行多个进程，直接将内容映射到物理地址的话可能会存在访问冲突。所以需要相对地址，进而保护进行。因此，在早期的时候设置了地址空间，利用<strong>动态重定位技术</strong>用两个寄存器分别为<strong>基址寄存器</strong>和<strong>界限寄存器</strong>，将进程的起始地址放到基址寄存器中，进程占据内存的长度存到界限寄存器中，这样就相当于为进程划清了界限。<strong>(要求为内存空间连续)。</strong>但是会遇到什么问题？当进程很多的时候，内存中放不下，那么只能利用<strong>内存的交换技术(swapping)</strong>将一部分<strong>进程</strong>暂时放到磁盘中，但是在交换的过程中会出现大量的<strong>内存空洞</strong>，所以需要将内存中的<strong>进程向低地址移动</strong>，以便留出更大的空间，称为<strong>内存紧缩</strong>。但是会耗费大量的CPU时间。<strong>一个更好的方法</strong>，将进程所需的内存切成一个个小块，比如4KB大小，称为一页，其中只有一部分的页在内存中，当cpu需要方位的地址不在内存中时，可以从磁盘加载对应的部分，同时内存不够时也可以把长期不访问的页面保存到磁盘中，然后删除内存中的部分。这种做法称为虚拟内存。</p><p>内存如何管理？查看是否有足够大的内存能够满足进程的要求</p><ol><li>位图：将内存划分为单位小区域，每个区域由0/1表示状态（空闲/占用）。当一个进程需要加载内存是，需要扫描连续为0的空闲区域，作为进程的内存区域。缺点查找比较耗时。</li><li>链表：为了规避位图耗时的问题，每一块连续的区域分别由一个节点表示，节点有4个值，第一个若为P，则表示这块区域是有进程的，H则代表空闲区。第二个值指向对应区域的起始位置，第三个值对应的是区域的长度，第四个值是个指针指向下一个节点。进程加载内存是扫描第一个值，称为首次适配算法。此外，还是有最佳适配算法等。</li></ol><p>介绍一下整个地址映射的关系：</p><p>首先程序对应的是逻辑地址，其中包括代码、数据、堆(从低地址往高地址寻址)、栈(从高地址往低地址寻址)。例如：栈地址需要根据逻辑地址(虚拟地址)selector:offset，根据selector从GDT(Global Descriptor Table)中获取段描述符其中包含Base Address，结合逻辑地址中的offset能够计算出线性地址。最后，根据线性地址(22-31位)，从CR3寄存器中获取到页目录的地址(Base Address)，线性地址中记载了页目录的offset，加上offset得到页表的Base Address，加上线性地址中(12-22位)的offset，得到物理地址中的基地址，加上偏移量(线性地址)中的(0-12位)得到物理地址中的第几页。</p><p>程序虚拟空间中的虚拟地址<strong>通过分段机制</strong>得到虚拟地址/线性地址，线性地址<strong>通过分页机制</strong>（需要用到页表(page table)，每次地址转换都要查看内存页表太浪费时间了。现代计算机为了加速这一过程，转译后备缓冲区TLB）得到真实的物理地址。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;计算机组成原理部分知识学习笔记&quot;&gt;&lt;a href=&quot;#计算机组成原理部分知识学习笔记&quot; class=&quot;headerlink&quot; title=&quot;计算机组成原理部分知识学习笔记&quot;&gt;&lt;/a&gt;计算机组成原理部分知识学习笔记&lt;/h2&gt;&lt;h4 id=&quot;一、线程绑定CPU核心的意
      
    
    </summary>
    
    
      <category term="Principles-Of-Computer-Composition" scheme="http://yoursite.com/categories/Principles-Of-Computer-Composition/"/>
    
    
      <category term="Principles-Of-Computer-Composition" scheme="http://yoursite.com/tags/Principles-Of-Computer-Composition/"/>
    
  </entry>
  
  <entry>
    <title>Image-Process-There-Plus</title>
    <link href="http://yoursite.com/2021/06/27/Image-Process-There-Plus/"/>
    <id>http://yoursite.com/2021/06/27/Image-Process-There-Plus/</id>
    <published>2021-06-27T02:06:52.000Z</published>
    <updated>2021-06-27T02:29:29.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像处理学习"><a href="#图像处理学习" class="headerlink" title="图像处理学习"></a>图像处理学习</h2><h3 id="频率域滤波"><a href="#频率域滤波" class="headerlink" title="频率域滤波"></a>频率域滤波</h3><h4 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h4><h5 id="1、复数"><a href="#1、复数" class="headerlink" title="1、复数"></a>1、复数</h5><p>复数C的定义如下：</p><script type="math/tex; mode=display">C=R=jI, \quad 其中，R和I是实数，j是一个等于-1的平方根的虚数。即j=\sqrt{-1}</script><p>R表示复数的实部，I是复数的虚部。实数是I=0的复数的子集。一个复数C的共轭表示为C<sup>*</sup>, 其定义是：</p><script type="math/tex; mode=display">C^*=R-jI</script><p>复数从几何的角度可以被看做是平面(称为复平面)上的一个点，其横坐标是实轴(R的值)，其纵坐标是虚轴(I的值)。复数R+jI可以看成是复平面直角坐标系统中的点（R，I）。</p><p>下图是生成正弦波的图像：</p><p><img src="/2021/06/27/Image-Process-There-Plus/1.png" alt="Image-Process-Three-Plus"></p><p><img src="/2021/06/27/Image-Process-There-Plus/2.png" alt="Image-Process-Three-Plus"></p><p>由上图可知，极坐标下的复数表示为：</p><script type="math/tex; mode=display">C=R+jI=\sqrt{R^2+I^2}\left(\frac{R}{\sqrt{R^2+I^2}}+\frac{I}{\sqrt{R^2+I^2}}j\right)</script><script type="math/tex; mode=display">\because\frac{R}{\sqrt{R^2+I^2}}=\cos\theta,\frac{I}{\sqrt{R^2+I^2}}=\sin\theta</script><script type="math/tex; mode=display">\therefore C=|C|(\cos\theta+j\sin\theta), |C|=\sqrt{R^2+I^2}\quad(模长)</script><script type="math/tex; mode=display">\theta为幅角，\tan\theta=(I/R),\theta=\arctan(I/R),\theta\in[-\pi/2,\pi/2]</script><p>然后由于R和I可正、可负，所以&theta;&in;[-&pi;, &pi;]。</p><p><strong>欧拉公式：</strong></p><script type="math/tex; mode=display">e^{i\theta}=\cos\theta+i\sin\theta,\quad(\theta\in R)</script><p><strong>为什么欧拉公式能用上式表示？</strong></p><p>在实数域下，有些函数的泰勒公式如下:</p><script type="math/tex; mode=display">e^x=1+x+\frac{1}{2!}x^2+\frac{1}{3!}x^3+...</script><script type="math/tex; mode=display">\sin x=x-\frac{1}{3!}x^3+\frac{1}{5!}s^5+...</script><script type="math/tex; mode=display">\cos x=1-\frac{1}{2!}x^2+\frac{1}{4!}x^4+...</script><p>这三个公式分为为省略余项的麦克劳林公式，中麦克劳林公式为泰勒公式的一种特殊形式。</p><p>在e<sup>x</sup>的展开式中把x换成&pm;(ix)</p><script type="math/tex; mode=display">(\pm i)^2=-1,(\pm i)^3=\mp i,(\pm i)^4=1......</script><script type="math/tex; mode=display">e^{\pm ix}=1\pm \frac{ix}{1!}-\frac{x^2}{2!}\mp\frac{ix^3}{3!}+\frac{x^4}{4!}.....=(1-\frac{x^2}{2!}+......)\pm i(x-\frac{x^3}{3!}......)</script><script type="math/tex; mode=display">\therefore e^{\pm ix}=\cos x \pm i\sin x</script><p>由此：</p><script type="math/tex; mode=display">e^{ix}=\cos x+i\sin x, e^{-ix}=\cos x-i\sin x</script><script type="math/tex; mode=display">\sin x=\frac{e^{ix}-e^{-ix}}{2i},\cos x=\frac{e^{ix}+e^{-ix}}{2}</script><script type="math/tex; mode=display">e^{ix}=\cos x+i\sin x,令x=\pi,e^{ix}+1=0</script><p>复函数：变量u的复函数F(u)可表示为F(u)=R(u)+jI(u)，其中R(u)表示实分量函数，I(u)表示虚分量函数。复共轭函数是：</p><script type="math/tex; mode=display">F^*(U) = R(U)-jI(u),幅值是|F(u)|=\sqrt{R(u)^2+I(u)^2},角度是:\theta=\arctan[I(u)/R(u)]</script><h4 id="二、傅里叶级数"><a href="#二、傅里叶级数" class="headerlink" title="二、傅里叶级数"></a>二、傅里叶级数</h4><p>具有周期T的连续变量t的周期函数f(t)可以被描述为乘以适当系数的正弦和余弦和。该和称为傅里叶级数，具有如下形式：</p><script type="math/tex; mode=display">f(t)=\sum^{\infty}_{n=-\infty}c_ne^{j\frac{2\pi n}{T}t},其中，c_n=\frac{1}{T}\int^{T/2}_{-T/2}f(t)e^{-j\frac{2\pi n}{T}t}dt,n=0,\pm1,\pm2...\quad是系数</script><p><strong>由来：</strong>首先，周期函数是客观世界中周期运动的数学表述，如物体挂在弹簧上作简谐振动、单摆振动、无线电电子振荡器的电子振荡等，大多可以表述为如下的三角函数：</p><script type="math/tex; mode=display">f(t)=A\sin(\omega t+\psi)</script><p>这里t表示时间，A表示振幅，&omega;为角频率，&psi;为初相(与考察时设置原点位置有关，可以理解为一个常量)。</p><p>世界上许多周期信号并非正弦函数那么简单，如方波、三角波等。为了简化表示，希望用一系列三角函数来表达复杂的周期函数。所以有下式：</p><script type="math/tex; mode=display">f(t)=A_0+\sum^{\infty}_{n=1}A_n\sin(n\omega t+\psi_n)</script><p>傅里叶是想把一个周期函数表示成许多正弦函数的线性叠加，这许许多多的正弦函数有着不同的幅度分量A<sub>n</sub>、有不同的周期或频率n，有不同的初相角&psi;<sub>n</sub>，还有一个常数项A<sub>0</sub>。n从1到无穷，是一个无穷级数。</p><p><strong>这里强调一下，傅里叶级数中对不同频率的波有一个要求就是给定一个初始的频率&omega;<sub>0</sub>，之后的角频率必须是&omega;<sub>0</sub>的整数倍，这也是离散傅里叶变换中角频率取值的原则。</strong></p><p> 要求f(t)的表达式，需要求各项系数，所以对上式做变换：</p><script type="math/tex; mode=display">A_n\sin(n\omega t+\psi_n)=A_n\sin\psi_n\cos(n\omega t)+A_n\cos\psi_n\sin(n\omega_nt)</script><p>上式由下面的三角公式得出：</p><script type="math/tex; mode=display">\sin(\alpha\pm\beta)=\sin\alpha\cos\beta\pm\cos\alpha\sin\beta</script><p>记下式为常数项：</p><script type="math/tex; mode=display">a_n=A_n\cdot\sin\psi_n, b_n=A_n\cdot\cos\psi_n</script><p>则：</p><script type="math/tex; mode=display">f(t)=A_0+\sum^{\infty}_{n=1}A_n\sin(n\omega t+\psi_n)=A_0+\sum^{\infty}_{n=1}[a_n\cos(n\omega t)+b_n\sin(n\omega t)]</script><p>从上式可以看出，只需要求解A<sub>0</sub>，a<sub>n</sub>，b<sub>n</sub>的值即可。</p><p>由线性代数中已知空间中的一组正交基，那么空间中的任意向量表示为这组基的线性组合：</p><script type="math/tex; mode=display">v=x_1q_q+x_2q_2+...+x_nq_n,矩阵形式为：V=QX</script><p>要求x<sub>1</sub>,直接用q<sub>1</sub>点乘v的线性组合：</p><script type="math/tex; mode=display">q_1^Tv=x_1q_1^Tq_1+x_2q_1^Tq_2+...+x_nq_1^Tq_n=x_1q_1^Tq_1+0+...+0=x_1</script><p>则，</p><script type="math/tex; mode=display">x_i=q_i^Tv</script><p>那么要求上式中的系数a<sub>0</sub>,a<sub>n</sub>,b<sub>n</sub>就需要寻找一组正交基，并与正弦、余弦函数有联系的，可以利用三角函数的正交性，选择下面的三角函数作为空间中的基：</p><script type="math/tex; mode=display">\{1,\sin x, \cos x, \sin 2x, \cos 2x,...,\},互相正交，且线性无关</script><p><strong>利用三角函数的正交性：</strong></p><p>对下式在区间[-&pi;, &pi;]积分,</p><script type="math/tex; mode=display">f(t)=A_0+\sum^{\infty}_{n=1}[a_n\cos(n\omega t)+b_n\sin(n\omega t)]\quad\quad(6)</script><script type="math/tex; mode=display">\int^\pi_{-\pi}f(t)=\int^\pi_{-\pi}A_0+\int^\pi_{-\pi}[a_n\cos(n\omega t)+b_n\sin(n\omega t)]=\int^\pi_{-\pi}A_0+0=A_0|^\pi_{-\pi}=2\pi A_0</script><p>得出:</p><script type="math/tex; mode=display">A_0=\frac{1}{2\pi}\int^\pi_{-\pi}f(t)dt</script><p>用cos(k&omega;t)乘(28)式两边得：</p><script type="math/tex; mode=display">f(t)\cdot\cos(k\omega t)=A_0\cos(k\omega t)+\sum^\infty_{n=1}[a_n\cos(n\omega t)\cdot\cos(k\omega t)+b_n\sin(n\omega t)\cos(k\omega t)]</script><p>对上式从-&pi;到&pi;逐项积分：</p><script type="math/tex; mode=display">\int^\pi_{-\pi}f(t)\cdot\cos(k\omega t)=\mathop {A_0\int^\pi_{-\pi}\cos(k\omega t)}_{(1)}+\sum^\infty_{n=1}[\mathop {a_n\int^\pi_{-\pi}\cos(n\omega t)\cdot\cos(k\omega t)}_{(2)}+\mathop {b_n\int^\pi_{-\pi}\sin(n\omega t)\cos(k\omega t)}_{(3)}]</script><p>根据三角函数得正交性，(1)和(3)为0，(2)仅当k=n时积分不为0，其余项积分为0，所以：</p><script type="math/tex; mode=display">\int^\pi_{-\pi}f(t)\cdot\cos(k\omega t)=a_n\sum^\infty_{n=1}\int^\pi_{-\pi}\cos(k\omega t)\cdot\cos(n\omega t)dt=a_n\int^\pi_{-\pi}\cos^2(n\omega t)dt\\=\frac{a_n}{2}\int^\pi_{-\pi}(1+\cos2n\omega t)dt(半角公式)\quad\\=\frac{a_n}{2}\cdot2\pi=a_n\cdot\pi\quad\quad\quad\quad\quad\quad\quad\quad</script><script type="math/tex; mode=display">\therefore a_n=\frac{1}{\pi}\int^\pi_{-\pi}\cos(n\omega t)\cdot f(t)dt\quad(k=n)</script><p>同理，(28)式两边乘sin(k&omega;t)得：</p><script type="math/tex; mode=display">b_n=\frac{1}{\pi}\int^\pi_{-\pi}\sin(n\omega t)\cdot f(t)dt\quad (k=n)</script><p>由于A<sub>0</sub>的分母为2&pi;，而a<sub>n</sub>、b<sub>n</sub>为&pi;，为了统一，令a<sub>0</sub>=2A<sub>0</sub>，有：</p><script type="math/tex; mode=display">a_0=\frac{2}{T}\int^\pi_{-\pi}f(t)dt,T为一个周期，T=2\pi /\omega</script><p>所以(28)式为：</p><script type="math/tex; mode=display">f(t)=\frac{a_0}{2}+\sum^\infty_{n=1}[a_n\cos(n\omega t)+b_n\sin(n\omega t)]</script><p>则：</p><script type="math/tex; mode=display">a_n=\frac{2}{T}\int^{t_0+T}_{t_0}f(t)\cos(n\omega t)dt</script><script type="math/tex; mode=display">b_n=\frac{2}{T}\int^{t_0+T}_{t_0}f(t)\sin(n\omega t)dt</script><p><strong>三角函数的正交性：</strong></p><p>一个三角函数系：1、cos(x)，sin(x)，cos(2x)，sin(2x)，… ，cos(nx)，sin(nx)，…<strong>如果这一堆函数（包括常数1）中任何两个不同函数的乘积在区间</strong>[-&pi;, &pi;]上的积分等于零，就说三角函数系在区间[-&pi;, &pi;]上正交。</p><script type="math/tex; mode=display">\int^\pi_{-\pi}1\cdot\cos nxdx=0\quad(n=1,2,3,...)</script><script type="math/tex; mode=display">\int^\pi_{-\pi}1\cdot\sin nxdx=0\quad(n=1,2,3,...)</script><script type="math/tex; mode=display">\int^\pi_{-\pi}\sin kx \cdot\cos nx dx=0\quad(k,n=1,2,3,...)</script><script type="math/tex; mode=display">\int^\pi_{-\pi}\cos kx \cdot\cos nx dx=0\quad(k,n=1,2,3,...;k\neq n)</script><script type="math/tex; mode=display">\int^\pi_{-\pi}\sin kx \cdot\sin nx dx=0\quad(k,n=1,2,3,...;k\neq n)</script><p>证明，因为</p><script type="math/tex; mode=display">\cos kx\cdot \cos nx=\frac{1}{2}[\cos(k+n)x+\cos(k-n)x]\quad (1)</script><script type="math/tex; mode=display">\sin kx\cdot \sin nx=\frac{1}{2}[\cos(k+n)x-\cos(k-n)x]\quad(2)</script><script type="math/tex; mode=display">\sin kx\cdot \cos nx=\frac{1}{2}[\sin(k+n)x+\sin(k-n)x]\quad(3)</script><p>证（1）当k&ne;n时，有；</p><script type="math/tex; mode=display">\int^\pi_{-\pi}\cos kx\cdot\cos nx dx=\frac{1}{2}\int^\pi_{-\pi}[\cos(k+n)x+\cos(k-n)x]dx\\=\frac{1}{2}[\frac{\sin(k+n)x}{k+n}+\frac{\sin(k-n)x}{k-n}]|^\pi_{-\pi}=\frac{1}{2}[0+0]=0</script><p>可见在指定的[-&pi;, &pi;]的区间里，该式的定积分为0。上式k-n一般时小于0的，但sin是奇函数，所以上下的负号抵消。</p><p><a href="https://zhuanlan.zhihu.com/p/41455378" target="_blank" rel="noopener">傅里叶级数推导参考来自于知乎-leinlin</a></p><p><strong>傅里叶级数的复数形式</strong></p><script type="math/tex; mode=display">\because \cos\theta=\frac{1}{2}(e^{i\theta}+e^{-i\theta})\quad \sin\theta=-\frac{1}{2}i(e^{i\theta}-e^{-i\theta})</script><script type="math/tex; mode=display">式(49)代入式(37)得：\\f(t)=\frac{a_0}{2}+\sum^\infty_{n=1}[a_n\cdot\frac{1}{2}(e^{in\omega t}+e^{-in\omega t})-\frac{1}{2}ib_n(e^{in\omega t}-e^{-in\omega t})]\quad \quad \quad \quad \quad \quad\\=\frac{a_0}{2}+\sum^\infty_{n=1}\frac{a_n-ib_n}{2}e^{in\omega t}+\sum^{\infty}_{n=1}\frac{a_n+ib_n}{2}e^{in\omega t}，\quad 第三项让n变“-n”\\=\frac{a_0}{2}+\sum^\infty_{n=1}\frac{a_n-ib_n}{2}e^{in\omega t}+\sum^{-1}_{n=-\infty}\frac{a_{-n}+ib_{-n}}{2}e^{in\omega t}\quad \quad \quad \quad \quad \quad \\=\sum^0_{n=0}\frac{a_0}{2}e^{in\omega t}+\sum^\infty_{n=1}\frac{a_n-ib_n}{2}e^{in\omega t}+\sum^{-1}_{n=-\infty}\frac{a_{-n}+ib_{-n}}{2}e^{in\omega t}\quad \quad \\=\sum^\infty_{-\infty}C_ne^{in\omega t},C_n为系数\quad \quad \quad \quad \quad \quad\quad \quad \quad \quad \quad \quad\quad \quad \quad \quad \quad</script><script type="math/tex; mode=display">C_n=\begin{cases}\frac{a_0}{2},& n=0\\\frac{a_n-ib_n}{2}, & n=1,2,3,4...\\\frac{a_{-n}+ib_{-n}}{2}, & n=-1,-2,-3,-4...\end{cases}</script><p>由式(34)、式(35)和式(36):</p><script type="math/tex; mode=display">a_0=\frac{2}{T}\int^T_0f(t)dt,a_n=\frac{2}{T}\int^T_0f(t)\cos n\omega tdt,b_n=\frac{2}{T}\int^T_0f(t)\sin n\omega tdt</script><p>由式(51)和式(52)得：</p><script type="math/tex; mode=display">n=0,C_0=\frac{a_0}{2}=\frac{1}{2}\cdot\frac{2}{T}\int^T_0f(t)dt=\frac{1}{T}\int^T_0f(t)dt</script><p>当n=1,2,3…</p><script type="math/tex; mode=display">C_n=\frac{1}{2}\cdot\frac{2}{T}\int^T_0f(t)\cos n\omega tdt-\frac{1}{2}i\cdot \frac{2}{T}\int^T_0f(t)\sin n\omega tdt \quad \quad \quad \\=\frac{1}{T}\int^T_0f(t)(\cos n\omega t-i\sin n\omega t)dt\quad,cos偶函数，sin奇函数\\ =\frac{1}{T}\int^T_0f(t)(\cos(-n\omega t)+i\sin(-n\omega t))dt,\quad 由欧拉公式可得 \\=\frac{1}{T}\int^T_0f(t)e^{-in\omega t}dt\quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad</script><p>当n=-1,-2,-3…</p><script type="math/tex; mode=display">C_n=\frac{1}{2}(\frac{2}{T}\int^T_0f(t)\cos(-n)\omega tdt+i\frac{2}{T}\int^T_0f(t)\sin(-n)\omega tdt)\quad\\=\frac{1}{T}\int^T_0f(t)(\cos n\omega t-i\sin n\omega t)dt=\frac{1}{T}\int^T_0f(t)e^{-in\omega t}dt</script><p>当n=0时，因为式(54)和式(55)最后的形式一样，且当n为0时：</p><script type="math/tex; mode=display">\frac{1}{T}\int^T_0f(t)e^0dt=\frac{1}{T}\int^T_0f(t)dt=C_0</script><p>所以可以用一个统一的形式表达傅里叶级数。一个周期为T的函数f(t)=f(t+T)展开为傅里叶级数，它的复数形式可以表达为：</p><script type="math/tex; mode=display">f(t)=\sum^\infty_{-\infty}C_ne^{in\omega t},Cn=\frac{1}{T}\int^T_0f(t)e^{-in\omega t}dt</script><p><strong>补充知识：</strong>泰勒级数即为任意一个函数都可以用一个多项式来逼近：</p><script type="math/tex; mode=display">f(x)=A+Bx+Cx^2+Dx^3+...</script><p>利用麦克劳林公式中的待定系数法：</p><script type="math/tex; mode=display">f'(x)=B+2Cx+3Dx^2,f''(x)=2C+6Dx,...</script><p>每个等式中令x=0，然后由待定系数法可以解出A,B,C…的值</p><script type="math/tex; mode=display">A=f(0),B=f'(0),C=f''(0)/2,D=f'''(0)/(1*2*3)),即：N=f^n/n!</script><p>众所周知三角函数在一个周期内的积分为0。</p><p>上面是周期函数的傅里叶级数的两种形式(三角函数形式和复数形式)，<strong>那么非周期函数的傅里叶积分是什么呢？</strong></p><p>假设之前周期函数的周期为2l, 当l趋近于无穷时，可以将原先的周期函数看作是非周期函数，可以借鉴周期函数的傅里叶级数看非周期函数的展开形式：</p><script type="math/tex; mode=display">\because \omega_n=\frac{n\pi}{l},n=...,-2,-1,0,1,2,...\quad \Delta\omega_n=\omega_{n+1}-\omega_n=\frac{\pi}{l}\quad 两个相邻的\omega 之间的间隔，说明两个相邻的正弦波是跳跃变化的</script><script type="math/tex; mode=display">周期(2l)的函数\underrightarrow{l\to\infty}非周期函数，\Delta\omega_n=\frac{\pi}{l} \underrightarrow{l\to\infty}\quad0,\quad \omega_n\to\omega,变成了一个连续函数，非周期函数是连续变化的</script><script type="math/tex; mode=display">\because 周期函数的傅里叶级数f(x)=\sum^{\infty}_{-\infty}c_ne^{i\omega_nx},\quad \therefore 非周期函数可以表示为：f(x)=\lim_{l \to \infty}\sum^{\infty}_{n=-\infty}c_ne^{i\omega_nx}</script><script type="math/tex; mode=display">\because c_n=\frac{1}{2l}\int^l_{-l}f(t)e^{-i\omega_nt}dt,\quad 代入上式的非周期函数\therefore f(x)=\lim_{l \to \infty}\sum^{\infty}_{n=-\infty}[\frac{1}{2l}\int^l_{-l}f(t)e^{-i\omega_n t}dt]e^{i\omega_nx}</script><script type="math/tex; mode=display">\because \Delta\omega_n=\frac{\pi}{l},\quad \therefore\frac{1}{l}=\frac{\Delta\omega_n}{\pi},l\to\infty,\Delta\omega_n\to0</script><script type="math/tex; mode=display">\frac{1}{2l}=\frac{\Delta\omega_n}{2\pi},代入上式非周期函数f(x)=\lim_{\Delta\omega_n\to0}\sum^{\infty}_{n=-\infty}\left[\frac{1}{2\pi}\int^\infty_{-\infty}f(t)e^{-i\omega_nt}dt\right]e^{i\omega_nx}\Delta\omega_n</script><script type="math/tex; mode=display">由积分的定义\int_lf(z)dz=\lim_{n \to \infty}\sum^{\infty}_{k=0}f(\xi_k)\Delta_{z_k}, max|\Delta x_k\to0|</script><p>则式(68)可转化为：</p><script type="math/tex; mode=display">f(x)=\frac{1}{2\pi}\int^{\infty}_{-\infty}\left[\int^{\infty}_{-\infty}f(t)e^{-i\omega_nt}dt\right]e^{i\omega_nx}d\omega,\quad 傅氏积分</script><p>周期函数是傅氏级数，非周期函数是傅氏积分</p><p>傅氏积分存在的条件, (1)满足狄氏条件；(2)绝对可积 </p><p><strong>一维傅里叶变换</strong></p><script type="math/tex; mode=display">上式(69)中\int^\infty_{-\infty}f(t)e^{-i\omega t}dt\quad 积分出来是\omega 的函数</script><p>所以，定义f(x)的傅氏变换为：</p><script type="math/tex; mode=display">G(\omega)=\int^\infty_{-\infty}f(t)e^{-i\omega t}dt=F[f(x)],f(x)的傅里叶变换</script><p>则：</p><script type="math/tex; mode=display">f(x)=\frac{1}{2\pi}\int^\infty_{-\infty}G(\omega)e^{i\omega x}d\omega=F^{-1}[G(\omega)],显然，F^{-1}F[f(x)]=f(x)</script><p>对f(t)进行积分得到变量为&omega;的傅里叶变换后的频谱图(分离出来的正弦波的振幅图)对应频域，在对G(&omega;)进行积分得到变量为x的时间域f(x),相当通过傅里叶逆变换得到f(x)。</p><p>举例：</p><script type="math/tex; mode=display">\begin{aligned}& F[e^{-ax^2}]=?,函数e^{-ax^2}的傅里叶变换是什么? \\& 由(71)得：\int^\infty_{-\infty}e^{-ax^2}e^{-i\omega x}dx=2\int^\infty_0e^{-ax^2}\cdot \cos\omega  xdx,\quad e^{-i\omega t}叫做积分变换核 \\& 上式中e^{-ax^2}是偶函数，e^{-i\omega x}由欧拉公式可以化为cos和sin的形式，sin为奇函数，奇函数乘偶函数为奇函数，所以可以舍弃，只保留cos。\\& 在热传导中有，\int^\infty_0e^{-ax^2}cosbxdx=\frac{1}{2}e^{-\frac{\omega^2}{4a}}\cdot\sqrt\frac{\pi}{a},\quad \therefore F[e^{-ax^2}]=e^{-\frac{\omega^2}{4a}}\cdot\sqrt\frac{\pi}{a}\quad (-\infty<\omega<+\infty)\quad \quad \quad \quad \quad \quad \quad \quad \quad\\& 利用傅里叶逆变换求f(x):\frac{1}{2\pi}\int^\infty_{-\infty}G(\omega)e^{iwx}d\omega; \frac{1}{2\pi}\sqrt\frac{\pi}{a}\int^\infty_{-\infty}e^{-\frac{\omega^2}{4a}}e^{i\omega x}d\omega=\frac{1}{2\pi}\sqrt\frac{\pi}{a}\int^\infty_{-\infty}e^{-\frac{1}{4a}\omega^2}\cos x\omega d\omega=\frac{1}{2\pi}\sqrt\frac{\pi}{a}e^{-ax^2}2\sqrt{\pi a}=e^{-ax^2}=f(x)\end{aligned}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图像处理学习&quot;&gt;&lt;a href=&quot;#图像处理学习&quot; class=&quot;headerlink&quot; title=&quot;图像处理学习&quot;&gt;&lt;/a&gt;图像处理学习&lt;/h2&gt;&lt;h3 id=&quot;频率域滤波&quot;&gt;&lt;a href=&quot;#频率域滤波&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/categories/Image-Processing/"/>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/tags/Image-Processing/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Security-Plus</title>
    <link href="http://yoursite.com/2021/06/27/Spring-Security-Plus/"/>
    <id>http://yoursite.com/2021/06/27/Spring-Security-Plus/</id>
    <published>2021-06-27T02:03:52.000Z</published>
    <updated>2021-06-27T02:05:40.626Z</updated>
    
    <content type="html"><![CDATA[<h2 id="详解Spring-Security"><a href="#详解Spring-Security" class="headerlink" title="详解Spring Security"></a>详解Spring Security</h2><h4 id="这里插入一些基础的Spring知识点："><a href="#这里插入一些基础的Spring知识点：" class="headerlink" title="* 这里插入一些基础的Spring知识点："></a>* 这里插入一些基础的Spring知识点：</h4><p>面向对象设计（OOD）有助于我们开发出高性能、易扩展以及易复用的程序。其中，OOD有一个重要的思想那就是依赖倒置原则（DIP），并由此引申出IoC、DI以及Ioc容器等概念。</p><h5 id="1、依赖倒置原则-DIP-一种软件架构设计的原则（抽象概念）。"><a href="#1、依赖倒置原则-DIP-一种软件架构设计的原则（抽象概念）。" class="headerlink" title="1、依赖倒置原则(DIP):  一种软件架构设计的原则（抽象概念）。"></a>1<strong>、</strong>依赖倒置原则(DIP):  一种软件架构设计的原则（抽象概念）。</h5><p>依赖倒置原则，它<strong>转换了依赖关系</strong>，高层模块不依赖于低层模块的实现，而低层模块依赖于高层模块定义的接口。通俗的讲，就是高层模块定义接口，低层模块负责实现。从而更好的支持了<strong>设计模式</strong>中的<strong>开放封闭原则</strong>。以下为DIP的优点：</p><ul><li><strong>系统更柔韧：</strong>可以修改一部分代码而不影响其他模块。</li><li><strong>系统更健壮：</strong>可以修改一部分代码而不会让系统崩溃。</li><li><strong>系统更高效：</strong>组件松耦合，且可复用，提高开发效率。</li></ul><h5 id="2、控制反转-IoC-一种反转流、依赖和接口的方式（DIP的具体实现方式）。"><a href="#2、控制反转-IoC-一种反转流、依赖和接口的方式（DIP的具体实现方式）。" class="headerlink" title="2、控制反转(IoC):   一种反转流、依赖和接口的方式（DIP的具体实现方式）。"></a>2、<strong>控制反转(IoC):</strong>   一种反转<strong>流</strong>、<strong>依赖</strong>和<strong>接口</strong>的方式（DIP的具体实现方式）。</h5><p>DIP是一种 <strong>软件设计原则</strong>，它仅仅告诉你两个模块之间应该如何依赖，但是它并没有告诉如何做。IoC则是一种 <strong>软件设计模式</strong>，它告诉你应该如何做，来解除相互依赖模块的耦合。</p><p>控制反转（IoC），它为相互依赖的组件提供抽象，将依赖（低层模块）对象的获得交给第三方（系统）来控制<strong>，</strong>即依赖对象不在被依赖模块的类中直接通过new来获取。也就是说<strong>高层模块不会主动感知底层模块</strong>。</p><h5 id="3、依赖注入（DI）：IoC的一种实现方式，用来反转依赖（IoC的具体实现方式）。"><a href="#3、依赖注入（DI）：IoC的一种实现方式，用来反转依赖（IoC的具体实现方式）。" class="headerlink" title="3、依赖注入（DI）：IoC的一种实现方式，用来反转依赖（IoC的具体实现方式）。"></a>3、<strong>依赖注入（DI）：</strong>IoC的一种实现方式，用来反转依赖（IoC的具体实现方式）。</h5><p>依赖注入是控制反转（IoC）一种重要的方式，<strong>就是将依赖对象的创建和绑定转移到被依赖对象类的外部来实现</strong>。依赖注入（DI），<strong>它提供一种机制，将需要依赖（低层模块）对象的引用传递给被依赖（高层模块）对象</strong>。<strong>如何注入？</strong></p><p>1、<strong>构造函数注入：</strong>构造函数的参数必然用来接收一个依赖对象，而该依赖类型应该是一个抽象类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//高层模块</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDataAccess</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="class"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种底层模块</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">public class SqlServerDal:IDataAccess</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        Console.WriteLine(<span class="string">"在数据库中添加一条订单！"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二种底层模块</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">public class AccessDal:IDataAccess</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        Console.WriteLine(<span class="string">"在ACCESS数据库中添加一条记录！"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="class"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> IDataAccess _ida;<span class="comment">//定义一个私有变量保存抽象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//构造函数注入</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(IDataAccess ida)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        _ida = ida;<span class="comment">//传递依赖</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        _ida.Add();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>2、<strong>属性注入：</strong>属性注入是通过属性来传递依赖</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Order</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> IDataAccess _ida;<span class="comment">//定义一个私有变量保存抽象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//属性，接受依赖</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> IDataAccess Ida</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">set</span> &#123; _ida = <span class="keyword">value</span>; &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _ida; &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params"></span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>    &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        _ida.Add();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Linq;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">DIPTest</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>        &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">            AccessDal dal = <span class="keyword">new</span> AccessDal();<span class="comment">//在外部创建依赖对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">            Order order = <span class="keyword">new</span> Order();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">            order.Ida = dal;<span class="comment">//给属性赋值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            order.Add();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">            Console.Read();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>3、<strong>接口注入：</strong>具体思路是先定义一个接口，包含一个设置依赖的方法。然后依赖类，继承并实现这个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDependent</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetDependence</span><span class="params">(IDataAccess ida)</span></span>;<span class="comment">//设置依赖项</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">public class Order : IDependent</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> IDataAccess _ida;<span class="comment">//定义一个私有变量保存抽象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//实现接口</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetDependence</span><span class="params">(IDataAccess ida)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        _ida = ida;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        _ida.Add();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h5 id="4、IoC容器：依赖注入的框架，用来映射依赖，管理对象创建和生存周期（DI框架）。"><a href="#4、IoC容器：依赖注入的框架，用来映射依赖，管理对象创建和生存周期（DI框架）。" class="headerlink" title="4、IoC容器：依赖注入的框架，用来映射依赖，管理对象创建和生存周期（DI框架）。"></a>4、<strong>IoC容器：依赖注入的框架</strong>，用来映射依赖，管理对象创建和生存周期（DI框架）。</h5><p>前面的例子中都是通过<strong>手动</strong>的方式来创建依赖对象，并将引用传递给被依赖模块。IoC容器实际上是一个DI框架，它能简化我们的工作量。</p><ul><li>动态创建、注入依赖对象。</li><li>管理对象生命周期。</li><li>映射依赖关系。</li></ul><p>具体的IoC容器如何使用可以根据自己的项目中所用到的IoC容器类型进行学习。</p><h5 id="5、AOP"><a href="#5、AOP" class="headerlink" title="5、AOP"></a>5、<strong>AOP</strong></h5><p>AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented  Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p><p>AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是将那些与业务无关，却被业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p><p>面向切面编程是通过预编译方式和运行期动态代理的方式实现不修改源代码的情况下给程序动态统一添加功能的技术。使用”横切”技术，AOP把软件系统分为两个部分：<strong>核心关注点</strong>和<strong>横切关注点</strong>。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p><hr><div class="table-container"><table><thead><tr><th>AOP核心概念</th><th>说明</th></tr></thead><tbody><tr><td>横切关注点</td><td>对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点</td></tr><tr><td>切面(aspect)</td><td>类是对物体特征的抽象，切面就是对横切关注点的抽象</td></tr><tr><td>连接点(joinpoint)</td><td>被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器</td></tr><tr><td>切入点(pointcut)</td><td>对连接点进行拦截的定义</td></tr><tr><td>通知(advice)</td><td>所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置@Before、后置@After、异常@AfterThrowing、最终@AfterReturning、环绕@Around通知五类</td></tr><tr><td>目标对象</td><td>代理的目标对象</td></tr><tr><td>织入(weave)</td><td>将切面应用到目标对象并导致代理对象创建的过程</td></tr><tr><td>引入(introduction)</td><td>在不修改代码的前提下，引入可以在<strong>运行期</strong>为类动态地添加一些方法或字段</td></tr></tbody></table></div><p>AOP只是一个概念并没有设定具体语言的实现，它能克服那些只有单继承特性语言的缺点。实现AOP的技术主要分为两类：一类是<strong>采用动态代理技术</strong>利用截取消息的方式，对消息进行装饰以取代原有对象行为的执行。另一类是<strong>采用静态织入</strong>的方式，引入特定语法创建切面，从而使编译器可以在编译期间织入相关的切面代码。</p><p><strong>Spring对AOP的支持</strong></p><p><strong>Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理</strong>。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：</p><ol><li><strong>默认使用Java动态代理来创建AOP代理</strong>，这样就可以为任何接口实例创建代理了。</li><li><strong>当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理</strong>，也可强制使用CGLIB。</li></ol><p>AOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：</p><ol><li>定义普通业务组件。</li><li>定义切入点，一个切入点可能横切多个业务组件。</li><li>定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作。</li></ol><p>所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：<strong>代理对象的方法=增强处理+被代理对象</strong>的方法。</p><p>下面给出一个Spring AOP的.xml文件模板，名字叫做aop.xml，之后的内容都在aop.xml上进行扩展：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>基于Spring的AOP简单实现</strong></p><p>注意一下，在讲解之前，说明一点：使用Spring AOP，要成功运行起代码，只用Spring提供给开发者的jar包是不够的，请额外上网下载两个jar包：1、aopalliance.jar；2、aspectjweaver.jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//先定义一个接口：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloWorld</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="class"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printHelloWorld</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doPrint</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义两个接口实现类：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldImpl1</span> <span class="keyword">implements</span> <span class="title">HelloWorld</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="class"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printHelloWorld</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Enter HelloWorldImpl1.printHelloWorld()"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPrint</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Enter HelloWorldImpl1.doPrint()"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldImpl2</span> <span class="keyword">implements</span> <span class="title">HelloWorld</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="class"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printHelloWorld</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Enter HelloWorldImpl2.printHelloWorld()"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPrint</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Enter HelloWorldImpl2.doPrint()"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//横切关注点，这里是打印时间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeHandler</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="class"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTime</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"CurrentTime = "</span> + System.currentTimeMillis());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>有这三个类就可以实现一个简单的Spring AOP了，看一下aop.xml的配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorldImpl1"</span> <span class="attr">class</span>=<span class="string">"com.xrq.aop.HelloWorldImpl1"</span> /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorldImpl2"</span> <span class="attr">class</span>=<span class="string">"com.xrq.aop.HelloWorldImpl2"</span> /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"timeHandler"</span> <span class="attr">class</span>=<span class="string">"com.xrq.aop.TimeHandler"</span> /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"time"</span> <span class="attr">ref</span>=<span class="string">"timeHandler"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"addAllMethod"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.xrq.aop.HelloWorld.*(..))"</span> /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"printTime"</span> <span class="attr">pointcut-ref</span>=<span class="string">"addAllMethod"</span> /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"printTime"</span> <span class="attr">pointcut-ref</span>=<span class="string">"addAllMethod"</span> /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    ApplicationContext ctx = </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"aop.xml"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    HelloWorld hw1 = (HelloWorld)ctx.getBean(<span class="string">"helloWorldImpl1"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    HelloWorld hw2 = (HelloWorld)ctx.getBean(<span class="string">"helloWorldImpl2"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    hw1.printHelloWorld();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    System.out.println();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    hw1.doPrint();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    System.out.println();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    hw2.printHelloWorld();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    System.out.println();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    hw2.doPrint();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">CurrentTime = 1446129611993</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Enter HelloWorldImpl1.printHelloWorld()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">CurrentTime = 1446129611993</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">CurrentTime = 1446129611994</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">Enter HelloWorldImpl1.doPrint()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">CurrentTime = 1446129611994</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">CurrentTime = 1446129611994</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">Enter HelloWorldImpl2.printHelloWorld()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">CurrentTime = 1446129611994</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">CurrentTime = 1446129611994</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">Enter HelloWorldImpl2.doPrint()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">CurrentTime = 1446129611994</span></pre></td></tr></table></figure><p>看到给HelloWorld接口的两个实现类的所有方法都加上了代理，代理内容就是打印时间。</p><h5 id="参考资料-DIP-DI-IoC"><a href="#参考资料-DIP-DI-IoC" class="headerlink" title="参考资料: DIP/DI/IoC"></a><a href="https://www.cnblogs.com/liuhaorain/p/3747470.html" target="_blank" rel="noopener">参考资料: DIP/DI/IoC</a></h5><h5 id="参考资料-AOP"><a href="#参考资料-AOP" class="headerlink" title="参考资料: AOP"></a><a href="https://www.cnblogs.com/hongwz/p/5764917.html" target="_blank" rel="noopener">参考资料: AOP</a></h5><h4 id="一、概括"><a href="#一、概括" class="headerlink" title="一、概括"></a>一、概括</h4><p>Spring Security是一个高度自定义的<strong>安全框架</strong>。利用Spring IoC/DI和AOP功能，为系统提供了<strong>声明式安全访问控制功能</strong>，减少了为系统安全而编写大量重复代码的工作。</p><p>Spring Security 解决了javaEE的Servlet规范或EJB规范中的安全功能缺乏典型企业应用场景的缺陷。同时，它提供了许多其他有用的、可定制的安全功能。</p><p>在web安全方面主要有<strong>“认证”</strong>和<strong>“授权”</strong>两个主要的模块，这两者也是Spring Security重要核心功能。<strong>“认证”</strong>，是建立一个他声明的主体的过程（一个“主体”一般是指用户，设备或一些可以在你的应用程序中执行动作的其他系统），通俗点说就是系统认为用户<strong>是否能登录</strong>。<strong>“授权”</strong>指确定一个主体是否允许在你的应用程序执行一个动作的过程。通俗点讲就是系统判断用户<strong>是否有权限去做</strong>某些事情</p><h5 id="1、权限管理：一般指根据系统设置的安全规则或者安全策略。用户可以访问而且只能访问自己被授权的资源。但需要系统具备根据用户名核密码进行认证的操作。下面是权限管理中两个重要的概念："><a href="#1、权限管理：一般指根据系统设置的安全规则或者安全策略。用户可以访问而且只能访问自己被授权的资源。但需要系统具备根据用户名核密码进行认证的操作。下面是权限管理中两个重要的概念：" class="headerlink" title="1、权限管理：一般指根据系统设置的安全规则或者安全策略。用户可以访问而且只能访问自己被授权的资源。但需要系统具备根据用户名核密码进行认证的操作。下面是权限管理中两个重要的概念："></a>1、<strong>权限管理：</strong>一般指根据系统设置的安全规则或者安全策略。用户可以访问而且只能访问自己被授权的资源。但需要系统具备根据用户名核密码进行认证的操作。下面是权限管理中两个重要的概念：</h5><p><strong>认证：</strong>通过用户名和密码成功登录系统后，让系统得到当前用户的角色身份。</p><p><strong>授权：</strong>系统根据当前用户的角色，给授予对应可以操作的权限资源。</p><h5 id="2、完成权限管理需要的三个对象："><a href="#2、完成权限管理需要的三个对象：" class="headerlink" title="2、完成权限管理需要的三个对象："></a>2、<strong>完成权限管理需要的三个对象：</strong></h5><ol><li>用户：主要包含用户名、密码和当前用户的角色信息，可以实现认证操作。</li><li>角色：主要包含角色名称，角色描述和当前角色拥有的权限信息，可实现授权操作。</li><li>权限：成为菜单，主要包含当前权限的名称，url地址等信息，为了实现动态展示菜单。</li></ol><p>三者之间都是<strong>多对多</strong>的关系。</p><h5 id="3、Spring-Security概念"><a href="#3、Spring-Security概念" class="headerlink" title="3、Spring Security概念"></a>3、Spring Security概念</h5><p>Spring Security是spring采用AOP思想，基于servlet过滤器实现的安全框架。它提供了完善的认证机制和方法级的授权功能。是一款非常优秀的<strong>权限管理框架</strong>。</p><h4 id="二、开启Spring-Security项目"><a href="#二、开启Spring-Security项目" class="headerlink" title="二、开启Spring Security项目"></a>二、开启Spring Security项目</h4><h5 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h5><p>Spring Security已经被Spring boot进行集成，使用时直接引入启动器即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这个是Spring Web工程中需要导入的依赖--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-taglibs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这是在Spring Boot的环境下需要导入的包--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure><h5 id="2、访问页面"><a href="#2、访问页面" class="headerlink" title="2、访问页面"></a>2、访问页面</h5><p>导入spring-boot-starter-security启动器后，Spring Security已经生效，默认拦截全部请求，如果用户没有登录，跳转到内置登录页面。</p><p>在项目中新建login.html页面后，在浏览器输入：<a href="http://localhost:8080/login.html后会显示下面页面" target="_blank" rel="noopener">http://localhost:8080/login.html后会显示下面页面</a></p><p><img src="/2021/06/27/Spring-Security-Plus/Users\aaa\Desktop\2.png" alt="img"></p><p>默认的username为user，password打印在控制台中。在浏览器中输入账号和密码后会显示login.html页面内容。</p><h5 id="3、应用场景"><a href="#3、应用场景" class="headerlink" title="3、应用场景"></a>3、应用场景</h5><p>在很多技术中都可能有web访问控制页面。例如：www.baidu.com就有web管理页面。不需要进行登录，只要知道ip和端口任何人都可以进行访问的。可能导致网站中数据不安全问题。为了保证数据安全性，可以在Spring Boot项目中添加Spring Security。</p><p><strong>如何自定义用户名和密码？</strong></p><p>通过修改application.properties/application.yml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">spring.security.user.name=smallming</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">spring.security.user.password=smallming</span></pre></td></tr></table></figure><h5 id="4、Spring-Security过滤器链"><a href="#4、Spring-Security过滤器链" class="headerlink" title="4、Spring Security过滤器链"></a>4、Spring Security过滤器链</h5><p>过滤器是一种典型的AOP思想</p><p><strong>1、org.springframework.security.web.context.SecurityContextPersistenceFilter:</strong> 初始化SecurityContext这个域/容器，放到SecurityContextHolder对象中，为后续filter建立所需的上下文。SecurityContext中存储了当前用户的认证以及权限信息。</p><p><strong>2、org.springframework.security.web.context.request.async.WebAsyncManageIntegrationFilter:</strong> 此过滤器用于集成SecurityContext到Spring异步执行机制中的WebAsyncManager。否者Spring Security与Spring和Web容器无法整合。</p><p><strong>3、org.springframework.security.web.header.HeaderWriterFilter:</strong> 向请求的Header中添加相应的信息，可在http标签内部使用security:header来控制，仅限与jsp动态页面。</p><p><strong>4、org.springframework.security.web.csrf.CsrfFilter:</strong> csrf成为跨域伪造请求，SpringSecurity会对所有post请求验证是否包含系统生成的csrf的token信息，如果不包含，则报错。起到防止csrf攻击的效果。</p><p><strong>5、org.springframework.security.web.authentication.logout.LogoutFilter:</strong> 退出登录的过滤器，匹配URL为/logout的请求，实现用户退出，清除认证信息。</p><p><strong>6、org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter:</strong> 认证操作全靠这个过滤器，默认匹配URL为/login且必须为POST请求。</p><p><strong>7、org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter:</strong> 如果没有在配置文件中指定认证页面，则由该过滤器生成一个默认的认证页面。</p><p><strong>8、org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter:</strong> 此过滤器可以产生一个默认的退出登录页面。</p><p><strong>9、org.springframework.security.web.authentication.www.BasicAuthenticationFilter:</strong> 此过滤器会自动解析HTTP请求中头部名字为Authentication，且以Basic开头的头信息。</p><p><strong>10、org.springframework.secutiry.web.savedrequest.RequestCacheAwareFilter:</strong> 通过HttpSessionRequestCache内部维护了一个RequestCache,用于缓冲HttpServletRequest。</p><p><strong>11、org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter:</strong> 针对ServletRequest进行了一次包装，使得request具有更加丰富的API。</p><p><strong>12、org.springframework.security.web.authentication.AnonymousAuthenticationFilter:</strong> 当SecurityContextHolder中认证信息为空，则会创建一个匿名用户存入到SecurityContextHolder中。spring security为了兼容未登录的访问，也走了一套认证流程，只不过是一个匿名的身份。</p><p><strong>13、org.springframework.security.web.session.SessionManagementFilter:</strong> SecurityContextRepository限制同一用户开启多个会话的数量。</p><p><strong>14、org.springframework.security.web.access.ExceptionTranslationFilter:</strong> 用于转换整个链路中出现的异常。</p><p><strong>15、org.springframework.security.web.access.intercept.FilterSecurityInterceptor:</strong> 获取所配置资源访问的授权信息，根据SecurityContextHolder中存储的用户信息来决定其是否有权限。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring security.xml --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--释放静态资源--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security:http</span> <span class="attr">pattern</span>=<span class="string">"/css/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security:http</span> <span class="attr">pattern</span>=<span class="string">"/img/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security:http</span> <span class="attr">pattern</span>=<span class="string">"/plugins/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springSecurity--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment">auto-config="true" 表示自动加载sprignsecurity的配置文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">use-expressions="true" 表示使用spring的EL表达式来配置springsecurity</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security:http</span> <span class="attr">auto-config</span>=<span class="string">"true"</span> <span class="attr">use-expression</span>=<span class="string">"true"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--让认证页面可以匿名访问--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">security:intercept-url</span> <span class="attr">pattern</span>=<span class="string">"/login.jsp"</span> <span class="attr">access</span>=<span class="string">"permitAll()"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--拦截资源--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">pattren="/**" 表示拦截所有资源</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">accesee="hasAnyRole('ROLE_USER')" 表示只有ROLE_USER角色才能访问资源</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">security:intercept-url</span> <span class="attr">pattern</span>=<span class="string">"/**"</span> <span class="attr">access</span>=<span class="string">"hasAnyRole('ROLE_USER')"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--配置认证信息--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">security:form-login</span> <span class="attr">login-page</span>=<span class="string">"/login.jsp"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="tag">                         <span class="attr">login-processing-url</span>=<span class="string">"/login"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="tag">                         <span class="attr">default-target-url</span>=<span class="string">"/index.jsp"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="tag">                         <span class="attr">authentication-failure-url</span>=<span class="string">"/failer.jsp"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--配置退出登录信息--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">security:logout</span> <span class="attr">logout-url</span>=<span class="string">"/logout"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="tag">                     <span class="attr">logout-success-url</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">security:csrf</span> <span class="attr">disabled</span>=<span class="string">"true"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--开启remember me过滤器，设置token存储时间为60秒--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">security:remember-me</span> </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="tag">             <span class="attr">data-source-ref</span>=<span class="string">"dataSource"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="tag">             <span class="attr">token-validity-second</span>=<span class="string">"60"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">security:http</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--把密码对象放入IoC容器中--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"passwordEncoder"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置Spring Security认证用户信息的来源--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"><span class="comment">springsecurity默认的认证必须是加密的，加上(noop)表示不加密认证。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="comment">--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security:authentication-manager</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">security:authentication-provider</span> <span class="attr">user-service-ref</span>=<span class="string">"userServiceImpl"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">security:password-encoder</span> <span class="attr">ref</span>=<span class="string">"passwordEncoder"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">security:authentication-provider</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">security:authentication-manager</span>&gt;</span></span></pre></td></tr></table></figure><h4 id="三、UserDetailService详解"><a href="#三、UserDetailService详解" class="headerlink" title="三、UserDetailService详解"></a>三、UserDetailService详解</h4><p>当什么也没有配置的时候，账号和密码是由Spring Security定义生成的。而在实际项目中账号和密码都是从数据库中查询出来的。 所以我们要通过自定义逻辑控制认证逻辑。及需要实现UserDetailsService接口即可，定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//重写loadUserByUsername使自己的数据库与spring security做衔接，下面是spring security默认的接口</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetailService</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function">UserDetails <span class="title">loadUserByUsername</span><span class="params">(String name)</span> <span class="keyword">throws</span> UsernameNonFoundException</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回值 UserDetails</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetails</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    Collection&lt;? extends GranteAuthority&gt; getAuthorities(); <span class="comment">//获取所有权限</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="function">String <span class="title">getPassword</span><span class="params">()</span></span>; <span class="comment">//获取密码</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="function">String <span class="title">getUsername</span><span class="params">()</span></span>; <span class="comment">//获取用户名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span></span>; <span class="comment">//是否账号过期</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span></span>; <span class="comment">//是否账号被锁定</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span></span>; <span class="comment">//凭证是否过期</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span></span>; <span class="comment">//是否可用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserDetails接口的实现类为User,由org.springframework.security.core.userdetails.User提供</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面是User的两个构造函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">User(String, String, Collection&lt;? extends GrantedAuthority&gt;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">User(String, String, <span class="keyword">boolean</span>, <span class="keyword">boolean</span>, <span class="keyword">boolean</span>, <span class="keyword">boolean</span>, Collection&lt;? extends GranteAuthority&gt;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> enabled 是否可用</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> accountNonExpired 账号是否失效</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> credentialsNonExpired 密码是否失效</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> accountNonLocked 账户是否锁定</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//上面四个boolean值，只要有一个为false，则不能使用</span></span></pre></td></tr></table></figure><p>用户通过传入用户名和密码，后台通过用户名从数据库中获取对应的密码。如果一致，则认证通过；如果不一致，则认证失败。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> *认证业务</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> *<span class="doctag">@param</span> username 用户在浏览器输入的用户名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> *<span class="doctag">@return</span> UserDetails 是springsecurity自己的用户对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> *<span class="doctag">@throws</span> UsernameNotFoundExcetion</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">**/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据username做查询</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">SysUser sysUser = userDao.findByName(username);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(sysUser == <span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        List&lt;SimpleGrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        List&lt;SysRole&gt; roles = sysUser.getRoles();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(SysRole role : roles) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(role));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//(noop)后面的密码，springsecurity会认为是原文</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">UserDetails userDetails = <span class="keyword">new</span> User(sysUser.getUsername(),<span class="string">"sysUser.getPassword(),authorities);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="string">        return userDetails;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="string">&#125;catch(Exception e) &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="string">e.printStackTrace();</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="string">return null; //认证失败</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="string">&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="string">&#125;</span></span></pre></td></tr></table></figure><p>认证通过后authorities中的认证信息中包含了用户具有的权限，以供授权部分使用。通常都是通过AuthorityUtils.commaSeparatedStringToAuthorityList(“”)来创建authorities集合对象的。参数时一个字符串，多个权限使用逗号分隔。</p><h4 id="四、注意"><a href="#四、注意" class="headerlink" title="四、注意"></a>四、注意</h4><p>如果开启了csrf防护功能，logout处理器便只能支持POST请求方式！</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;!--退出登录--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;!--修改header.jsp中注销请求--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/logout"</span> method=<span class="string">"post"</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;security:csrfInput/&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"注销"</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;/form&gt;</span></pre></td></tr></table></figure><p><strong>remember me功能</strong>，1、插入数据库；2、将认证写入Cookie</p><p>remember me安全性分析：因为Cookie是保存在客户端的，容易被盗取，并且与用户名和密码相关。所以不太安全。因此，需要用完后手动退出登录，情况认证信息。</p><p>此外，SpringSecurity提供了remember me的另一种相对安全的实现机制：在客户端cookie中，保存一个无意义的加密串(与用户名、密码等敏感数据无关)，然后在DB中保存改加密串-用户信息的对应关系，自动登录时，用Cookie中的加密串，到DB中验证，如果通过，自动登录才算通过。</p><p>创建一张表，名称和字段固定</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`persistent_logins`</span> (</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    `series` varchar(64) NOT NULL;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    `token` varchar(64) NOT NULL;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    `last_used` timestamp NOT NULL;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    PRIMARY KEY (`series`)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span></pre></td></tr></table></figure><p>需要在Spring Security的配置文件中添加数据源dataSource，该数据源在IoC父容器的配置文件中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///security_authority"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure><h4 id="五、授权"><a href="#五、授权" class="headerlink" title="五、授权"></a>五、授权</h4><p>产品和订单两个业务不同的操作人员具有不同的权限。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    &lt;security:authorize access=<span class="string">"hasAnyRole('ROLE_PRODUCT', 'ROLE_ADMIN')"</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    &lt;li id=<span class="string">"system-setting"</span>&gt;&lt;a href=<span class="string">"$&#123;pageContext.request.contextPath&#125;/product/findAll"</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        &lt;i class="fa fa-circle-o"&gt;&lt;/i&gt;产品管理</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &lt;/a&gt;&lt;/li&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &lt;/security:authorize&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &lt;security:authorize access=<span class="string">"hasAnyRole('ROLE_ORDER', 'ROLE_ADMIN')"</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &lt;li id=<span class="string">"system-setting"</span>&gt;&lt;a href=<span class="string">"$&#123;pageContext.request.contextPath&#125;/order/findAll"</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &lt;i class="fa fa-circle-o"&gt;&lt;/i&gt;产品管理</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &lt;/a&gt;&lt;/li&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &lt;/security:authorize&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&lt;/ul&gt;</span></pre></td></tr></table></figure><p><strong>IoC容器的结构：</strong>任何web工程都有一个最大的容器，servletContext容器。web中如果加入了spring，那么还会有SpringIoC容器(由spring的核心监听器加载，是一个父容器)，加载Spring配置文件对应的是Service和DAO。如果又加入了SpringMVC，那么在SpringIoC父容器中又放入了一个SprignIoC子容器(由前端控制器加载)，加载SprignMVC配置文件(换句说加载的是Controller控制器对象)。</p><p>子容器可以访问父容器，子容器中的对象还可以被http请求访问。父容器中的对象可以被子容器调用，父容器的对象不能被http请求访问。</p><p><img src="/2021/06/27/Spring-Security-Plus/Users\aaa\Desktop\3.png" alt="img"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-security.xml--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">开启权限控制的注解支持</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">secured-annotations="enabled"   springSecurity内部的权限控制注解开关</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">pre-post-annotations="enabled"  spring指定的权限控制的注解开关</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">jsr250-annotations="enabled"    开启java250注解支持</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security:http</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">security:global-method-security</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="tag">             <span class="attr">secured-annotations</span>=<span class="string">"enabled"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">             <span class="attr">pre-post-annotations</span>=<span class="string">"enabled"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="tag">             <span class="attr">jsr250-annotations</span>=<span class="string">"enabled"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">security:http</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>注意：</strong>注解的支持位置不要放错，要与所对应的IoC容器对应，父容器的注解支持要放在父容器的配置文件中(applicationContext.xml/spring-security.xml)，并添加到Service或Dao中，子容器的注解支持要放在子容器spring-mvc.xml的配置文件中，并添加到Controller中。按理说正常需要放在父容器中，这样更加的安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Secured</span>(&#123;<span class="string">"ROLE_PRODUCT"</span>,<span class="string">"ROLE_ADMIN"</span>&#125;) <span class="comment">//springSecurity内部制定的注解</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@RolesAllowd</span>(&#123;<span class="string">"ROLE_PRODUCT"</span>, <span class="string">"ROLE_ADMIN"</span>&#125;) <span class="comment">//jsr250注解</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasAnyAuthority('ROLE_PRODUCT','ROLE_ADMIN')"</span>) <span class="comment">//spring的el表达式注解</span></span></pre></td></tr></table></figure><h4 id="六、处理异常"><a href="#六、处理异常" class="headerlink" title="六、处理异常"></a>六、处理异常</h4><p>Spring Security提供了一种处理403异常的方式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security:http</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理403异常--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">security:access-denied-handler</span> <span class="attr">error-page</span>=<span class="string">"/403.jsp"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">security:http</span>&gt;</span></span></pre></td></tr></table></figure><p>web.xml只在在web工程中(Spring Security在Spring-MVC中的使用)，对于前后端分离的项目，比如spring-boot项目中，里面没有web.xml配置文件(当然也能配置web配置类，但是一般不用)。</p><p><strong>web.xml中处理异常的方式：</strong>（目前不常用，都往spring上靠）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--处理403异常--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>403<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/403.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--处理404异常--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>Spring中的异常处理方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//最佳方式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerControllerAdvice</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@ExceptionHandler</span>(AccessDeniedException<span class="class">.<span class="keyword">class</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">handlerException</span>() </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/403.jsp"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@ExceptionHandler</span>(RuntimeException<span class="class">.<span class="keyword">class</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">runtimeHandlerException</span>() </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/500.jsp"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//redirect:访问的链接重定向到后面的403.jsp - 跟视图解析器有关</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//forward:访问的链接保持不变 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//可选方式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerControllerException</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpservletResponse</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> o 出现异常的对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 出现的异常信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span> ModelAndView</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="comment">    **/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//将异常信息放入request域中，基本不用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        mv.addObject(<span class="string">"errorMsg"</span>, e.getMessage());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//指定不同异常跳转的页面</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> AccessDeniedException) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">            mv.setViewName(<span class="string">"forward:/403.jsp"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">            mv.setViewName(<span class="string">"redirect:/500.jsp"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> mv;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//spring控制器最后返回一个ModelAndView(urlName),其中urNamel可以是一个视图名称,由视图解析器负责解析后将响应流写回客户端;也可以通过redirect/forward:url方式转到另一个控制器进行处理.</span></span></pre></td></tr></table></figure><h4 id="七、SpringSecurity与Spring-Boot"><a href="#七、SpringSecurity与Spring-Boot" class="headerlink" title="七、SpringSecurity与Spring Boot"></a>七、SpringSecurity与Spring Boot</h4><p>在Spring MVC中添加Spring Security需要在配置文件web.xml中添加相应的过滤器，而在Spring Boot中则只需要在pom中导入Spring Security的依赖jar包即可，依赖的版本不需要指定，与parent的版本相同。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></pre></td></tr></table></figure><p>SpringBoot官方是不推荐在SpringBoot中使用jsp的，但是还是可以使用的。不过需要导入tomcat插件启动项目，不能再用SpringBoot默认的tomcat了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入SpringBoot的tomcat启动插件jar包--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>如何导入静态资源？</strong></p><pre><code>    1. 新建webapp    2. pom中加入&lt;packaging&gt;war&lt;/packaging&gt;    3. import    4. 将静态资源拷贝到webapp下面</code></pre><p>在SpringBoot中添加SpringSecurity的配置类，相当于之前的spring-security.xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//继承了WebSecurityConfigurerAdapter这个类之后，相当于拥有了Spring Security的所有默认配置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//要修改里面里面的配置，就要重写里面的方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//认证用户的来源[内存，数据库]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        auth.inMemoryAuthencation()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            .withUser(<span class="string">"user"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            .password(<span class="string">"&#123;noop&#125;123"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            .roles(<span class="string">"USER"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//配置SpringSecurity相关信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//释放静态资源，指定路径/资源拦截规则，指定自定义认证页面，指定退出认证配置，csrf配置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        http.authorizeRequests()   <span class="comment">//默认且必须为第一个</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            .andMatchers(<span class="string">"/login.jsp"</span>,<span class="string">"/failer.jsp"</span>,<span class="string">"/css/**"</span>,<span class="string">"/img/**"</span>,<span class="string">"/plugins/**"</span>).permitAll() <span class="comment">//指出这些资源不被拦截</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">.andMatchers(<span class="string">"/**"</span>).hasAnyRole(<span class="string">"USER"</span>,<span class="string">"ADMIN"</span>) <span class="comment">//指定角色</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            .anyRequest()  <span class="comment">//其他所有的资源只有在认证后才能被使用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            .authenticated()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            .and()   <span class="comment">//表示一个新的配置的开始</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            .formLogin()   <span class="comment">//指定以表单的形式登陆</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            .loginPage(<span class="string">"/login.jsp"</span>)   <span class="comment">//登陆的一个page</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            .loginProcessingUrl(<span class="string">"/login"</span>)   <span class="comment">//登陆的url地址</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            .successForwardUrl(<span class="string">"/index.jsp"</span>)  <span class="comment">//成功的跳转页面</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            .failureForwardUrl(<span class="string">"/failer.jsp"</span>) <span class="comment">//失败的跳转页面</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            .permitAll()  <span class="comment">//清空上面的配置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">            .and()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">            .logout()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">            .logoutUrl(<span class="string">"/logout"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            .logoutSuccessUrl(<span class="string">"/login.jsp"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            .invalidateHttpSession(<span class="keyword">true</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">            .permitAll()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">            .and()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">            .csrf()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">            .disable();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>从数据库中加载用户</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> UserService userService;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    auth.userDetailService(userService).passwordEncoder(passwordEncoder());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>在SpringSecurity配置类中开启授权</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(securedEnabled=<span class="keyword">true</span>)</span></pre></td></tr></table></figure><p><strong>设置异常拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerControllerException</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@ExceptionHandler</span>(RuntimeException.calss)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handlerException</span><span class="params">(RuntimeException e)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> AccessDeniedException) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/403.jsp"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/500.jsp"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>分布式认证概念</strong></p><p>分布式认证，也就是单点登录，简称SSO。指在多应用系统的项目中，用户只需要登陆一次，就可以访问所有互相信任的应用系统。</p><p>首先，在分布式项目中，每台服务器都有各自独立的session，而这些session之间是无法直接共享资源的，所以，session通常不能被作为单点登录的技术方案。</p><p><img src="/2021/06/27/Spring-Security-Plus/Users\aaa\Desktop\5.png" alt="img"></p><p><strong>单点登录的两大环节</strong></p><ol><li>用户认证：这一环节主要是用户向认证服务器发起认证请求，认证服务器给用户返回一个成功的令牌token，主要在认证服务器A中完成（认证服务器只能有一个）。</li><li>身份校验：这一环节是用户携带token去访问其他服务器时，在其他服务器中要对token的真伪进行检验，主要在资源服务器B中完成（资源服务器B可以有多个）。</li></ol><p><strong>JWT(SON Web Token)介绍</strong></p><p>jwt是一款出色的分布式身份校验方案，可以生成token，也可以解析检验token。</p><p>JWT生成的token由三部分组成：</p><ul><li>头部：主要设置一些规范信息，签名部分的编码格式。</li><li>载荷：token中存放有效信息的部分，比如用户名、用户角色、过期时间等。但不要放密码，不安全。</li><li>签名：将头部与载荷分别采用base64编码后，用”.”相连，在加入盐，最后使用头部声明的编码类型进行编码，就得到了签名。</li></ul><p><strong>非对称加密RSA介绍</strong></p><p>同时生成两把秘钥：私钥和公钥，私钥隐秘保存，公钥可以下发给信任客户端。</p><ul><li>私钥加密</li><li>公钥加密</li></ul><p><strong>在分布式环境下SpringSecurity的使用与SpringBoot还不一样</strong>，一般使用SpringSecurity+JWT+RSA做分布式认证</p><p><strong>在集中式认证流程中：</strong></p><ul><li>用户认证：使用UsernamePasswordAuthenticationFilter过滤器中的attemptAuthentication方法实现认证功能。该过滤器父类中successfulAuthentication方法实现认证成功后的操作。</li><li>身份校验：使用BasicAuthenticationFilter过滤器中的doFilterInternal方法验证是否登陆，以决定能否进入后续过滤器。</li></ul><p><strong>分布式认证流程：</strong></p><ul><li>用户认证：由于分布式项目多数是前后端分离的架构设计，所以需要满足接收异步post的认证请求参数，需要修改UsernamePasswordAuthenticationFilter过滤器中attemptAuthentication方法，让其能够接收请求体。另外，默认successfulAuthentication方法在认证通过后，把用户信息直接放入session中，现在根据分布式的流程，需要将认证通过后的token返回给用户。</li><li>身份校验：原来BasicAuthenticationFilter过滤器中doFilterInternal方法校验用户是否登陆，就是看session中是否有用户信息。现在需要修改为验证用户携带的token是否合法，并解析出用户信息，交给SpringSecurity以便于后续的授权。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtLoginFilter</span> <span class="keyword">extends</span> <span class="title">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> RsaKeyProperties prop;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtLoginFilter</span><span class="params">(AuthenticationManager authenticationManager, RsaKeyProperties prop)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.authenticationManager = authenticationManager;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.prop = prop;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">try</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">           SysUser sysUser = <span class="keyword">new</span> ObjectMapper().reader(request.getInputStream(), SysUser<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            UsernamePasswordAuthenticationToken authRequest = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(sysUser.getUserName(), sysUser.getPassword());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> authenticationManager.authenticate(authRequest);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">try</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                response.setContexType(<span class="string">"application/json;charset=utf-8"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                response.sestStatus(HttpServletResponse.SC_UNAUTHORIZED);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                PrintWriter out = response.getWriter();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                Map resultMap = <span class="keyword">new</span> HashMap();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                resultMap.put(<span class="string">"code"</span>, HttpServletResponse.SC_UNAUTHORIZED);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                resultMap.put(<span class="string">"msg"</span>, <span class="string">"用户名或密码错误！"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(resultMap));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                out.flush();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">                out.close();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            &#125;<span class="keyword">catch</span>(Exception e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            outEx.printStackTrace();    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">successfuaAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        SysUser user = <span class="keyword">new</span> SysUser();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        user.setUsername(authResult.getName)();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        user.setRoles(List&lt;SysRole&gt;) authResult.getAuthorities();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        String token = JwtUtils.generateTokenExpireInMinutes(user, prop.getPrivateKey(), <span class="number">24</span>*<span class="number">60</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        response.addHeader(<span class="string">"Authorization"</span>, <span class="string">"Bearer "</span>+token);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">try</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">            response.setContexType(<span class="string">"application/json;charset=utf-8"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">            response.sestStatus(HttpServletResponse.SC_OK);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">            PrintWriter out = response.getWriter();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">            Map resultMap = <span class="keyword">new</span> HashMap();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">            resultMap.put(<span class="string">"code"</span>, HttpServletResponse.SC_OK);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">            resultMap.put(<span class="string">"msg"</span>, <span class="string">"认证通过！"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">            out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(resultMap));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">            out.flush();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">            out.close();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">            outEx.printStackTrace();    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>重写授权的过滤器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtVerifyFilter</span> <span class="keyword">extends</span> <span class="title">BasicAuthenticationFilter</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> RsaKeyProperties prop;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtVerifyFilter</span><span class="params">(AuthenticationManager authenticationManager, RsaKeyProperties prop)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">super</span>(authenticationManager);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.prop = prop;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> throw IOException</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        String header = request.getHeader(<span class="string">"Authorization"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(header == <span class="keyword">null</span> || !header.startsWith(<span class="string">"Bearer "</span>)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">//如果携带了错误的token，则给用户提示请登录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            chain.doFilter(requet, response);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            response.setContexType(<span class="string">"application/json;charset=utf-8"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            response.sestStatus(HttpServletResponse.SC_FORBIDDEN);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            PrintWriter out = response.getWriter();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            Map resultMap = <span class="keyword">new</span> HashMap();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            resultMap.put(<span class="string">"code"</span>, HttpServletResponse.SC_FORBIDDEN);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            resultMap.put(<span class="string">"msg"</span>, <span class="string">"请登录！"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(resultMap));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            out.flush();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            out.close();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">//如果携带了正确格式的token，要先得到token进行验证</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            String token = header.replace(<span class="string">"Bearer"</span>, <span class="string">""</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            Payload&lt;SysUser&gt; payload = JwtUtils.getInfoFormToken(token,prop.getPublicKey(), SysUser<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            SysUser user = payload.getUserInfo();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">                UsernamePasswordAuthenticationToken authResult = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(user.getUserName(),<span class="keyword">null</span>, user.getAuthorities());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">                SecurityContextHolder.getContext().setAuthentication(authResult);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">                chain.doFilter(requet, response);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>改写SpringSecurity配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> RsaKeyProperties prop;    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置SpringSecurity相关信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//释放静态资源，指定路径/资源拦截规则，指定自定义认证页面，指定退出认证配置，csrf配置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    http.csrf()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        .disable()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        .authorizeRequests()   <span class="comment">//默认且必须为第一个</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        .andMatchers(<span class="string">"/**"</span>).hasAnyRole(<span class="string">"USER"</span>,<span class="string">"ADMIN"</span>) <span class="comment">//指定角色</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        .anyRequest()  <span class="comment">//其他所有的资源只有在认证后才能被使用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        .authenticated()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        .and()   <span class="comment">//表示一个新的配置的开始</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        .addFilter(<span class="keyword">new</span> JwtLoginFilter(<span class="keyword">super</span>.authenticationManager(), prop))   <span class="comment">//添加认证过滤器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        .addFilter(<span class="keyword">new</span> JwtVerifyFilter(<span class="keyword">super</span>.authenticationManager(), prop))  <span class="comment">//添加授权过滤器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); <span class="comment">//禁用session管理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/349962352" target="_blank" rel="noopener">Spring Security: 参考1</a></p><p><a href="https://www.bilibili.com/video/av370800402/?p=22&amp;spm_id_from=pageDriver" target="_blank" rel="noopener">Spring Security: 参考2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;详解Spring-Security&quot;&gt;&lt;a href=&quot;#详解Spring-Security&quot; class=&quot;headerlink&quot; title=&quot;详解Spring Security&quot;&gt;&lt;/a&gt;详解Spring Security&lt;/h2&gt;&lt;h4 id=&quot;这里插入一
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Mybatis-Label-SQL</title>
    <link href="http://yoursite.com/2021/06/27/Spring-Mybatis-Label-SQL/"/>
    <id>http://yoursite.com/2021/06/27/Spring-Mybatis-Label-SQL/</id>
    <published>2021-06-27T02:01:14.000Z</published>
    <updated>2021-06-27T02:29:52.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mybatis动态SQL"><a href="#Mybatis动态SQL" class="headerlink" title="Mybatis动态SQL"></a>Mybatis动态SQL</h2><h4 id="一、动态SQL"><a href="#一、动态SQL" class="headerlink" title="一、动态SQL"></a>一、动态SQL</h4><p>动态SQL是在应用程序运行时被编译和执行的SQL，根据用户的输入选择对应的数据库筛选条件。可以有效的减小Mybatis中映射文件xml的大小，使SQL的增、删、改、查更加灵活。</p><p>Mybatis动态SQL借助于OGNL表达式对SQL进行拼接。OGNL类似于EL，是用存取对象属性，调用对象方法的表达式语言。</p><h4 id="二、常用的OGNL表达式"><a href="#二、常用的OGNL表达式" class="headerlink" title="二、常用的OGNL表达式"></a>二、常用的OGNL表达式</h4><div class="table-container"><table><thead><tr><th>关键符号作用</th></tr></thead><tbody><tr><td>or: 或者(并集)、and: 和(交集)</td></tr><tr><td>eq(==)、neq(!=)、lt(&lt;)、lte(&lt;=)、gt(&gt;)、gte(&gt;=)</td></tr><tr><td>算术运算：+、-、*、/、%等</td></tr><tr><td>非、取反</td></tr><tr><td>调用对象方法</td></tr><tr><td>对象属性值</td></tr></tbody></table></div><h4 id="三、Mybatis动态SQL标签"><a href="#三、Mybatis动态SQL标签" class="headerlink" title="三、Mybatis动态SQL标签"></a>三、Mybatis动态SQL标签</h4><h5 id="3-1-if"><a href="#3-1-if" class="headerlink" title="3.1 if"></a>3.1 if</h5><p>单条件分支标签<strong>if</strong>，test属性<strong>(必填)</strong></p><ul><li>值为符合OGNL要求的判断表达式，结果可以为true或false</li><li>结果为true则执行标签体内容，否则不执行</li><li>另外所有非0值都为true，只有0为false</li></ul><p>例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ONGL表达式，集合非空判断 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span> = <span class="string">"list !=null and list.size() &gt; 0"</span> &gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">​<span class="comment">&lt;!-- 执行内容 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ONGL表达式，数组非空判断 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span> = <span class="string">"array !=null and array.length &gt; 0"</span> &gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">​<span class="comment">&lt;!-- 执行内容 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ONGL表达式，字段name非空判断 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span> = <span class="string">"name !=null and name != ''"</span> &gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">​<span class="comment">&lt;!-- 执行内容 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr></table></figure><h5 id="3-2-trim-where-set"><a href="#3-2-trim-where-set" class="headerlink" title="3.2 trim(where, set)"></a>3.2 trim(where, set)</h5><p>辅助元素，专门用于SQL拼接去掉多余的and和or等，trim能实现所有where和set实现的内容。</p><p><strong>where标签: </strong>包含的元素中有返回值，则插入一个where；如where后的字符串以AND或OR开头，则将他们剔除。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- where标签包含的内容 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>set标签：</strong>包含的元素中有返回值，则插入一个set；如set后的字符串以逗号结尾，则将该逗号剔除。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- set标签包含的内容 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>#{}为参数占位符 “ ? “,即sql预编译；${}为字符串替换，即sql拼接，eg:’%${bname}%’</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方法一，trim比where高一层，需要指定前缀和覆盖的量 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用if+trim标签实现多条件查询 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectById"</span> <span class="attr">parameterType</span>=<span class="string">"Book"</span> <span class="attr">resultType</span>=<span class="string">"Book"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">select * from book</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"and|or"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bname!=null"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        and bname like '%$&#123;bname&#125;%'</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bAuthor!=null"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        and bAuthor like '%$&#123;bAuthor&#125;%'</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bPublisher!=null"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        and bPublisher like '%$&#123;bPublisher&#125;%'</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方法二， 使用where，如果有and的话会直接忽略第一个and或or --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectById"</span> <span class="attr">parameterType</span>=<span class="string">"Book"</span> <span class="attr">resultType</span>=<span class="string">"Book"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">select * from book</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bname!=null"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        and bname like '%$&#123;bname&#125;%'</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bAuthor!=null"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        and bAuthor like '%$&#123;bAuthor&#125;%'</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bPublisher!=null"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        and bPublisher like '%$&#123;bPublisher&#125;%'</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- set有结果则插入set,且删掉最后一个逗号 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBookById"</span> <span class="attr">parameterType</span>=<span class="string">"Book"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bname!=null and bname!=''"</span>&gt;</span>bname=#&#123;bname&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bAuthor!=null and bAuthor!=''"</span>&gt;</span>bAuthor=#&#123;bAuthor&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bPublisher!=null and bPublisher!=''"</span>&gt;</span>bPublisher=#&#123;bPublisher&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bPrice!=null and bPrice!=''"</span>&gt;</span>bPrice=#&#123;bPrice&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bPubdate!=null and bPubdate!=''"</span>&gt;</span>bPubdate=#&#123;bPubdate&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bDetail!=null and bDetail!=''"</span>&gt;</span>bDetail=#&#123;bDetail&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">    where bid=#&#123;bid&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></pre></td></tr></table></figure><h5 id="3-3-choose-when-otherwise"><a href="#3-3-choose-when-otherwise" class="headerlink" title="3.3 choose(when, otherwise)"></a>3.3 choose(when, otherwise)</h5><p>多条件分支标签，类似JSTL的choose和Java中的switch，用于从多个分支中选择其一项。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title!=null"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">&lt;!-- 执行条件1内容 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author!=null"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">&lt;!-- 执行条件2内容 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">&lt;!-- 上述条件都不满足的执行内容 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByIdAndName"</span> <span class="attr">resultType</span>=<span class="string">"Book"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    SELECT * FROM book WHERE 1=1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"bId!=null and bId&gt;0"</span>&gt;</span> and bid=#&#123;bId&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"bName!=null and bName!=''"</span>&gt;</span> and bName=#&#123;bName&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span>and 1=2<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr></table></figure><h5 id="3-4-foreach"><a href="#3-4-foreach" class="headerlink" title="3.4 foreach"></a>3.4 foreach</h5><p>通常用于构建IN条件语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">SELECT * FROM BOOK WHERE BID IN(1,3,5);</span></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>collection</td><td>必填，值为要迭代循环的属性名</td></tr><tr><td>item</td><td>变量名，值为从迭代对象中取出的每个值</td></tr><tr><td>index</td><td>索引的属性名，集合、数组情况下值为当前索引值，迭代对象是Map时，值为Map的key</td></tr><tr><td>open</td><td>整个循环内容开头的字符串</td></tr><tr><td>seperator</td><td>每次循环的分隔符</td></tr><tr><td>close</td><td>整个循环内容结尾的字符串</td></tr></tbody></table></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 循环体，例如：#&#123;item&#125; --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBookBatch"</span> <span class="attr">parameterType</span>=<span class="string">list</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    DELETE FROM book WHERE bId In</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">seperator</span>=<span class="string">","</span><span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        #&#123;item&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></pre></td></tr></table></figure><h4 id="四、不相关扩展"><a href="#四、不相关扩展" class="headerlink" title="四、不相关扩展"></a>四、不相关扩展</h4><p><strong>如何用postman跳过cookie和鉴权</strong></p><p>1、Google浏览器登陆，F12-&gt;找一个请求，查看Request Headers-&gt;查看x-auth-header；将x-auth-header这个key和对应的value添加在postman的Header中。</p><p>2、postman-&gt;Authorization-&gt;TYPE-&gt;Basic Auth；输入用户名和密码即可。其中TYPE中有许多中不同类型的鉴权方式，可以根据自己的需求进行选择</p><p><img src="/2021/06/27/Spring-Mybatis-Label-SQL/Users\aaa\Desktop\1.png" alt="Mybatis-SQL"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mybatis动态SQL&quot;&gt;&lt;a href=&quot;#Mybatis动态SQL&quot; class=&quot;headerlink&quot; title=&quot;Mybatis动态SQL&quot;&gt;&lt;/a&gt;Mybatis动态SQL&lt;/h2&gt;&lt;h4 id=&quot;一、动态SQL&quot;&gt;&lt;a href=&quot;#一、动态SQ
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Image-Process-Three</title>
    <link href="http://yoursite.com/2021/06/20/Image-Process-Three/"/>
    <id>http://yoursite.com/2021/06/20/Image-Process-Three/</id>
    <published>2021-06-20T15:06:01.000Z</published>
    <updated>2021-06-20T15:06:38.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像处理学习"><a href="#图像处理学习" class="headerlink" title="图像处理学习"></a>图像处理学习</h2><h5 id="几何变换：改进图像中像素间的空间关系。在数字图像处理中，几何变换由两个基本操作组成：-1-坐标的空间变换；-2-图像内插，即对空间变换后的像素赋灰度值。"><a href="#几何变换：改进图像中像素间的空间关系。在数字图像处理中，几何变换由两个基本操作组成：-1-坐标的空间变换；-2-图像内插，即对空间变换后的像素赋灰度值。" class="headerlink" title="几何变换：改进图像中像素间的空间关系。在数字图像处理中，几何变换由两个基本操作组成：(1)坐标的空间变换；(2)图像内插，即对空间变换后的像素赋灰度值。"></a>几何变换：改进图像中像素间的空间关系。在数字图像处理中，几何变换由两个基本操作组成：(1)坐标的空间变换；(2)图像内插，即对空间变换后的像素赋灰度值。</h5><h3 id="仿射变换（Affine-Transformations）"><a href="#仿射变换（Affine-Transformations）" class="headerlink" title="仿射变换（Affine Transformations）"></a>仿射变换（Affine Transformations）</h3><p>坐标变换的表示：</p><script type="math/tex; mode=display">(x,y)=T\{(v,w)\}</script><p>其中，(v, w)是原图像中像素的坐标，(x, y)是变换后图像中像素的坐标。仿射变换是最常用的空间坐标变换之一。其一般形式如下：</p><script type="math/tex; mode=display">[x\quad y\quad 1]=[v\quad w\quad 1]T=[v\quad w\quad 1]\cdot\begin{bmatrix}t_{11} & t_{12} & 0 \\ t_{12} & t_{22} & 0 \\t_{31} & t_{32} & 1\end{bmatrix}</script><p>在用仿射变换求变换后坐标对应的灰度值的时候，有两种基本的方法。第一种方法称为<strong>前向映射</strong>。它由扫描输入图像的像素在每个位置(v ,w)处计算输出图像中相应像素的空间位置(x, y)组成。但有一个问题是输入图像中的两个或更多个像素可被变换到输出图像中的同一位置。第二种方法称为<strong>反向映射</strong>，扫描输出图像中像素的位置，并在每一个位置(x, y)使用(v, w)=T<sup>-1</sup>(x, y)计算输入图像中的相应位置。然后使用图像内插获得输出图像像素的灰度值。</p><p>仿射变换逆变换如下：</p><script type="math/tex; mode=display">\begin{pmatrix} x\\ y\\ \end{pmatrix}=\frac{1}{a\cdot d-b\cdot c} \begin{pmatrix} d & -b\\ -c & a\\ \end{pmatrix}\cdot \begin{pmatrix} x'\\ y'\\ \end{pmatrix}-\begin{pmatrix}t_x \\ t_y\end{pmatrix}</script><h4 id="一、平行移动"><a href="#一、平行移动" class="headerlink" title="一、平行移动"></a>一、平行移动</h4><script type="math/tex; mode=display">\begin{pmatrix} x'\\ y'\\ 1\\ \end{pmatrix}=\begin{pmatrix} 1 & 0 & t_x\\ 0 & 1 & t_y\\ 0 & 0 & 1\\ \end{pmatrix}\cdot \begin{pmatrix} x\\ y\\ 1\\ \end{pmatrix}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Affine</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">affine</span><span class="params">(_img, a=<span class="number">1</span>, b=<span class="number">0</span>, c=<span class="number">0</span>, d=<span class="number">1</span>, tx=<span class="number">30</span>, ty=<span class="number">-30</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  H, W, C = _img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># temporary image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">img = np.zeros((H+<span class="number">2</span>, W+<span class="number">2</span>, C), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">img[<span class="number">1</span>:H+<span class="number">1</span>, <span class="number">1</span>:W+<span class="number">1</span>] = _img</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get new image shape</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">H_new = np.round(H * d).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">W_new = np.round(W * a).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">out = np.zeros((H_new+<span class="number">1</span>, W_new+<span class="number">1</span>, C), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get position of new image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">x_new = np.tile(np.arange(W_new), (H_new, <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">y_new = np.arange(H_new).repeat(W_new).reshape(H_new, <span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get position of original image by affine</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">adbc = a * d - b * c</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">x = np.round((d * x_new  - b * y_new) / adbc).astype(np.int) - tx + <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">y = np.round((-c * x_new + a * y_new) / adbc).astype(np.int) - ty + <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#X和Y逐位进行比较,选择最小值.最少接受两个参数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#&gt;&gt; np.maximum([-3, -2, 0, 1, 2], 0); 输出array([0, 0, 0, 1, 2])</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">x = np.minimum(np.maximum(x, <span class="number">0</span>), W+<span class="number">1</span>).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">y = np.minimum(np.maximum(y, <span class="number">0</span>), H+<span class="number">1</span>).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># assgin pixcel to new image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">out[y_new, x_new] = img[y, x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">out = out[:H_new, :W_new]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">out = out.astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// affine</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">affine</span><span class="params">(cv::Mat img, <span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> c, <span class="keyword">double</span> d, <span class="keyword">double</span> tx, <span class="keyword">double</span> ty)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get height and width</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get detriment</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> det = a * d - b * c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Resize width and height</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> resized_width = (<span class="keyword">int</span>)(<span class="built_in">width</span> * a);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> resized_height = (<span class="keyword">int</span>)(<span class="built_in">height</span> * d);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// other parameters</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> x_before, y_before;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> dx, dy, wx, wy, w_sum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> _x, _y;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(resized_height, resized_width, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Affine transformation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; resized_height; y++)&#123;    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; resized_width; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// get original position x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      x_before = (<span class="keyword">int</span>)((d * x - b * y) / det - tx);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> ((x_before &lt; <span class="number">0</span>) || (x_before &gt;= <span class="built_in">width</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// get original position y</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">      y_before = (<span class="keyword">int</span>)((-c * x + a * y) / det - ty);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> ((y_before &lt; <span class="number">0</span>) || (y_before &gt;= <span class="built_in">height</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// assign pixel to new position</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">        out.at&lt;cv::Vec3b&gt;(y, x)[c] = img.at&lt;cv::Vec3b&gt;(y_before, x_before)[c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="二、放大缩小"><a href="#二、放大缩小" class="headerlink" title="二、放大缩小"></a>二、放大缩小</h4><script type="math/tex; mode=display">\begin{pmatrix} x'\\ y'\\ 1\\ \end{pmatrix}=\begin{pmatrix} c_x & 0 & t_x\\ 0 & c_y & t_y\\ 0 & 0 & 1\\ \end{pmatrix}\cdot \begin{pmatrix} x\\ y\\ 1\\ \end{pmatrix}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Affine</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">affine</span><span class="params">(_img, a=<span class="number">1.3</span>, b=<span class="number">0</span>, c=<span class="number">0</span>, d=<span class="number">0.8</span>, tx=<span class="number">30</span>, ty=<span class="number">-30</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  H, W, C = _img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># temporary image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">img = np.zeros((H+<span class="number">2</span>, W+<span class="number">2</span>, C), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">img[<span class="number">1</span>:H+<span class="number">1</span>, <span class="number">1</span>:W+<span class="number">1</span>] = _img</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get new image shape</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">H_new = np.round(H * d).astype(np.int)  <span class="comment">#d-&gt;cy-&gt;h(宽)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">W_new = np.round(W * a).astype(np.int)  <span class="comment">#a-&gt;cx-&gt;w(高)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#这里的+1是为了防止当a,d的小数部分小于0.5数组溢出</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">out = np.zeros((H_new+<span class="number">1</span>, W_new+<span class="number">1</span>, C), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get position of new image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">x_new = np.tile(np.arange(W_new), (H_new, <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">y_new = np.arange(H_new).repeat(W_new).reshape(H_new, <span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get position of original image by affine</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">adbc = a * d - b * c</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">x = np.round((d * x_new  - b * y_new) / adbc).astype(np.int) - tx + <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">y = np.round((-c * x_new + a * y_new) / adbc).astype(np.int) - ty + <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#将坐标限制在合适范围内</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">x = np.minimum(np.maximum(x, <span class="number">0</span>), W+<span class="number">1</span>).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">y = np.minimum(np.maximum(y, <span class="number">0</span>), H+<span class="number">1</span>).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># assgin pixcel to new image，因为为img[h,w]所以为y,x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">out[y_new, x_new] = img[y, x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">out = out[:H_new, :W_new]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">out = out.astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// affine</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">affine</span><span class="params">(cv::Mat img, <span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> c, <span class="keyword">double</span> d, <span class="keyword">double</span> tx, <span class="keyword">double</span> ty)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get height and width</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get detriment</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> det = a * d - b * c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Resize width and height</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> resized_width = (<span class="keyword">int</span>)(<span class="built_in">width</span> * a);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> resized_height = (<span class="keyword">int</span>)(<span class="built_in">height</span> * d);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// other parameters</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> x_before, y_before;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> dx, dy, wx, wy, w_sum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> _x, _y;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(resized_height, resized_width, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Affine transformation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; resized_height; y++)&#123;    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; resized_width; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// get original position x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      x_before = (<span class="keyword">int</span>)((d * x - b * y) / det - tx);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> ((x_before &lt; <span class="number">0</span>) || (x_before &gt;= <span class="built_in">width</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// get original position y</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">      y_before = (<span class="keyword">int</span>)((-c * x + a * y) / det - ty);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> ((y_before &lt; <span class="number">0</span>) || (y_before &gt;= <span class="built_in">height</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// assign pixel to new position</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">        out.at&lt;cv::Vec3b&gt;(y, x)[c] = img.at&lt;cv::Vec3b&gt;(y_before, x_before)[c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="三、旋转"><a href="#三、旋转" class="headerlink" title="三、旋转"></a>三、旋转</h4><p>下面的式子进行逆时针方向旋转 度的仿射变换：</p><script type="math/tex; mode=display">\begin{pmatrix} x'\\ y'\\ 1\\ \end{pmatrix}=\begin{pmatrix} cos(A) & -sin(A) & t_x\\ sin(A) & cos(A) & t_y\\ 0 & 0 & 1\\ \end{pmatrix}\cdot \begin{pmatrix} x\\ y\\ 1\\ \end{pmatrix}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># affine</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">affine</span><span class="params">(_img, a, b, c, d, tx, ty)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">H, W, C = _img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># temporary image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">img = np.zeros((H+<span class="number">2</span>, W+<span class="number">2</span>, C), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">img[<span class="number">1</span>:H+<span class="number">1</span>, <span class="number">1</span>:W+<span class="number">1</span>] = _img</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get shape of new image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">H_new = np.round(H).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">W_new = np.round(W).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">out = np.zeros((H_new, W_new, C), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get position of new image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">x_new = np.tile(np.arange(W_new), (H_new, <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">y_new = np.arange(H_new).repeat(W_new).reshape(H_new, <span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get position of original image by affine</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">adbc = a * d - b * c</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">x = np.round((d * x_new  - b * y_new) / adbc).astype(np.int) - tx + <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">y = np.round((-c * x_new + a * y_new) / adbc).astype(np.int) - ty + <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># adjust center by affine</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">dcx = (x.max() + x.min()) // <span class="number">2</span> - W // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">dcy = (y.max() + y.min()) // <span class="number">2</span> - H // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">x -= dcx</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">y -= dcy</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">x = np.clip(x, <span class="number">0</span>, W + <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">y = np.clip(y, <span class="number">0</span>, H + <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># assign pixcel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">out[y_new, x_new] = img[y, x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">out = out.astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">_img = cv2.imread(<span class="string">"imori.jpg"</span>).astype(np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Affine</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">A = <span class="number">30.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">theta = - np.pi * A / <span class="number">180.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">out = affine(img, a=np.cos(theta), b=-np.sin(theta), c=np.sin(theta), d=np.cos(theta),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"> tx=<span class="number">0</span>, ty=<span class="number">0</span>)</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// affine</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">affine</span><span class="params">(cv::Mat img, <span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> c, <span class="keyword">double</span> d, <span class="keyword">double</span> tx, <span class="keyword">double</span> ty, <span class="keyword">double</span> theta)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get height and width</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get detriment</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> det = a * d - b * c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (theta != <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Affine parameters</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">double</span> rad = theta / <span class="number">180.</span> * M_PI;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    a = <span class="built_in">std</span>::<span class="built_in">cos</span>(rad);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    b = - <span class="built_in">std</span>::<span class="built_in">sin</span>(rad);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    c = <span class="built_in">std</span>::<span class="built_in">sin</span>(rad);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    d = <span class="built_in">std</span>::<span class="built_in">cos</span>(rad);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    tx = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    ty = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">double</span> det = a * d - b * c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// center transition</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">double</span> cx = <span class="built_in">width</span> / <span class="number">2.</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">double</span> cy = <span class="built_in">height</span> / <span class="number">2.</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">double</span> new_cx = (d * cx - b * cy) / det;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">double</span> new_cy = (- c * cx + a * cy) / det;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    tx = new_cx - cx;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    ty = new_cy - cy;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Resize width and height</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> resized_width = (<span class="keyword">int</span>)(<span class="built_in">width</span> * a);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> resized_height = (<span class="keyword">int</span>)(<span class="built_in">height</span> * d);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (theta != <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    resized_width = (<span class="keyword">int</span>)(<span class="built_in">width</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    resized_height = (<span class="keyword">int</span>)(<span class="built_in">height</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// other parameters</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> x_before, y_before;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> dx, dy, wx, wy, w_sum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> _x, _y;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(resized_height, resized_width, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Affine transformation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; resized_height; y++)&#123;    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; resized_width; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// get original position x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">      x_before = (<span class="keyword">int</span>)((d * x - b * y) / det - tx);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> ((x_before &lt; <span class="number">0</span>) || (x_before &gt;= <span class="built_in">width</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// get original position y</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">      y_before = (<span class="keyword">int</span>)((-c * x + a * y) / det - ty);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> ((y_before &lt; <span class="number">0</span>) || (y_before &gt;= <span class="built_in">height</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// assign pixel to new position</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">        out.at&lt;cv::Vec3b&gt;(y, x)[c] = img.at&lt;cv::Vec3b&gt;(y_before, x_before)[c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="四、倾斜（偏移变换-水平、垂直）"><a href="#四、倾斜（偏移变换-水平、垂直）" class="headerlink" title="四、倾斜（偏移变换-水平、垂直）"></a>四、倾斜（偏移变换-水平、垂直）</h4><p>假设原图像的大小为(h, w)，倾斜角度为A，则：</p><p>水平倾斜：</p><script type="math/tex; mode=display">s_h=\frac{A}{h}\\\begin{pmatrix} x'\\ y'\\ 1\\ \end{pmatrix}=\begin{pmatrix} 1 & s_h & t_x\\ 0 & 1 & t_y\\ 0 & 0 & 1\\ \end{pmatrix}\cdot \begin{pmatrix} x\\ y\\ 1\\ \end{pmatrix}</script><p>垂直倾斜：</p><script type="math/tex; mode=display">s_v=\frac{A}{w}\\\begin{pmatrix} x'\\ y'\\ 1\\ \end{pmatrix}=\begin{pmatrix} 1 & 0 & t_x\\ s_v & 1 & t_y\\ 0 & 0 & 1\\ \end{pmatrix}\cdot \begin{pmatrix} x\\ y\\ 1\\ \end{pmatrix}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Affine</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">affine</span><span class="params">(img, dx=<span class="number">30</span>, dy=<span class="number">30</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># get shape</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># Affine hyper parameters</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    a = <span class="number">1.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    b = dx / H</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    c = dy / W</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    d = <span class="number">1.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    tx = <span class="number">0.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    ty = <span class="number">0.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># prepare temporary</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    _img = np.zeros((H+<span class="number">2</span>, W+<span class="number">2</span>, C), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># insert image to center of temporary</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    _img[<span class="number">1</span>:H+<span class="number">1</span>, <span class="number">1</span>:W+<span class="number">1</span>] = img</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># prepare affine image temporary</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    H_new = np.ceil(dy + H).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    W_new = np.ceil(dx + W).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    out = np.zeros((H_new, W_new, C), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># preprare assigned index</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    x_new = np.tile(np.arange(W_new), (H_new, <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    y_new = np.arange(H_new).repeat(W_new).reshape(H_new, <span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># prepare inverse matrix for affine</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    adbc = a * d - b * c</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    x = np.round((d * x_new  - b * y_new) / adbc).astype(np.int) - tx + <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    y = np.round((-c * x_new + a * y_new) / adbc).astype(np.int) - ty + <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    x = np.minimum(np.maximum(x, <span class="number">0</span>), W+<span class="number">1</span>).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    y = np.minimum(np.maximum(y, <span class="number">0</span>), H+<span class="number">1</span>).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># assign value from original to affine image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    out[y_new, x_new] = _img[y, x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    out = out.astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// affine</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">affine</span><span class="params">(cv::Mat img, <span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> c, <span class="keyword">double</span> d, <span class="keyword">double</span> tx, <span class="keyword">double</span> ty, <span class="keyword">double</span> theta, <span class="keyword">double</span> dx, <span class="keyword">double</span> dy)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get height and width</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get detriment</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> det = a * d - b * c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (dx != <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    b = dx / <span class="built_in">height</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (dy != <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    c = dy / <span class="built_in">width</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (theta != <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Affine parameters</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">double</span> rad = theta / <span class="number">180.</span> * M_PI;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    a = <span class="built_in">std</span>::<span class="built_in">cos</span>(rad);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    b = - <span class="built_in">std</span>::<span class="built_in">sin</span>(rad);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    c = <span class="built_in">std</span>::<span class="built_in">sin</span>(rad);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    d = <span class="built_in">std</span>::<span class="built_in">cos</span>(rad);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    tx = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    ty = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">double</span> det = a * d - b * c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// center transition</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">double</span> cx = <span class="built_in">width</span> / <span class="number">2.</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">double</span> cy = <span class="built_in">height</span> / <span class="number">2.</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">double</span> new_cx = (d * cx - b * cy) / det;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">double</span> new_cy = (- c * cx + a * cy) / det;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    tx = new_cx - cx;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    ty = new_cy - cy;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Resize width and height</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> resized_width = (<span class="keyword">int</span>)(<span class="built_in">width</span> * a + dx);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> resized_height = (<span class="keyword">int</span>)(<span class="built_in">height</span> * d + dy);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (theta != <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">    resized_width = (<span class="keyword">int</span>)(<span class="built_in">width</span> + dx);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    resized_height = (<span class="keyword">int</span>)(<span class="built_in">height</span> + dy);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// other parameters</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> x_before, y_before;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(resized_height, resized_width, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Affine transformation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; resized_height; y++)&#123;    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; resized_width; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// get original position x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">      x_before = (<span class="keyword">int</span>)((d * x - b * y) / det - tx);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> ((x_before &lt; <span class="number">0</span>) || (x_before &gt;= <span class="built_in">width</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// get original position y</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">      y_before = (<span class="keyword">int</span>)((-c * x + a * y) / det - ty);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> ((y_before &lt; <span class="number">0</span>) || (y_before &gt;= <span class="built_in">height</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// assign pixel to new position</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> _c = <span class="number">0</span>; _c &lt; channel; _c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">        out.at&lt;cv::Vec3b&gt;(y, x)[_c] = img.at&lt;cv::Vec3b&gt;(y_before, x_before)[_c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图像处理学习&quot;&gt;&lt;a href=&quot;#图像处理学习&quot; class=&quot;headerlink&quot; title=&quot;图像处理学习&quot;&gt;&lt;/a&gt;图像处理学习&lt;/h2&gt;&lt;h5 id=&quot;几何变换：改进图像中像素间的空间关系。在数字图像处理中，几何变换由两个基本操作组成：-1-坐标的空
      
    
    </summary>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/categories/Image-Processing/"/>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/tags/Image-Processing/"/>
    
  </entry>
  
  <entry>
    <title>Image-Process-Two-Plus</title>
    <link href="http://yoursite.com/2021/06/20/Image-Process-Two-Plus/"/>
    <id>http://yoursite.com/2021/06/20/Image-Process-Two-Plus/</id>
    <published>2021-06-20T15:04:03.000Z</published>
    <updated>2021-06-20T15:05:50.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像处理学习"><a href="#图像处理学习" class="headerlink" title="图像处理学习"></a>图像处理学习</h2><h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分+"></a>第一部分+</h4><h4 id="一、伽马矫正"><a href="#一、伽马矫正" class="headerlink" title="一、伽马矫正"></a>一、伽马矫正</h4><p>伽马校正用来对照相机等电子设备传感器的非线性光电转换特性进行校正。如果图像原样显示在显示器等上，画面就会显得很暗。伽马校正通过预先增大RGB 的值来排除显示器的影响，达到对图像修正的目的。</p><script type="math/tex; mode=display">s=cr^\gamma, \quad 其中c和\gamma 为正常数</script><p>如果图像使用如下的非线性变换而得(x被归一化，限定在[0,1])：</p><script type="math/tex; mode=display">x'=c\cdot I_{in}^\gamma</script><p>则，可以使用如下的式子进行gamma校正</p><script type="math/tex; mode=display">I_{out}=\frac{1}{c}\cdot I_{in}^{\frac{1}{\gamma}}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># gamma correction</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gamma_correction</span><span class="params">(img, c=<span class="number">1</span>, g=<span class="number">2.2</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">out = img.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">out /= <span class="number">255.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">out = (<span class="number">1</span>/c * out) ** (<span class="number">1</span>/g)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">out *= <span class="number">255</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">out = out.astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// gamma correction</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">gamma_correction</span><span class="params">(cv::Mat img, <span class="keyword">double</span> gamma_c, <span class="keyword">double</span> gamma_g)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get height and width</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// output image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// gamma correction</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y&lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      val = (<span class="keyword">double</span>)img.at&lt;cv::Vec3b&gt;(y, x)[c] / <span class="number">255</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(y, x)[c] = (uchar)(<span class="built_in">pow</span>(val / gamma_c, <span class="number">1</span> / gamma_g) * <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="二、最近邻插值（Nearest-neighbor-Interpolation-）"><a href="#二、最近邻插值（Nearest-neighbor-Interpolation-）" class="headerlink" title="二、最近邻插值（Nearest-neighbor Interpolation ）"></a>二、最近邻插值（Nearest-neighbor Interpolation ）</h4><p>图像内插在放大、收缩、旋转和几何校正等任务中广泛应用的基本工具。最简单的方法是最近邻插值，在图像放大时补充的像素取最临近的像素的值，但是存在某些直边缘的严重失真。所以这一方法并不常用。可以用一下的公式获取最近邻插值的输出值：</p><script type="math/tex; mode=display">I'(x,y)=I([\frac{x}{a}],[\frac{y}{a}]),I'为放大后图像，I为放大前图像，a为放大率</script><p>上式中的中括号是四舍五入的操作</p><p><img src="/2021/06/20/Image-Process-Two-Plus/1.png" alt="Image-Process-Two-Plus"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nereset Neighbor interpolation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nn_interpolate</span><span class="params">(img, ax=<span class="number">1</span>, ay=<span class="number">1</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">aH = int(ay * H)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">aW = int(ax * W)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">##np.arange()函数返回一个有终点和起点的固定步长的排列</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#numpy.arange()有三种情况</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#1、一个参数时，参数值为终点，起点取默认值0，步长取默认值1。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#2、两个参数时，第一个参数为起点，第二个参数为终点，步长取默认值1。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#3、三个参数时，第一个参数为起点，第二个参数为终点，第三个参数为步长。其中步长支持小数。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#np.repeat()将矩阵A按照给定的axis将每个元素重复repeats次数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">##numpy.repeat(a,repeats,axis=None) repeats可以为一个数，也可以为一个矩阵</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#1、axis=None，时候就会flatten当前矩阵，实际上就是变成了一个行向量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#2、axis=0,沿着y轴复制，实际上增加了行数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#3、axis=1,沿着x轴复制，实际上增加列数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">##np.reshape()在不改变数据内容的情况下，改变一个数组的格式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#numpy.reshape(a,newshape,order='C')</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#order:使用索引顺序读取a的元素，并按照索引顺序将元素放到变换后的的数组中。如果不进行order参数的设置，默认参数为C。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#numpy.arange(n).reshape(a, b) 依次生成n个自然数，并且以a行b列的数组形式显示</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#mat (or array).reshape(c, -1) 必须是矩阵格式或者数组格式，才能使用 .reshape(c, -1) 函数， 表示将此矩阵或者数组重组，以 c行d列的形式表示</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#-1的作用就在此: 自动计算d：d=数组或者矩阵里面所有的元素个数/c, d必须是整数，不然报错）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#（reshape(-1, m)即列数固定，行数需要计算）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">##np.tile() 将原矩阵横向、纵向地复制</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#numpy.tile(a,(channel,cols,rows)) #(维度方向,列方向,行方向)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#numpy.tile(a,(cols,rows)) #(列方向,行方向)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#numpy.tile(a,rows) #(行方向)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">y = np.arange(aH).repeat(aW).reshape(aW, <span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">x = np.tile(np.arange(aW), (aH, <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">y = np.round(y / ay).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">x = np.round(x / ax).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">out = img[y,x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">out = out.astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nearest Neighbor</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">out = nn_interpolate(img, ax=<span class="number">1.5</span>, ay=<span class="number">1.5</span>)</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// nearest nieghbor</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">nearest_neighbor</span><span class="params">(cv::Mat img, <span class="keyword">double</span> rx, <span class="keyword">double</span> ry)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get height and width</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get resized shape</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> resized_width = (<span class="keyword">int</span>)(<span class="built_in">width</span> * rx);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> resized_height = (<span class="keyword">int</span>)(<span class="built_in">height</span> * ry);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> x_before, y_before;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// output image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(resized_height, resized_width, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// nearest neighbor interpolation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; resized_height; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    y_before = (<span class="keyword">int</span>)round(y / ry);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    y_before = fmin(y_before, <span class="built_in">height</span> - <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; resized_width; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      x_before = (<span class="keyword">int</span>)round(x / rx);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">      x_before = fmin(x_before, <span class="built_in">width</span> - <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// assign pixel to new position</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(y, x)[c] = img.at&lt;cv::Vec3b&gt;(y_before, x_before)[c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="三、双线性插值（-Bilinear-Interpolation-）"><a href="#三、双线性插值（-Bilinear-Interpolation-）" class="headerlink" title="三、双线性插值（ Bilinear Interpolation ）"></a>三、双线性插值（ <strong>Bilinear Interpolation</strong> ）</h4><p>双线性插值考察 邻域的像素点，并根据距离设置权值。虽然计算量增大使得处理时间变长，但是可以有效抑制画质劣化。</p><p><img src="/2021/06/20/Image-Process-Two-Plus/2.png" alt="Image-Process-Two-Plus"></p><ol><li>放大后图像的座标 (x’, y’)除以放大率a，可以得到对应原图像的座标 (&lfloor; x’ /a &rfloor;,&lfloor; y’/a&rfloor;)。</li><li>求原图像的座标(&lfloor; x’ /a &rfloor;,&lfloor; y’/a&rfloor;)周围邻域的座标I(x,y), I(x+1,y),I(x,y+1). I(x+1,y+1)。</li><li>分别求这4个点与(&lfloor; x’ /a &rfloor;,&lfloor; y’/a&rfloor;)的距离，根据距离设置权重：w=d/(&sum;d)。</li><li>根据下式求得放大后图像(x’,y’)处的像素值：</li></ol><script type="math/tex; mode=display">d_x=\frac{x'}{a}-a,\quad d_y=\frac{y'}{a}-y</script><script type="math/tex; mode=display">I'(x',y')=(1-d_x)\cdot(1-d_y)\cdot I(x,y)+d_x\cdot (1-d_y)I(x+1,y)+(1-d_x)\cdot d_y\cdot I(x,y+1)+d_x\cdot d_y\cdot I(X+1,Y+1)</script><p>推导：</p><p>由双线性插值的实现，分别在两个方向计算了共3次单线性插。所以</p><script type="math/tex; mode=display">f(R1)=\frac{x_2-x}{x_2-x_1}f(Q_{11})+\frac{x-x1}{x_2-x_1}f(Q_{21})</script><script type="math/tex; mode=display">f(R2)=\frac{x_2-x}{x_2-x_1}f(Q_{12})+\frac{x-x1}{x_2-x_1}f(Q_{22})</script><script type="math/tex; mode=display">f(P)=\frac{y_2-y}{y_2-y_1}f(R1)+\frac{y-y_1}{y_2-y_1}f(R2),将上面两式带入得</script><script type="math/tex; mode=display">f(p)=\frac{f(Q_{11})}{(y_2-y_1)(x_2-x_1)}(y_2-y)(x_2-x)+\frac{f(Q_{21})}{(y_2-y_1)(x_2-x_1)}(y_2-y)(x-x_1)\\+\frac{f(Q_{12})}{(y_2-y_1)(x_2-x_1)}(y-y_1)(x_2-x)+\frac{f(Q_{11})}{(y_2-y_1)(x_2-x_1)}(y-y_1)(x-x_1)</script><script type="math/tex; mode=display">\because y_2=y_1+1, x_2=x_1+1;\quad \therefore y_2-y1=1,x_2-x_1=1</script><script type="math/tex; mode=display">f(p)=f(Q_{11})(y_2-y)(x_2-x)+f(Q_{21})(y_2-y)(x-x_1)+f(Q_{12})(y-y_1)(x_2-x)+f(Q_{11})(y-y_1)(x-x_1)</script><p>因此，f(Q<sub>11</sub>)对应I(x,y),1-d<sub>x</sub>对应x<sub>2</sub>-x。一一对应上去就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Bi-Linear interpolation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bl_interpolate</span><span class="params">(img, ax=<span class="number">1.</span>, ay=<span class="number">1.</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">aH = int(ay * H)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">aW = int(ax * W)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get position of resized image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">y = np.arange(aH).repeat(aW).reshape(aW, <span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">x = np.tile(np.arange(aW), (aH, <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get position of original position</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">y = (y / ay)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">x = (x / ax)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">ix = np.floor(x).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">iy = np.floor(y).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">ix = np.minimum(ix, W<span class="number">-2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">iy = np.minimum(iy, H<span class="number">-2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get distance </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">dx = x - ix</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">dy = y - iy</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">dx = np.repeat(np.expand_dims(dx, axis=<span class="number">-1</span>), <span class="number">3</span>, axis=<span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">dy = np.repeat(np.expand_dims(dy, axis=<span class="number">-1</span>), <span class="number">3</span>, axis=<span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># interpolation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">out = (<span class="number">1</span>-dx) * (<span class="number">1</span>-dy) * img[iy, ix] + dx * (<span class="number">1</span> - dy) * img[iy, ix+<span class="number">1</span>] + (<span class="number">1</span> - dx) * dy * img[iy+<span class="number">1</span>, ix] + dx * dy * img[iy+<span class="number">1</span>, ix+<span class="number">1</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">out = np.clip(out, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">out = out.astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// bilinear</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">bilinear</span><span class="params">(cv::Mat img, <span class="keyword">double</span> rx, <span class="keyword">double</span> ry)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get height and width</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get resized shape</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> resized_width = (<span class="keyword">int</span>)(<span class="built_in">width</span> * rx);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> resized_height = (<span class="keyword">int</span>)(<span class="built_in">height</span> * ry);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> x_before, y_before;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> dx, dy;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// output image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(resized_height, resized_width, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// bi-linear interpolation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; resized_height; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    y_before = (<span class="keyword">int</span>)<span class="built_in">floor</span>(y / ry);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    y_before = fmin(y_before, <span class="built_in">height</span> - <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    dy = y / ry - y_before;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; resized_width; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">      x_before = (<span class="keyword">int</span>)<span class="built_in">floor</span>(x / rx);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">      x_before = fmin(x_before, <span class="built_in">width</span> - <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      dx = x / rx - x_before;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// compute bi-linear</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        val = (<span class="number">1.</span> - dx) * (<span class="number">1.</span> - dy) * img.at&lt;cv::Vec3b&gt;(y_before, x_before)[c] +</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">          dx * (<span class="number">1.</span> - dy) * img.at&lt;cv::Vec3b&gt;(y_before, x_before + <span class="number">1</span>)[c] +</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">          (<span class="number">1.</span> - dx) * dy * img.at&lt;cv::Vec3b&gt;(y_before + <span class="number">1</span>, x_before)[c] +</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">          dx * dy * img.at&lt;cv::Vec3b&gt;(y_before + <span class="number">1</span>, x_before)[c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// assign pixel to new position</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        out.at&lt;cv::Vec3b&gt;(y, x)[c] = (uchar)val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="四、双三次插值（Bicubic-Interpolation）"><a href="#四、双三次插值（Bicubic-Interpolation）" class="headerlink" title="四、双三次插值（Bicubic Interpolation）"></a>四、双三次插值（Bicubic Interpolation）</h4><p>双三次插值是双线性插值的扩展，双三次插值又叫立方卷积插值，它是利用了待求像素点在源图像中相邻的16个像素点的值，即这16个像素点的加权平均。双三次内插在保持细节方面比双线性内插相对要好。</p><p><img src="/2021/06/20/Image-Process-Two-Plus/3.png" alt="Image-Process-Two-Plus"></p><p>双立法和三次卷积只是这个插值算法的两种不同叫法而已，可以自行推导，会发现最终可以将求值转化为卷积公式：</p><script type="math/tex; mode=display">f(i+u,j+v)=A\times B\times C</script><p>其中：</p><script type="math/tex; mode=display">A=[w(1+u),w(u),w(1-u),w(2-u)]</script><script type="math/tex; mode=display">C=[w(1+v),w(v),w(1-v),w(2-v)]^T</script><script type="math/tex; mode=display">B=\begin{bmatrix}f(i-1,j-1) & f(i-1,j+0) & f(i-1,j+1) & f(i-1,j+2) \\ f(i+0,j-1) & f(i+0,j+0) & f(i+0,j+1) & f(i+0,j+2)\\f(i+1,j-1) & f(i+1,j+0) & f(i+1,j+1) & f(i+1,j+2)\\f(i+2,j-1) & f(i+2,j+0) & f(i+2,j+1) & f(i+2,j+2)  \end{bmatrix}</script><p>插值核w(x)为：</p><script type="math/tex; mode=display">w(x)=\begin{cases}1-2|x|^2+|x|^3, & \text{|x|<1}  \\4-8|x|+5|x|^2-|x|^3, & 1\leq|x|<2 \\0, & |x| \geq2\end{cases}</script><p><img src="/2021/06/20/Image-Process-Two-Plus/4.png" alt="Image-Process-Two-Plus"></p><p>各自像素间的距离由下式决定：</p><script type="math/tex; mode=display">d_{x_1}=\left|\frac{x'}{ax}-(x-1) \right|,d_{x_2}=\left|\frac{x'}{ax}-x \right|,d_{x_3}=\left|\frac{x'}{ax}-(x+1) \right|,d_{x_4}=\left|\frac{x'}{ax}-(x+2) \right|</script><script type="math/tex; mode=display">d_{y_1}=\left|\frac{y'}{ax}-(y-1) \right|,d_{y_2}=\left|\frac{y'}{ay}-y \right|,d_{y_3}=\left|\frac{y'}{ay}-(y+1) \right|,d_{y_4}=\left|\frac{y'}{ay}-(y+2) \right|</script><script type="math/tex; mode=display">上式中，\frac{x'}{ax}-x=u;\frac{y'}{ay}-y=v.所以和上面A矩阵中w的变量是一致的</script><p>利用上面得到的权重w，通过下面的式子扩大图像。将每个像素与权重的乘积之和除以权重的和。</p><script type="math/tex; mode=display">I'(x',y')=\frac{1}{\sum^4_{j=1}\sum^4_{i=1}w(d_{x_i})w(d_{y_j})}\cdot \sum^4_{j=1}\sum^4_{i=1}I(x+i-2,y+j-2)w(d_{x_i})w(d_{y_j})</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Bi-cubic interpolation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bc_interpolate</span><span class="params">(img, ax=<span class="number">1.</span>, ay=<span class="number">1.</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">aH = int(ay * H)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">aW = int(ax * W)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get positions of resized image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">y = np.arange(aH).repeat(aW).reshape(aW, <span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">x = np.tile(np.arange(aW), (aH, <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">y = (y / ay)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">x = (x / ax)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get positions of original image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">ix = np.floor(x).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">iy = np.floor(y).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">ix = np.minimum(ix, W<span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">iy = np.minimum(iy, H<span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get distance of each position of original image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">dx2 = x - ix</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">dy2 = y - iy</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">dx1 = dx2 + <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">dy1 = dy2 + <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">dx3 = <span class="number">1</span> - dx2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">dy3 = <span class="number">1</span> - dy2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">dx4 = <span class="number">1</span> + dx3</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">dy4 = <span class="number">1</span> + dy3</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">dxs = [dx1, dx2, dx3, dx4]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">dys = [dy1, dy2, dy3, dy4]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># bi-cubic weight</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight</span><span class="params">(t)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">a = <span class="number">-1.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">at = np.abs(t)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">w = np.zeros_like(t)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">ind = np.where(at &lt;= <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">w[ind] = ((a+<span class="number">2</span>) * np.power(at, <span class="number">3</span>) - (a+<span class="number">3</span>) * np.power(at, <span class="number">2</span>) + <span class="number">1</span>)[ind]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">ind = np.where((at &gt; <span class="number">1</span>) &amp; (at &lt;= <span class="number">2</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">w[ind] = (a*np.power(at, <span class="number">3</span>) - <span class="number">5</span>*a*np.power(at, <span class="number">2</span>) + <span class="number">8</span>*a*at - <span class="number">4</span>*a)[ind]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> w</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">w_sum = np.zeros((aH, aW, C), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">out = np.zeros((aH, aW, C), dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># interpolate</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">-1</span>, <span class="number">3</span>):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">-1</span>, <span class="number">3</span>):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">ind_x = np.minimum(np.maximum(ix + i, <span class="number">0</span>), W<span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">ind_y = np.minimum(np.maximum(iy + j, <span class="number">0</span>), H<span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">wx = weight(dxs[i+<span class="number">1</span>])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">wy = weight(dys[j+<span class="number">1</span>])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">wx = np.repeat(np.expand_dims(wx, axis=<span class="number">-1</span>), <span class="number">3</span>, axis=<span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">wy = np.repeat(np.expand_dims(wy, axis=<span class="number">-1</span>), <span class="number">3</span>, axis=<span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">w_sum += wx * wy</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">out += wx * wy * img[ind_y, ind_x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">out /= w_sum</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">out = np.clip(out, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">out = out.astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// weight function</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">h</span><span class="params">(<span class="keyword">double</span> t)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> a = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (<span class="built_in">fabs</span>(t) &lt;= <span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> (a + <span class="number">2</span>) * <span class="built_in">pow</span>(<span class="built_in">fabs</span>(t), <span class="number">3</span>) - (a + <span class="number">3</span>) * <span class="built_in">pow</span>(<span class="built_in">fabs</span>(t), <span class="number">2</span>) + <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">fabs</span>(t) &lt;= <span class="number">2</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> a * <span class="built_in">pow</span>(<span class="built_in">fabs</span>(t), <span class="number">3</span>) - <span class="number">5</span> * a * <span class="built_in">pow</span>(<span class="built_in">fabs</span>(t), <span class="number">2</span>) + <span class="number">8</span> * a * <span class="built_in">fabs</span>(t) - <span class="number">4</span> * a;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &#125; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// clip value [*, *] -&gt; [min, max]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">val_clip</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> <span class="built_in">min</span>, <span class="keyword">int</span> <span class="built_in">max</span>)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> fmin(fmax(x, <span class="built_in">min</span>), <span class="built_in">max</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// bicubic</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">bicubic</span><span class="params">(cv::Mat img, <span class="keyword">double</span> rx, <span class="keyword">double</span> ry)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get height and width</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get resized shape</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> resized_width = (<span class="keyword">int</span>)(<span class="built_in">width</span> * rx);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> resized_height = (<span class="keyword">int</span>)(<span class="built_in">height</span> * ry);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> x_before, y_before;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> dx, dy, wx, wy, w_sum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> _x, _y;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// output image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(resized_height, resized_width, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// bi-cubic interpolation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; resized_height; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    dy = y / ry;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    y_before = (<span class="keyword">int</span>)<span class="built_in">floor</span>(dy);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; resized_width; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">      dx = x / rx;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">      x_before = (<span class="keyword">int</span>)<span class="built_in">floor</span>(dx);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">        w_sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">        val = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// bi-cubic computation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">-1</span>; j &lt; <span class="number">3</span>; j++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">          _y = val_clip(y_before + j, <span class="number">0</span>, <span class="built_in">height</span> - <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">          wy = h(<span class="built_in">fabs</span>(dy - _y));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">          </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">-1</span>; i &lt; <span class="number">3</span>; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">            _x = val_clip(x_before + i, <span class="number">0</span>, <span class="built_in">width</span> - <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">            wx = h(<span class="built_in">fabs</span>(dx - _x));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">            w_sum += wy * wx;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">            val += (<span class="keyword">double</span>)img.at&lt;cv::Vec3b&gt;(_y, _x)[c] * wx * wy;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">      val /= w_sum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">      val = val_clip(val, <span class="number">0</span>, <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// assign pixel to new position</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(y, x)[c] = (uchar)val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><blockquote><p>Cubic Convolution Interpolation for Digital Image Processing</p></blockquote><p><a href="https://dailc.github.io/2017/11/01/imageprocess_bicubicinterpolation.html" target="_blank" rel="noopener">双三次插值：参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图像处理学习&quot;&gt;&lt;a href=&quot;#图像处理学习&quot; class=&quot;headerlink&quot; title=&quot;图像处理学习&quot;&gt;&lt;/a&gt;图像处理学习&lt;/h2&gt;&lt;h4 id=&quot;第一部分&quot;&gt;&lt;a href=&quot;#第一部分&quot; class=&quot;headerlink&quot; title=&quot;第
      
    
    </summary>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/categories/Image-Processing/"/>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/tags/Image-Processing/"/>
    
  </entry>
  
  <entry>
    <title>Image-Process-Two</title>
    <link href="http://yoursite.com/2021/06/19/Image-Process-Two/"/>
    <id>http://yoursite.com/2021/06/19/Image-Process-Two/</id>
    <published>2021-06-19T13:19:57.000Z</published>
    <updated>2021-06-19T13:20:38.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像处理学习"><a href="#图像处理学习" class="headerlink" title="图像处理学习"></a>图像处理学习</h2><h4 id="一、直方图"><a href="#一、直方图" class="headerlink" title="一、直方图"></a>一、直方图</h4><p>图像直方图主要用来分析图像灰度的分布情况，从直方图的统计中可以看出图像是整体偏暗还是整体偏亮。一幅图像由不同灰度值的像素组成，图像中灰度的分布情况是该图像的一个重要特征。图像的灰度直方图就描述了图像中灰度分布情况，能够很直观的展示出图像中各个灰度级所占的多少。</p><p>灰度级范围[0, L-1]的数字直方图是离散函数h(r<sub>k</sub>)=n<sub>k</sub>,其中r<sub>k</sub>是第k极灰度级，n<sub>k</sub>是图像中灰度为r<sub>k</sub>的像素个数。在实践中，经常用MN表示的图像像素的总数除以每个分量的个数来归一化直方图(M和N代表一张图的行和列)。因此，归一化的直方图由p(r<sub>k</sub>)=n<sub>k</sub>/MN给出，其中，k=0, 1, … , L-1。所以归一化后的直方图所有分量和应该为1。</p><p>直方图可以给出表示特定灰度值的像素个数，归一化后的直方图表示特定灰度值在一张图中出现的概率。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//gray image histogram</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">calHistogram</span><span class="params">(cv::Mat img, Map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;histogram)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> h = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> w = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>; c&lt;h; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; r&lt;w; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> grayValue = img.at&lt;uchar&gt;(y,x);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">auto</span> iter = histogram.<span class="built_in">find</span>(grayValue);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(iter == histogram.<span class="built_in">end</span>())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                histogram[grayValue]=<span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                iter-&gt;second += <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="二、直方图归一化-Histogram-Normalization"><a href="#二、直方图归一化-Histogram-Normalization" class="headerlink" title="二、直方图归一化(Histogram Normalization)"></a>二、直方图归一化(Histogram Normalization)</h4><p>h[i] (i=0, 1, … , 255)是任意灰度级为i处像素的概率。H[i]是累积密度分布函数，H[255]=1</p><script type="math/tex; mode=display">h[i]=\frac{Number\quad of\quad pixels\quad of\quad gray\quad level\quad i}{Total \quad number \quad of \quad pixels},\quad\quad  H[i]=\sum^{j}_{i=0}h[i],\quad (j=0,1,...,255)</script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//Here is the code for finding the histogram of a given image img of glevel=256 gray levels(an 8-bit image) and of size M x N:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;glevel; k++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    H[k]=h[k]=<span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;N; j++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        g=img[i][j];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        h[g]=h[g]+<span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">H[<span class="number">0</span>]=h[<span class="number">0</span>]/M/N;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;glevel; k++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    h[k]=h[k]/M/N;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    H[k]=H[k<span class="number">-1</span>]=h[k];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>为了正确显示灰度图像，它的取值范围必须在[0, 255]内(2^8=256)。然而在经过某种处理操作后，图像的灰度级可能发生了变化，所以需要进行归一化(normalized or rescaled)。</p><script type="math/tex; mode=display">y=f(x)=255\cdot\frac{x-x_{min}}{x_{max}-x_{min}}</script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">min</span>=LARGE;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">max</span>=-<span class="built_in">min</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;N; j++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(img[i][j] &lt; <span class="built_in">min</span>) <span class="built_in">min</span>=img[i][j];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(img[i][j] &gt; <span class="built_in">max</span>) <span class="built_in">max</span>=img[i][j];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">scale = <span class="number">255.0</span> / (<span class="built_in">max</span>-<span class="built_in">min</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;N; j++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        img[i][j]=scale*(img[i][j]-<span class="built_in">min</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><a href="http://fourier.eng.hmc.edu/e161/lectures/digital_image/node9.html" target="_blank" rel="noopener">参考</a></p><h4 id="三、High-Dynamic-Range-HDR-imaging"><a href="#三、High-Dynamic-Range-HDR-imaging" class="headerlink" title="三、High Dynamic Range (HDR) imaging"></a>三、High Dynamic Range (HDR) imaging</h4><p>大多数数码相机和显示器以 24 位矩阵的形式捕获或显示彩色图像。 每个颜色通道有 8 位，因此每个通道的像素值在 0 – 255 的范围内。 换句话说，普通相机或显示器的动态范围有限。 </p><p>然而，我们周围的世界具有非常大的动态范围。 当灯光关闭时，车库内可能会变得漆黑一片，如果您直视太阳，它会变得非常亮。 即使不考虑这些极端情况，在日常情况下，8 位也几乎不足以捕捉场景。 因此，相机会尝试估计照明并自动设置曝光，以便图像最有趣的方面具有良好的动态范围，而太暗和太亮的部分分别被剪裁为 0 和 255。</p><p><strong>如何生成高动态范围的图像？</strong></p><ul><li><h3 id="Step-1-Capture-multiple-images-with-different-exposures"><a href="#Step-1-Capture-multiple-images-with-different-exposures" class="headerlink" title="Step 1: Capture multiple images with different exposures"></a>Step 1: Capture multiple images with different exposures</h3><p>当我们使用相机拍照时，我们每个通道只有 8 位来表示场景的动态范围（亮度范围）。 但是我们可以通过改变快门速度以不同的曝光拍摄场景的多张图像。 大多数单反相机都有一项称为自动包围曝光 (AEB) 的功能，只需按一下按钮，我们就可以以不同的曝光度拍摄多张照片。 如果您使用的是 iPhone，您可以使用这个 AutoBracket HDR 应用程序，如果您是安卓用户，您可以尝试 A Better Camera 应用程序。 </p><ol><li>曝光不足的图像：此图像比正确曝光的图像更暗。 目标是捕获图像中非常明亮的部分。 </li><li>正确曝光的图像：这是相机根据其估计的照明度拍摄的常规图像。 </li><li>过度曝光的图像：该图像比正确曝光的图像更亮。 目标是捕获图像中非常暗的部分。 </li></ol></li><li><h3 id="Step-2-Align-Images"><a href="#Step-2-Align-Images" class="headerlink" title="Step 2: Align Images"></a>Step 2: Align Images</h3><p>用于合成 HDR 图像的图像未对齐会导致严重的伪影。</p></li><li><h3 id="Step-3-Recover-the-Camera-Response-Function"><a href="#Step-3-Recover-the-Camera-Response-Function" class="headerlink" title="Step 3: Recover the Camera Response Function"></a>Step 3: Recover the Camera Response Function</h3><p>典型相机的响应与场景亮度不是线性的。 这意味着什么？ 假设用相机拍摄了两个物体，其中一个物体的亮度是现实世界中另一个物体的两倍。 当你测量照片中两个物体的像素强度时，较亮物体的像素值不会是较暗物体的两倍！ 如果不估计相机响应函数 (CRF)，我们将无法将图像合并为一张 HDR 图像。 </p><p>如果我们知道每张图像的曝光时间，就可以从图像中估计 CRF。 与计算机视觉中的许多问题一样，找到 CRF 的问题被设置为优化问题，其目标是最小化由数据项和平滑项组成的目标函数。 这些问题通常归结为线性最小二乘问题，这些问题使用奇异值分解 (SVD) 解决，这是所有线性代数包的一部分。</p></li><li><h3 id="Step-4-Merge-Images"><a href="#Step-4-Merge-Images" class="headerlink" title="Step 4: Merge Images"></a>Step 4: Merge Images</h3><p>一旦估计了CRF，就可以使用 MergeDebevec 将曝光图像合并为一张 HDR 图像。</p></li><li><h3 id="Step-5-Tone-mapping"><a href="#Step-5-Tone-mapping" class="headerlink" title="Step 5: Tone mapping"></a>Step 5: Tone mapping</h3><p>尽管我们已经使用多张图像恢复了相对亮度信息，但我们现在面临着将这些信息保存为 24 位图像以供显示的挑战。 有几种色调映射算法。 OpenCV 实现了其中的四个。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readImagesAndTimes</span><span class="params">(<span class="built_in">vector</span>&lt;Mat&gt; &amp;images, <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; &amp;times)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> numImages = <span class="number">4</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// List of exposure times</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">float</span> timesArray[] = &#123;<span class="number">1</span>/<span class="number">30.0f</span>,<span class="number">0.25</span>,<span class="number">2.5</span>,<span class="number">15.0</span>&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  times.assign(timesArray, timesArray + numImages);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// List of image filenames</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* filenames[] = &#123;<span class="string">"img_0.033.jpg"</span>, <span class="string">"img_0.25.jpg"</span>, <span class="string">"img_2.5.jpg"</span>, <span class="string">"img_15.jpg"</span>&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; numImages; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    Mat im = imread(filenames[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    images.push_back(im);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    Ptr&lt;AlignMTB&gt; alignMTB = createAlignMTB();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    alignMTB-&gt;<span class="built_in">process</span>(images, images);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Obtain Camera Response Function (CRF)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    Mat responseDebevec;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    Ptr&lt;CalibrateDebevec&gt; calibrateDebevec = createCalibrateDebevec();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    calibrateDebevec-&gt;<span class="built_in">process</span>(images, responseDebevec, times);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Merge images into an HDR linear image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    Mat hdrDebevec;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    Ptr&lt;MergeDebevec&gt; mergeDebevec = createMergeDebevec();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    mergeDebevec-&gt;<span class="built_in">process</span>(images, hdrDebevec, times, responseDebevec);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Save HDR image.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    imwrite(<span class="string">"hdrDebevec.hdr"</span>, hdrDebevec);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//createTonemapDrago(</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//float gamma = 1.0f,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//float saturation = 1.0f, </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//float bias = 0.85f)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Tonemap using Drago's method to obtain 24-bit color image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    Mat ldrDrago;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    Ptr&lt;TonemapDrago&gt; tonemapDrago = createTonemapDrago(<span class="number">1.0</span>, <span class="number">0.7</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    tonemapDrago-&gt;<span class="built_in">process</span>(hdrDebevec, ldrDrago);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    ldrDrago = <span class="number">3</span> * ldrDrago;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    imwrite(<span class="string">"ldr-Drago.jpg"</span>, ldrDrago * <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><a href="https://learnopencv.com/high-dynamic-range-hdr-imaging-using-opencv-cpp-python/" target="_blank" rel="noopener">参考</a></p><h4 id="四、直方图操作"><a href="#四、直方图操作" class="headerlink" title="四、直方图操作"></a>四、直方图操作</h4><h5 id="4-1-分段线性变换函数（分为线性和非线性）"><a href="#4-1-分段线性变换函数（分为线性和非线性）" class="headerlink" title="4.1 分段线性变换函数（分为线性和非线性）"></a><strong>4.1 分段线性变换函数</strong>（分为线性和非线性）</h5><p>一种情况，像素点取值范围从[c,d]转换到[a,b]的过程由下式定义:</p><script type="math/tex; mode=display">x_{out}=\begin{cases} a \quad \quad \quad \quad \quad \quad \quad  \quad(if\quad x_{in}<c) \\ \frac{b-a}{d-c}\cdot(x_{in}-c)+a\quad (else\quad if\quad c\leq x_{in}<d) \\b\quad \quad \quad \quad \quad \quad \quad \quad(else)\end{cases}</script><p>下面以直方图归一化为例，参照第二部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># histogram normalization</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hist_normalization</span><span class="params">(img, a=<span class="number">0</span>, b=<span class="number">255</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get max and min</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">c = img.min()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">d = img.max()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">out = img.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># normalization</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">out = (b-a) / (d - c) * (out - c) + a</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">out[out &lt; a] = a</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">out[out &gt; b] = b</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">out = out.astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// histogram normalization</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">histogram_normalization</span><span class="params">(cv::Mat img, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get height and width</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> c, d;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get [c, d]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> _c = <span class="number">0</span>; _c &lt; channel; _c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        val = (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(y, x)[_c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        c = fmin(c, val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        d = fmax(d, val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// histogram transformation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> ( <span class="keyword">int</span> _c = <span class="number">0</span>; _c &lt; <span class="number">3</span>; _c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        val = img.at&lt;cv::Vec3b&gt;(y, x)[_c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (val &lt; a)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">          out.at&lt;cv::Vec3b&gt;(y, x)[_c] = (uchar)a;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (val &lt;= b)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">          out.at&lt;cv::Vec3b&gt;(y, x)[_c] = (uchar)((b - a) / (d - c) * (val - c) + a);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">          out.at&lt;cv::Vec3b&gt;(y, x)[_c] = (uchar)b;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>最简单的分段线性函数之一是<strong>对比度拉伸变换</strong>。低对比度图像可由照明不足、成像传感器动态范围大小，甚至在图像获取过程中镜头光圈设置错误引起。对比度拉伸时扩展图像灰度级动态范围的处理，因此，它可以跨越记录介质和显示装置的全部灰度范围。</p><h4 id="五、直方图均衡化"><a href="#五、直方图均衡化" class="headerlink" title="五、直方图均衡化"></a>五、直方图均衡化</h4><p>假设图像具有连续的灰度值，变量r表示待处理图像的灰度，假设r的取值范围为[0, L-1]，r=0表示黑色，r=L-1表示白色。要让一幅图像的像素倾向于占据整个灰度级并且分布均匀。那么考虑下面的变换函数：</p><script type="math/tex; mode=display">s=T(r),\quad 0\leq r \leq L-1\quad (灰度映射)</script><p>对于输入图像中的每个具有r值的像素值，产生一个输出灰度值s。假设：</p><ol><li>T(r)在区间0 &leq; r &leq; L-1上为单调递增函数</li><li>当0 &leq; r &leq; L-1时，0 &leq; T(r) &leq; L-1</li></ol><script type="math/tex; mode=display">r=T^{-1}(s), 0\leq s \leq L-1</script><p>上式需要条件1为严格单调递增函数。<strong>两个方向的映射都是一对一的</strong></p><p>一副图像的灰度级可看作是区间[0, L-1]内的随机变量。而随机变量的基本描述子是其概率密度函数(PDF)。令p<sub>r</sub>和p<sub>s</sub>分别为随机变量r和随机变量s的概率密度函数。</p><p>由于随机变量r, s为随机变量，且s=T(r), r的随机概率密度函数为p<sub>r</sub>,T(r)连续，可微。则可以推导出变换(映射)后随机变量s的概率密度函数为：</p><script type="math/tex; mode=display">p_S(s)=p_r(r)\left\lvert\frac{dr}{ds}\right\rvert, \quad \frac{dr}{ds}\geq0（非负性）</script><p>推导，由概率论中随机变量函数的分布(这里是一维)的知识可知：</p><p>设X的概率密度函数为f<sub>X</sub>(x)，y=g(x)，Y=g(X)，求f<sub>Y</sub>(x) </p><script type="math/tex; mode=display">1、用F_X(x)表示F_Y(x); 2、两边对x求导。其中，F_X(x)=P\{X\leq x\},F_Y(x)=p\{Y\leq x\}</script><p>则：（S和R表示随机变量，集体到表达式用s，r表示）</p><script type="math/tex; mode=display">F_S(s)=P\{S\leq s\}=P\{T(R)\leq s\}(解不等式)\quad \\=P\{R\leq T^{-1}(s)\}=F_R\{T^{-1}(s)\}</script><p>两边同时对s求导，得：</p><script type="math/tex; mode=display">\frac{\partial F_S(s)}{\partial s}=\frac{\partial F_R(T^{-1}(s))}{\partial s} (复合函数求导)  \quad \quad \quad \quad \quad \quad \quad \quad</script><script type="math/tex; mode=display">p_S(s)=F_R^\prime(T^{-1}(s))\cdot\frac{\partial(T^{-1}(s))}{\partial s}=p_R[T^{-1}(s)]\cdot[T^{-1}(s)]^\prime</script><script type="math/tex; mode=display">\because s=T(r),r=T^{-1}(s), \quad \therefore p_S(s)=p_R(r)\cdot\left \lvert\frac{dr}{ds}\right\rvert</script><p>同时，由于灰度值s满足的1和2的条件，可以得出<strong>变换函数</strong>的形式为：(均衡化的关键)</p><script type="math/tex; mode=display">s=T(r)=(L-1)\int_0^rp_r(w)dw, (w为积分变量)\\r\in[0,L-1],\int_0^rp_r(w)dw=p\in[0,1]</script><p>由基本积分学中莱布尼茨准则，关于上限的定积分的导数是被积函数在该上线上的值，即</p><script type="math/tex; mode=display">\frac{ds}{dr}=\frac{dT(r)}{dr}=(L-1)\cdot \frac{d}{dr}\left[\int_0^rp_r(w)dw\right]=(L-1)\cdot p_r(r)</script><p>则：</p><script type="math/tex; mode=display">p_s(s)=p_r(r)\left|\frac{dr}{ds}\right|=p_r(r)\cdot \left|\frac{1}{(L-1)}\right|=\frac{1}{L-1}, 0\leq s\leq L-1</script><p>得出，p<sub>s</sub>是一个均匀概率密度函数，且与p<sub>r</sub>的形式无关。尽管s的取值与p<sub>r</sub>有关。</p><p>对于离散的情况，使用概率(直方图纵坐标值)和求和来代替概率密度函数和积分，一副图像中灰度级为r<sub>k</sub>出现的概率为：</p><script type="math/tex; mode=display">p_r(k_r)=\frac{n_k}{MN},K=0,1,2,...,L-1</script><p>则上述s的离散形式为：</p><script type="math/tex; mode=display">s_k=T(r_k)=(L-1)\sum^{k}_{j=0}p_r(r_j)=\frac{(L-1)}{MN}\sum^{k}_{j=0}n_j,j=0,1,2,...,L-1</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># histogram equalization</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hist_equal</span><span class="params">(img, z_max=<span class="number">255</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">S = H * W * C * <span class="number">1.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">out = img.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">sum_h = <span class="number">0.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">255</span>):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">ind = np.where(img == i)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">sum_h += len(img[ind])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">z_prime = z_max / S * sum_h</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">out[ind] = z_prime</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">out = out.astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// histogram equalization</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">histogram_equalization</span><span class="params">(cv::Mat img)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get height and width</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// output image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// histogram equalization hyper-parameters</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> Zmax = <span class="number">255</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> hist[<span class="number">255</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> S = <span class="built_in">height</span> * <span class="built_in">width</span> * channel;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> hist_sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// histogram initialization</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">     hist[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get histogram sum</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        val = (<span class="keyword">int</span>)img.at&lt;cv::Vec3b&gt;(y, x)[c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        hist[val] ++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// histogram equalization</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        val = (<span class="keyword">int</span>)img.at&lt;cv::Vec3b&gt;(y, x)[c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// get histogram sum &lt;= current pixel value</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">        hist_sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; val; l++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">          hist_sum += hist[l];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// assign equalized value</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">        out.at&lt;cv::Vec3b&gt;(y, x)[c] = (uchar)(Zmax / S * hist_sum);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="六、直方图匹配（直方图规定化）"><a href="#六、直方图匹配（直方图规定化）" class="headerlink" title="六、直方图匹配（直方图规定化）"></a>六、直方图匹配（直方图规定化）</h4><p>对于某些应用，采用均匀直方图的基本增强并不是最好的方法，有时希望处理后的图像具有规定的直方图形状可能更有用。这种用于产生处理后有特殊直方图的方法称为直方图匹配或直方图规定化。</p><p>假设存在连续随机变量r和z，并令p<sub>r</sub>(r)和p<sub>z</sub>(z)表示他们所对应的连续概率密度函数。r和z分别表示输入图像和输出图像的灰度级。要求z=G(y)，y=T(r)，使得z具有规定的直方图。如何将z和r进行映射？通过直方图均衡化，假设r和z图像均衡化后的直方图一致。</p><p>令s为一个有如下特性的随机变量：(什么特性？s的概率密度函数是一个均匀分布，也就是经过了直方图均衡化图像后的灰度图像)</p><script type="math/tex; mode=display">s=T(r)=(L-1)\int_0^rp_r(w)dw, (w为积分假变量)\quad （1）</script><p>假设规定直方图的随机变量为z，z具有如下的特性(s<sup>*</sup>和s没有直接关系):</p><script type="math/tex; mode=display">s^* =G(z)=(L-1)\int_0^zp_z(t)dt,(t为积分假变量)\quad （2）</script><p>假设两者均衡化后的结果相同，即：</p><script type="math/tex; mode=display">p_S(s)=\frac{1}{L-1},0\leq s\leq L-1</script><p>那么，</p><script type="math/tex; mode=display">G(z)=s=T(r)</script><p>因此，</p><script type="math/tex; mode=display">z=G^{-1}[T(r)]=G^{-1}(s)</script><p>可以看出，z的取值由s给出，而s的取值由输入图像中的灰度r给出。</p><p>那么如何由一副给定图像得到一副其灰度级具有指定概率密度函数的图像？</p><ol><li>由输入图像得到p<sub>r</sub>，并由(1)求得s的值。</li><li>由(2)中指定的概率密度函数求得变换函数G(z)。</li><li>求得反变换函数z=G<sup>-1</sup>(s)；因为z由s映射得到，所以该处理是s到z的映射。</li><li>利用第1步得到的均衡后的输出图像(像素值为s)中的每个像素执行第3步中的反映射，从而获得输出图像。</li></ol><p>在输入函数的概率密度函数和规定化图像的概率密度函数已知的情况下，可以直接根据r到s的映射和s到z的映射，直接获得r到z的映射。</p><p>上述给出了直方图规定化的原理，但在具体的实践中，困难在于寻找满足规定化的直方图和原始图像的概率密度函数需要在直方图均衡化后的概率密度函数相同。在处理离散量时，该问题被大大简化。仅希望得到一个近似的直方图。</p><p>由于直方图均衡化变换的离散形式如下：</p><script type="math/tex; mode=display">s_k=T(r_k)=(L-1)\sum^{k}_{j=0}p_r(r_j)=\frac{(L-1)}{MN}\sum^{k}_{j=0}n_j,j=0,1,2,...,L-1</script><p>给定一个规定的s<sub>k</sub>值，式2的离散形式涉及计算变换函数：</p><script type="math/tex; mode=display">G(z_q)=(L-1)\sum_{i=0}^{q}p_z(z_i),对于一个q值，有G(z_q)=s_k</script><p>其中，p<sub>z</sub>(z<sub>i</sub>)是规定的直方图的第i个值的概率。与前面一样，用反变换找到期望的值z<sub>q</sub></p><script type="math/tex; mode=display">z_q=G^{-1}(s_k)</script><p>该操作对每一个s值给出一个z值。</p><p>具体离散的例子可以看数字图像处理(第三版)例(3-8)</p><p><strong>给出一个正太分布的例子</strong>：将平均值为m标准差为s的直方图变成平均值为m<sub>0</sub>标准差为s<sub>0</sub>的直方图。可以使用下式计算：</p><script type="math/tex; mode=display">x_{out}=\frac{s_0}{s_1}\cdot(x_{in}-m)+m_0</script><p>用直方图规定化进行推导：</p><p>正态分布的概率密度函数为：</p><script type="math/tex; mode=display">\phi(x)=\frac{1}{\sqrt{2\pi}\cdot\sigma}\cdot e^{-\frac{(x-\mu)^2}{2\cdot\sigma^2}},-\infty\leq x\leq\infty\quad 记为X\sim N(\mu,\sigma^2)</script><p>对应的分布函数为：</p><script type="math/tex; mode=display">\Phi(X)=\frac{1}{\sqrt{2\pi}}\cdot\int_{-\infty}^xe^{-\frac{(t-\mu)^2}{2\cdot \sigma^2}}dt</script><p>标准的正态分布的概率密度函数：</p><script type="math/tex; mode=display">\phi_0(x)=\frac{1}{\sqrt{2\pi}}\cdot e^{-\frac{x^2}{2}},-\infty\leq x\leq\infty\quad 记为X\sim N(0,1)</script><p>对应的分布函数为：</p><script type="math/tex; mode=display">\Phi_0(X)=\frac{1}{\sqrt{2\pi}}\cdot\int_{-\infty}^xe^{-\frac{t^2}{2}}dt</script><p>计算的时候要将一般的正态分布转换为标准的正态分布</p><p>概率密度函数的转换：</p><script type="math/tex; mode=display">\phi(x)=\frac{1}{\sqrt{2\pi}\cdot\sigma}\cdot e^{-\frac{(x-\mu)^2}{2\cdot\sigma^2}}=\frac{1}{\sigma}\cdot\left[\frac{1}{\sqrt{2\pi}}\cdot e^{-\frac{(\frac{x-u}{\sigma})^2}{2}}\right]=\frac{1}{\sigma}\phi_0\left(\frac{x-u}{\sigma}\right)</script><p>分布函数的转换：</p><script type="math/tex; mode=display">\Phi(X)=\frac{1}{\sqrt{2\pi}}\cdot\int_{-\infty}^xe^{-\frac{(t-\mu)^2}{2\cdot \sigma^2}}dt=\frac{1}{\sqrt{2\pi}}\int_{-\infty}^xe^{-\frac{(\frac{t-\mu}{\sigma})^2}{2}}d(\frac{t-\mu}{\sigma})=\Phi_0\left(\frac{x-u}{\sigma}\right)</script><p>在这里，利用直方图规定化中的特定概率密度函数的公式1和公式2：</p><script type="math/tex; mode=display">s=T(r)=(L-1)\int_0^r\Phi_R(x)dx=(L-1)\int_0^r\frac{1}{\sqrt{2\pi}\cdot\sigma}\cdot e^{-\frac{(x-\mu)^2}{2\cdot\sigma^2}}dx=(L-1)\Phi_0\left(\frac{r-\mu_0}{\sigma_0}\right)</script><p>同理：</p><script type="math/tex; mode=display">G(z)=\int_0^z\Phi_Z(t)dt=(L-1)\int_0^z\frac{1}{\sqrt{2\pi}\cdot\sigma}\cdot e^{-\frac{(t-\mu)^2}{2\cdot\sigma^2}}dt=(L-1)\Phi_0\left(\frac{z-\mu_1}{\sigma_1}\right)=s</script><p>所以：</p><script type="math/tex; mode=display">(L-1)\Phi_0\left(\frac{r-\mu_0}{\sigma_0}\right)=(L-1)\Phi_0\left(\frac{z-\mu_1}{\sigma_1}\right)</script><p>因为标准正态分布的概率密度函数一致，所以要想两者一致，需要满足下式：</p><script type="math/tex; mode=display">\frac{r-\mu_0}{\sigma_0}=\frac{z-\mu_1}{\sigma_1}\Rightarrow z=\frac{\sigma_1}{\sigma_0}(r-\mu_0)+\mu_1</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hist_mani</span><span class="params">(img, m0=<span class="number">128</span>, s0=<span class="number">52</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">m = np.mean(img)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">s = np.std(img)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">out = img.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># normalize</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">out = s0 / s * (out - m) + m0</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">out[out &lt; <span class="number">0</span>] = <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">out[out &gt; <span class="number">255</span>] = <span class="number">255</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">out = out.astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// histogram transform</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">histogram_transform</span><span class="params">(cv::Mat img, <span class="keyword">int</span> m0, <span class="keyword">int</span> s0)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get height and width</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// histogram transformation hyper-parameters</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> m, s;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> sum = <span class="number">0.</span>, squared_sum = <span class="number">0.</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// output image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get sum</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">3</span>; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        val = (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(y, x)[c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        sum += val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        squared_sum += (val * val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get standard deviation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">  m = sum / (<span class="built_in">height</span> * <span class="built_in">width</span> * channel);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  s = <span class="built_in">sqrt</span>(squared_sum / (<span class="built_in">height</span> * <span class="built_in">width</span> * channel) - m * m);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// histogram transformation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> ( <span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">3</span>; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        val = img.at&lt;cv::Vec3b&gt;(y, x)[c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        out.at&lt;cv::Vec3b&gt;(y, x)[c] = (uchar)(s0 / s * (val - m) + m0);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图像处理学习&quot;&gt;&lt;a href=&quot;#图像处理学习&quot; class=&quot;headerlink&quot; title=&quot;图像处理学习&quot;&gt;&lt;/a&gt;图像处理学习&lt;/h2&gt;&lt;h4 id=&quot;一、直方图&quot;&gt;&lt;a href=&quot;#一、直方图&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/categories/Image-Processing/"/>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/tags/Image-Processing/"/>
    
  </entry>
  
  <entry>
    <title>Image-Process-One-Plus</title>
    <link href="http://yoursite.com/2021/06/19/Image-Process-One-Plus/"/>
    <id>http://yoursite.com/2021/06/19/Image-Process-One-Plus/</id>
    <published>2021-06-19T13:16:26.000Z</published>
    <updated>2021-06-19T13:18:57.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像处理学习"><a href="#图像处理学习" class="headerlink" title="图像处理学习"></a>图像处理学习</h2><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分+"></a>第一部分+</h3><h4 id="一、Prewitt滤波器"><a href="#一、Prewitt滤波器" class="headerlink" title="一、Prewitt滤波器"></a>一、<strong>Prewitt滤波器</strong></h4><p> Prewitt是一种常用的检测图像边缘的滤波器，它分为横向和纵向算子，分别用于检测纵向和横向的边缘（注意：横向形式的滤波器检测图像的纵向边缘，纵向形式的滤波器检测图像的横向边缘）。</p><p>Prewitt算子是一种一阶<a href="https://baike.baidu.com/item/微分算子/9706908" target="_blank" rel="noopener">微分算子</a>的<a href="https://baike.baidu.com/item/边缘检测/3221648" target="_blank" rel="noopener">边缘检测</a>，利用像素点上下、左右邻点的<a href="https://baike.baidu.com/item/灰度/4615393" target="_blank" rel="noopener">灰度</a>差，在边缘处达到极值检测边缘，去掉部分伪边缘，对噪声具有平滑作用 。其原理是在图像空间利用两个方向模板与图像进行<a href="https://baike.baidu.com/item/邻域/6323269" target="_blank" rel="noopener">邻域</a><a href="https://baike.baidu.com/item/卷积/9411006" target="_blank" rel="noopener">卷积</a>来完成的，这两个方向模板一个检测水平边缘，一个检测垂直边缘。</p><p>纵向算子：</p><script type="math/tex; mode=display">K=\begin{bmatrix}-1 & -1 & -1\\0 & 0 & 0 \\1 & 1 & 1\end{bmatrix}</script><p>横向算子：</p><script type="math/tex; mode=display">K=\begin{bmatrix}-1 & 0 & 1\\-1 & 0 & 1 \\-1 & 0 & 1\end{bmatrix}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># prewitt filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prewitt_filter</span><span class="params">(img, K_size=<span class="number">3</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> len(img.shape) == <span class="number">3</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">img = np.expand_dims(img, axis=<span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Zero padding</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">pad = K_size // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">out = np.zeros((H + pad * <span class="number">2</span>, W + pad * <span class="number">2</span>), dtype=np.float64)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">out[pad: pad + H, pad: pad + W] = gray.copy().astype(np.float64ss)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">tmp = out.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">out_v = out.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">out_h = out.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## prewitt vertical kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">Kv = [[<span class="number">-1.</span>, <span class="number">-1.</span>, <span class="number">-1.</span>],[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>], [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## prewitt horizontal kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">Kh = [[<span class="number">-1.</span>, <span class="number">0.</span>, <span class="number">1.</span>],[<span class="number">-1.</span>, <span class="number">0.</span>, <span class="number">1.</span>],[<span class="number">-1.</span>, <span class="number">0.</span>, <span class="number">1.</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># filtering</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(H):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(W):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">out_v[pad + y, pad + x] = np.sum(Kv * (tmp[y: y + K_size, x: x + K_size]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">out_h[pad + y, pad + x] = np.sum(Kh * (tmp[y: y + K_size, x: x + K_size]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">out_v = np.clip(out_v, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">out_h = np.clip(out_h, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">out_v = out_v[pad: pad + H, pad: pad + W].astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">out_h = out_h[pad: pad + H, pad: pad + W].astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out_v, out_h</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// prewitt filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">prewitt_filter</span><span class="params">(cv::Mat img, <span class="keyword">int</span> kernel_size, <span class="keyword">bool</span> horizontal)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> kernel[kernel_size][kernel_size] = &#123;&#123;<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (horizontal)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    kernel[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    kernel[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    kernel[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    kernel[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    kernel[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    kernel[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> pad = <span class="built_in">floor</span>(kernel_size / <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// filtering  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> dy = -pad; dy &lt; pad + <span class="number">1</span>; dy++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dx = -pad; dx &lt; pad + <span class="number">1</span>; dx++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">if</span> (((y + dy) &gt;= <span class="number">0</span>) &amp;&amp; (( x + dx) &gt;= <span class="number">0</span>) &amp;&amp; ((y + dy) &lt; <span class="built_in">height</span>) &amp;&amp; ((x + dx) &lt; <span class="built_in">width</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            v += img.at&lt;uchar&gt;(y + dy, x + dx) * kernel[dy + pad][dx + pad];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">      v = fmax(v, <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">      v = fmin(v, <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;uchar&gt;(y, x) = (uchar)v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="二、拉普拉斯滤波器"><a href="#二、拉普拉斯滤波器" class="headerlink" title="二、拉普拉斯滤波器"></a>二、拉普拉斯滤波器</h4><p>拉普拉斯算子一般是使用二阶微分进行图像锐化。该方法基本上是先定义一个二阶微分的离散公式，然后构造一个基于该公式的滤波器模板。二维函数的二阶微分关注的是一种各向同性滤波器，这种滤波器的响应与滤波器作用的图像的突变方向无关—各向同性滤波器是旋转不变的，即将原图像旋转后进行滤波处理给出的结果与先对图像滤波然后在旋转结果相同。<strong>因为任意阶微分都是线性操作，所以拉普拉斯变换也是一个线性算子</strong></p><p>Laplacian滤波器是对图像亮度进行二次微分，从而检测边缘的滤波器。由于数字图像是离散的， x方向和y方向的一次微分分别按照以下式子计算：</p><script type="math/tex; mode=display">I_x(x,y)=\frac{I(x+1,y)-I(x,y)}{(x+1)-x}=I(x+1,y)-I(x,y)</script><script type="math/tex; mode=display">I_y(x,y)=\frac{I(x,y+1)-I(x,y)}{(y+1)-y}=I(x,y+1)-I(x,y)</script><p>二次微分按照一下式子计算：</p><script type="math/tex; mode=display">I_{xx}(x,y)=\frac{I_x(x,y)-I_x(x-1,y)}{(x+1)-x}=I_x(x,y)-I_x(x-1,y)\\\quad \quad =[I(x+1,y)-I(x,y)]-[I(x,y)-I(x-1,y)] \\=I(x+1,y)-2\cdot I(x,y)+I(x-1,y)\quad</script><p>同理：</p><script type="math/tex; mode=display">I_{yy}=I(x,y+1)-2\cdot I(x,y)+I(x,y-1)</script><p>特此，Laplacian表达式如下：</p><script type="math/tex; mode=display">\nabla^2I(x,y)=I_{xx}(x,y)+I_{yy}(x,y)\\=I(x-1,y)+I(x,y-1)-4\cdot I(x,y)+I(x+1,y)+I(x,y+1)</script><script type="math/tex; mode=display">\nabla^2f=\begin{bmatrix}0 & I(x,y-1) & 0\\I(x-1,y) & -4\cdot I(x,y) & I(x+1,y) \\0 & I(x,y+1) & 0\end{bmatrix}</script><p>通过上式可以给出以90&deg;为增量进行旋转的一个各向同性的卷积核(近似于拉普拉斯算子的二阶导数离散卷积核)：</p><script type="math/tex; mode=display">K_1=\begin{bmatrix}0 & 1 & 0\\1 & -4 & 1 \\0 & 1 & 0\end{bmatrix} \quad \quad K_2=\begin{bmatrix}0 & -1 & 0\\-1 & 4 & -1 \\0 & -1 & 0\end{bmatrix}</script><p>由于拉普拉斯是一种微分算子，因此强调的是图像中灰度的突变，并不强调缓慢变化的区域。将原图像和拉普拉斯图像叠加在一起，可以复原背景特性并保持拉普拉斯锐化处理的效果。</p><script type="math/tex; mode=display">g(x,y)=f(x,y)+c[\nabla^2f(x,y)]</script><p>f(x,y)和g(x,y)分别是输入图像和锐化后的图像, K<sub>1</sub>时，c=-1; K<sub>2</sub>时，c=1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># laplacian filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">laplacian_filter</span><span class="params">(img, K_size=<span class="number">3</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># zero padding</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">pad = K_size // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">out = np.zeros((H + pad * <span class="number">2</span>, W + pad * <span class="number">2</span>), dtype=np.float)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">out[pad: pad + H, pad: pad + W] = gray.copy().astype(np.float)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">tmp = out.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># laplacian kernle</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">K = [[<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>],[<span class="number">1.</span>, <span class="number">-4.</span>, <span class="number">1.</span>], [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># filtering</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(H):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(W):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">out[pad + y, pad + x] = np.sum(K * (tmp[y: y + K_size, x: x + K_size]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">out = np.clip(out, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">out = out[pad: pad + H, pad: pad + W].astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// laplacian filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">laplacian_filter</span><span class="params">(cv::Mat img, <span class="keyword">int</span> kernel_size)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> kernel[kernel_size][kernel_size] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">-4</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> pad = <span class="built_in">floor</span>(kernel_size / <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// filtering  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> dy = -pad; dy &lt; pad + <span class="number">1</span>; dy++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dx = -pad; dx &lt; pad + <span class="number">1</span>; dx++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">if</span> (((y + dy) &gt;= <span class="number">0</span>) &amp;&amp; (( x + dx) &gt;= <span class="number">0</span>) &amp;&amp; ((y + dy) &lt; <span class="built_in">height</span>) &amp;&amp; ((x + dx) &lt; <span class="built_in">width</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            v += img.at&lt;uchar&gt;(y + dy, x + dx) * kernel[dy + pad][dx + pad];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      v = fmax(v, <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      v = fmin(v, <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;uchar&gt;(y, x) = (uchar)v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="三、Emboss滤波器"><a href="#三、Emboss滤波器" class="headerlink" title="三、Emboss滤波器"></a>三、<strong>Emboss滤波器</strong></h4><p>Emboss滤波器常用于检测图像的边缘和轮廓，能够有效地增强图像的高频信息（边缘和轮廓），并保留图像的低频信息（图像内容）。浮雕过滤器为图像提供3D阴影效果，结果对于图像的凹凸贴图非常有用。它可以通过在中心的一侧取一个像素并从中减去另一侧的一个像素来实现。像素可以得到正面或者负面的结果。</p><script type="math/tex; mode=display">K_1=\begin{bmatrix}-1 & -1 & 0\\-1 & 0 & 1 \\0 & 1 & 1\end{bmatrix} \quad \quad K_2=\begin{bmatrix}-2 & -1 & 0\\-1 & 1 & 1 \\0 & 1 & 2\end{bmatrix}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># emboss filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">emboss_filter</span><span class="params">(img, K_size=<span class="number">3</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># zero padding</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">pad = K_size // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">out = np.zeros((H + pad * <span class="number">2</span>, W + pad * <span class="number">2</span>), dtype=np.float)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">out[pad: pad + H, pad: pad + W] = gray.copy().astype(np.float)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">tmp = out.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># emboss kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">K = [[<span class="number">-2.</span>, <span class="number">-1.</span>, <span class="number">0.</span>],[<span class="number">-1.</span>, <span class="number">1.</span>, <span class="number">1.</span>], [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># filtering</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(H):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(W):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">out[pad + y, pad + x] = np.sum(K * (tmp[y: y + K_size, x: x + K_size]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#这里也可以使用负数的绝对值，而非0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">out = np.clip(out, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">out = out[pad: pad + H, pad: pad + W].astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// emboss filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">emboss_filter</span><span class="params">(cv::Mat img, <span class="keyword">int</span> kernel_size)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> kernel[kernel_size][kernel_size] = &#123;&#123;<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> pad = <span class="built_in">floor</span>(kernel_size / <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// filtering  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> dy = -pad; dy &lt; pad + <span class="number">1</span>; dy++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dx = -pad; dx &lt; pad + <span class="number">1</span>; dx++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">if</span> (((y + dy) &gt;= <span class="number">0</span>) &amp;&amp; (( x + dx) &gt;= <span class="number">0</span>) &amp;&amp; ((y + dy) &lt; <span class="built_in">height</span>) &amp;&amp; ((x + dx) &lt; <span class="built_in">width</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            v += img.at&lt;uchar&gt;(y + dy, x + dx) * kernel[dy + pad][dx + pad];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      v = fmax(v, <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      v = fmin(v, <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;uchar&gt;(y, x) = (uchar)v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="四、LoG滤波器"><a href="#四、LoG滤波器" class="headerlink" title="四、LoG滤波器"></a>四、LoG滤波器</h4><p> LoG即高斯-拉普拉斯（Laplacian of Gaussian）的缩写，使用高斯滤波器使图像平滑化之后再使用拉普拉斯滤波器使图像的轮廓更加清晰。</p><p>目的是为了防止拉普拉斯滤波器计算二次微分会使得图像噪声更加明显，所以我们首先使用高斯滤波器来抑制噪声。</p><p> LoG 滤波器使用以下式子定义：</p><script type="math/tex; mode=display">LoG(x,y)=\frac{x^2+y^2-s^2}{2\cdot\pi\cdot s^6}\cdot e^{-\frac{x^2+y^2}{2\cdot s^2}}, \quad s=\sigma(标准差)</script><p>说明：由于卷积操作具有结合律，因此我们先将高斯平滑滤波器与拉普拉斯滤波器进行卷积，然后利用得到的混合滤波器去对图片进行卷积以得到所需的结果。优点如下：</p><ol><li>由于高斯和拉普拉斯核通常都比图像小得多，所以这种方法通常只需要很少的算术运算。</li><li>LoG (Laplacian of Gaussian)内核的参数可以预先计算，因此在运行时只需要对图像执行一遍的卷积即可。</li></ol><p><strong>如何得到LoG?</strong></p><p>1、二维的高斯平滑卷积核可以采用一下公式表示：</p><script type="math/tex; mode=display">G_\sigma(x,y)=\frac{1}{2\pi\sigma^2}exp^{-\frac{x^2+y^2}{2\sigma^2}}</script><p>2、结合高斯卷积核和拉普拉斯卷积核，求二阶导</p><script type="math/tex; mode=display">\frac{\partial }{\partial x}G_\sigma(x,y)=\frac{\partial}{\partial x}e^{-(x^2+y^2)/2\sigma^2}=-\frac{x}{\sigma^2}e^{-(x^2+y^2)\backslash2\sigma^2}</script><p>且：</p><script type="math/tex; mode=display">\frac{\partial^2}{\partial x^2}G_\sigma(x,y)=\frac{x^2}{\sigma^4}e^{-(x^2+y^2)\backslash2\sigma^2}-\frac{1}{\sigma^2}e^{-(x^2+y^2)\backslash2\sigma^2}=\frac{x^2-\sigma^2}{\sigma^4}e^{-(x^2+y^2)\backslash2\sigma^2}</script><p>同理：</p><script type="math/tex; mode=display">\frac{\partial^2}{\partial y^2}G_\sigma(x,y)=\frac{y2-\sigma^2}{\sigma^4}e^{-(x^2+y^2)\backslash2\sigma^2}</script><p>则LoG的卷积核可以定义为</p><script type="math/tex; mode=display">LoG\triangleq\Delta G_\sigma(x,y)=\frac{\partial^2 }{\partial x^2}G_\sigma(x,y)+\frac{\partial^2}{\partial y^2}G_\sigma(x,y)=\frac{x^2+y2-2\sigma^2}{\sigma^4}e^{-(x^2+y^2)\backslash2\sigma^2}\cdot\frac{1}{2\cdot\pi\cdot\sigma^2}\\\triangleq 是一个AMS二元关系符，读作德尔塔等于Delta \quad Equal \quad To, eg：f(x)\triangleq g(x)+sgn(x),意思是把f(x)定义为g(x)+sgn(x)</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># LoG filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LoG_filter</span><span class="params">(img, K_size=<span class="number">5</span>, sigma=<span class="number">3</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># zero padding</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">pad = K_size // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">out = np.zeros((H + pad * <span class="number">2</span>, W + pad * <span class="number">2</span>), dtype=np.float64)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">out[pad: pad + H, pad: pad + W] = gray.copy().astype(np.float64)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">tmp = out.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># LoG Kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">K = np.zeros((K_size, K_size), dtype=np.float64)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(-pad, -pad + K_size):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(-pad, -pad + K_size):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">K[y + pad, x + pad] = (x ** <span class="number">2</span> + y ** <span class="number">2</span> - sigma ** <span class="number">2</span>) * np.exp( -(x ** <span class="number">2</span> + y ** <span class="number">2</span>) / (<span class="number">2</span> * (sigma ** <span class="number">2</span>)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">K /= (<span class="number">2</span> * np.pi * (sigma ** <span class="number">6</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">K /= K.sum()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># filtering</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(H):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(W):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">out[pad + y, pad + x] = np.sum(K * tmp[y: y + K_size, x: x + K_size])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">out = np.clip(out, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">out = out[pad: pad + H, pad: pad + W].astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// LoG filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">LoG_filter</span><span class="params">(cv::Mat img, <span class="keyword">int</span> kernel_size, <span class="keyword">double</span> sigma)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> pad = <span class="built_in">floor</span>(kernel_size / <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> kernel[kernel_size][kernel_size];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> kernel_sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> _x, _y;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; kernel_size; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; kernel_size; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      _y = y - pad;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      _x = x - pad; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      kernel[y][x] = (_x * _x + _y * _y - sigma * sigma) / (<span class="number">2</span> * M_PI * <span class="built_in">pow</span>(sigma, <span class="number">6</span>)) * <span class="built_in">exp</span>( - (_x * _x + _y * _y) / (<span class="number">2</span> * sigma * sigma));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      kernel_sum += kernel[y][x];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; kernel_size; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; kernel_size; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">      kernel[y][x] /= kernel_sum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// filtering  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">      v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> dy = -pad; dy &lt; pad + <span class="number">1</span>; dy++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dx = -pad; dx &lt; pad + <span class="number">1</span>; dx++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">if</span> (((y + dy) &gt;= <span class="number">0</span>) &amp;&amp; (( x + dx) &gt;= <span class="number">0</span>) &amp;&amp; ((y + dy) &lt; <span class="built_in">height</span>) &amp;&amp; ((x + dx) &lt; <span class="built_in">width</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">            v += img.at&lt;uchar&gt;(y + dy, x + dx) * kernel[dy + pad][dx + pad];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">      v = fmax(v, <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">      v = fmin(v, <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;uchar&gt;(y, x) = (uchar)v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>1、卷积核的一些规则：</p><ul><li>它的大小必须是不均匀的，以便它有一个中心，例如：3&times;3, 5&times;5,7&times;7都可以</li><li>如果希望卷积后生成的图像和原始图像具有相同的亮度，则过滤器所有元素的总和应该是1，不是必须</li><li>如果元素之和大于1，则结果将是更亮的图像；如果小于1，则结果将是更暗的图像；如果总和为0，则生成的图像不一定是全黑，但是会非常暗。</li></ul><p>2、上述的过滤器是一些非常典型的小过滤器，主要用于模糊、边缘检测和浮雕</p><p>3、一些例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示原始图像</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filterWidth 3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filterHeight 3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> filter[filterWidth][filterHeight] = </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> factor = <span class="number">1.0</span>; <span class="comment">//The factor will be multiplied with the result.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> bias = <span class="number">0.0</span>;   <span class="comment">//The bias added to it, if you want to make the resulting image brighter.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//load the image into the buffer</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> w = <span class="number">0</span>, h = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ColorRGB&gt; <span class="built_in">image</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">loadImage</span>(<span class="built_in">image</span>, w, h, <span class="string">"photo.png"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ColorRGB&gt; <span class="title">result</span><span class="params">(<span class="built_in">image</span>.<span class="built_in">size</span>())</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//set up the screen</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    screen(w, h, <span class="string">"Filters"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    ColorRGB color; <span class="comment">//the color for the pixels</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//apply the filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;w; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;h; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">double</span> red = <span class="number">0.0</span>, green=<span class="number">0.0</span>, blue = <span class="number">0.0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> filterY=<span class="number">0</span>; filterY &lt; filterHeight; filterY++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> filterX=<span class="number">0</span>; filterX &lt; filterWidth; filterX++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">int</span> imageX = (x - filterWidth / <span class="number">2</span> + filterX + w) % w;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">int</span> imageY = (y - filterHeight /<span class="number">2</span>  + filterY + h) % h;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">                    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">                    red += <span class="built_in">image</span>[imageY * w + imageX].r * filter[filterY][filterX];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">                    green += <span class="built_in">image</span>[imageY * w + imageX].g * filter[filterY][filterX];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">                    red += <span class="built_in">image</span>[imageY * w + imageX].b * filter[filterY][filterX];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">//truncate values smaller than zero and larger than 255</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">            result[y * w + x].r = <span class="built_in">min</span>(<span class="built_in">max</span>(<span class="keyword">int</span>(factor * red + bias), <span class="number">0</span>), <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">            result[y * w + x].g = <span class="built_in">min</span>(<span class="built_in">max</span>(<span class="keyword">int</span>(factor * green + bias), <span class="number">0</span>), <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">            result[y * w + x].b = <span class="built_in">min</span>(<span class="built_in">max</span>(<span class="keyword">int</span>(factor * blue + bias), <span class="number">0</span>), <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//draw the result buffer to the screen</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;h; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;w; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">            pset(x,y, result[y * x + x]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//redraw &amp; sleep</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">    redraw();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">    sleep();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>4、更大的模糊滤波器，能够得到更大的模糊效果，或者效的滤波器使用多次。</p><p>5、空间滤波器模板的产生：生成一个大小为m&times;n的线性空间滤波器要求制定mn个模板系数。这些系数是根据该滤波器支持什么样的操作来选择的 。</p><p>6、对于一维函数f(x)，其一阶微分的基本定义是差值：</p><script type="math/tex; mode=display">\frac{\partial f}{\partial x}=f(x+1)-f(x)</script><p>对于二维函数f(x, y)，二阶微分定义为如下差分：</p><script type="math/tex; mode=display">\frac{\partial^2f}{\partial x^2}=f(x+1)+f(x-1)-2f(x)</script><p><a href="https://zhuanlan.zhihu.com/p/92143464" target="_blank" rel="noopener">参考:LoG</a></p><p><a href="https://lodev.org.cgtutor/filtering.html" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图像处理学习&quot;&gt;&lt;a href=&quot;#图像处理学习&quot; class=&quot;headerlink&quot; title=&quot;图像处理学习&quot;&gt;&lt;/a&gt;图像处理学习&lt;/h2&gt;&lt;h3 id=&quot;第一部分&quot;&gt;&lt;a href=&quot;#第一部分&quot; class=&quot;headerlink&quot; title=&quot;第
      
    
    </summary>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/categories/Image-Processing/"/>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/tags/Image-Processing/"/>
    
  </entry>
  
  <entry>
    <title>Image-Process-One</title>
    <link href="http://yoursite.com/2021/06/13/Image-Process-One/"/>
    <id>http://yoursite.com/2021/06/13/Image-Process-One/</id>
    <published>2021-06-13T09:13:13.000Z</published>
    <updated>2021-06-13T12:08:58.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像处理学习"><a href="#图像处理学习" class="headerlink" title="图像处理学习"></a>图像处理学习</h2><h4 id="一、均值滤波器"><a href="#一、均值滤波器" class="headerlink" title="一、均值滤波器"></a>一、均值滤波器</h4><h5 id="1、部分概念的记录"><a href="#1、部分概念的记录" class="headerlink" title="1、部分概念的记录"></a>1、部分概念的记录</h5><p>均值滤波器可以归为低通滤波器，是一种线性滤波器，其输出为邻域模板内的像素的简单平均值，主要用于图像的模糊和降噪。均值滤波器的概念非常的直观，使用滤波器窗口内的像素的平均灰度值代替图像中的像素值，这样的结果就是降低图像中的“尖锐”变化。</p><p>频率：分为高、中、低频。高频是目标像素跟周围像素相差比较大。低频是目标像素跟周边像素相差不大。低通滤波=模糊，高通滤波=锐化。方法：线性和非线性滤波器。</p><h5 id="2、存在的问题或缺点"><a href="#2、存在的问题或缺点" class="headerlink" title="2、存在的问题或缺点"></a>2、存在的问题或缺点</h5><ul><li><p>某个突变像素回影响到周围像素的值</p></li><li><p>均值滤波会导致边缘信息丢失</p></li></ul><h5 id="3、实现"><a href="#3、实现" class="headerlink" title="3、实现"></a>3、实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># mean filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mean_filter</span><span class="params">(img, K_size=<span class="number">3</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># zero padding</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    pad = K_size // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    out = np.zeros((H + pad * <span class="number">2</span>, W + pad * <span class="number">2</span>, C), dtype=np.float)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    out[pad: pad + H, pad: pad + W] = img.copy().astype(np.float)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    tmp = out.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># filtering</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(H):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(W):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(C):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                out[pad + y, pad + x, c] = np.mean(tmp[y: y + K_size, x: x + K_size, c])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    out = out[pad: pad + H, pad: pad + W].astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// mean filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">mean_filter</span><span class="params">(cv::Mat img, <span class="keyword">int</span> kernel_size)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> pad = <span class="built_in">floor</span>(kernel_size / <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// filtering</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> vs[kernel_size * kernel_size];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// get pixel sum</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> dy = -pad; dy &lt; pad + <span class="number">1</span>; dy++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dx = -pad; dx &lt; pad + <span class="number">1</span>; dx++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">if</span> (((y + dy) &gt;= <span class="number">0</span>) &amp;&amp; ((x + dx) &gt;= <span class="number">0</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            v += (<span class="keyword">int</span>)img.at&lt;cv::Vec3b&gt;(y + dy, x + dx)[c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// assign mean value</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">      v /= (kernel_size * kernel_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(y, x)[c] = (uchar)v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="二、Motion-Filter"><a href="#二、Motion-Filter" class="headerlink" title="二、Motion Filter"></a>二、Motion Filter</h4><h5 id="2-1-使用的场景"><a href="#2-1-使用的场景" class="headerlink" title="2.1 使用的场景"></a>2.1 使用的场景</h5><p>图像去模糊是一个经典的图像复原任务。造成图像模糊的原因有很多：</p><ul><li>离焦模糊：场景中的物体处于成像景深范围之外而变得模糊。离焦模糊的去除一般对应着景深的扩展技术</li><li>像差模糊：镜头加工和制造的缺陷造成了物方的一个点在成像平面形成了一个弥散斑</li><li>运动模糊：成像过程中相机运动或者场景变化所造成的不同空间位置信息的混叠</li></ul><p>图像运动模糊是由于成像过程中相机运动或者场景变化所造成的不同空间位置信息的混叠。拍摄图像时往往需要一定的曝光时间，如果在这一段曝光时间内投射到传感器上的画面运动超过单个像素尺寸，那么模糊就会出现。曝光时间越长，图像中的模糊往往就剧烈。场景点的运动轨迹累计形成的图像即为模糊核，其记录着在曝光时间内，当前场景点在图像上的能量分布和影响范围。</p><h5 id="2-2-为什么需要Motion-Filter"><a href="#2-2-为什么需要Motion-Filter" class="headerlink" title="2.2 为什么需要Motion Filter"></a>2.2 为什么需要Motion Filter</h5><p>高斯滤波，或者Box滤波。传统上进行动作滤波的方式是逐像素的进行时域上的低通滤波，一般会采用时间域上的滑动窗口来进行，这样就会滤除掉时域上的短期的、高速的变化。这种方式有一点点平滑的作用，但它也会带来明显的问题，即不同物体的像素也被平均掉了，因此结果很难看</p><script type="math/tex; mode=display">J(x,y,t)=f(I(x,y,\{ k\}_{t-\delta_t}^{t+\delta_t})</script><h5 id="2-3-简单的运动滤波器"><a href="#2-3-简单的运动滤波器" class="headerlink" title="2.3 简单的运动滤波器"></a>2.3 简单的运动滤波器</h5><script type="math/tex; mode=display">\begin{bmatrix}\frac{1}{3} & 0 & 0\\ 0 & \frac{1}{3} & 0\\ 0 & 0 & \frac{1}{3} \end{bmatrix}</script><h5 id="2-4-实现"><a href="#2-4-实现" class="headerlink" title="2.4 实现"></a>2.4 实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># motion filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">motion_filter</span><span class="params">(img, K_size=<span class="number">3</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># Kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    K = np.diag( [<span class="number">1</span>] * K_size ).astype(np.float)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    K /= K_size</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># zero padding</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    pad = K_size // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    out = np.zeros((H + pad * <span class="number">2</span>, W + pad * <span class="number">2</span>, C), dtype=np.float)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    out[pad: pad + H, pad: pad + W] = img.copy().astype(np.float)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    tmp = out.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># filtering</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(H):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(W):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(C):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                out[pad + y, pad + x, c] = np.sum(K * tmp[y: y + K_size, x: x + K_size, c])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    out = out[pad: pad + H, pad: pad + W].astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// motion filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">motion_filter</span><span class="params">(cv::Mat img, <span class="keyword">int</span> kernel_size)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> pad = <span class="built_in">floor</span>(kernel_size / <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> kernel[kernel_size][kernel_size];<span class="comment">//&#123;&#123;1./3, 0, 0&#125;, &#123;0, 1./3, 0&#125;, &#123;0, 0, 1./3&#125;&#125;;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; kernel_size; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; kernel_size; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (y == x)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        kernel[y][x] = <span class="number">1.</span> / kernel_size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        kernel[y][x] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// filtering</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">      v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> dy = -pad; dy &lt; pad + <span class="number">1</span>; dy++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dx = -pad; dx &lt; pad + <span class="number">1</span>; dx++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">if</span> (((y + dy) &gt;= <span class="number">0</span>) &amp;&amp; (( x + dx) &gt;= <span class="number">0</span>) &amp;&amp; ((y + dy) &lt; <span class="built_in">height</span>) &amp;&amp; ((x + dx) &lt; <span class="built_in">width</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">            v += (<span class="keyword">double</span>)img.at&lt;cv::Vec3b&gt;(y + dy, x + dx)[c] * kernel[dy + pad][dx + pad];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(y, x)[c] = (uchar)v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h5 id="2-5-更复杂的运动滤波知识"><a href="#2-5-更复杂的运动滤波知识" class="headerlink" title="2.5 更复杂的运动滤波知识"></a>2.5 更复杂的运动滤波知识</h5><p>运动滤波与计算机摄影密切相关，在延时摄影等场景下往往会导致各种运行模糊，所以需要运用运动滤波等一些方法取恢复真是的图像，或者图像中相关人员关注的部分。</p><blockquote><p><strong>Motion Denoising with Applicaition to Time-Lapse Photography</strong></p><p>Levin et al., “Motion-Invariant Photography,” SIGGRAPH 2008</p></blockquote><p><a href="https://link.zhihu.com/?target=http%3A//people.csail.mit.edu/mrub/PhDThesis/RubinsteinThesisDefense.zip">Michael Rubinstein: Thesis Defense for Analysis and Visualization of Temporal Variations in Video</a></p><p><a href="https://link.zhihu.com/?target=http%3A//people.csail.mit.edu/mrub/PhDThesis/RubinsteinThesisDefense.pdf">Michael Rubistein: Analysis and Visualization of Temporal Variations in Video(PDF)</a></p><p><a href="https://link.zhihu.com/?target=http%3A//people.csail.mit.edu/mrub/timelapse/timelapse-posterCVPR2011.pdf">CVPR2011 Poster: Motion Denoising with Application to Time-lapse Photography</a></p><p><a href="https://link.zhihu.com/?target=http%3A//people.csail.mit.edu/mrub/PhDThesis/">Analysis and Visualization of Temporal Variations in Video</a> (Author Homework)</p><p><a href="https://link.zhihu.com/?target=http%3A//graphics.cs.cmu.edu/courses/15-463/2017_fall/lectures/lecture18.pptx">CMU 2017 Fall Computational Photography Course 15-463,      Lecture 18</a></p><p><a href="https://link.zhihu.com/?target=http%3A//web.media.mit.edu/~raskar/deblur/">Raskar et al., “Coded      Exposure Photography: Motion Deblurring using Fluttered Shutter,” SIGGRAPH      2006.</a></p><p><a href="https://link.zhihu.com/?target=http%3A//groups.csail.mit.edu/graphics/pubs/MotionInvariant/">Levin et al., “Motion-Invariant      Photography,” SIGGRAPH 2008</a></p><p><a href="https://zhuanlan.zhihu.com/p/56335422" target="_blank" rel="noopener">图像处理的应用-运动滤波</a></p><p><a href="https://zhuanlan.zhihu.com/p/126580277" target="_blank" rel="noopener">如何消除摄影中的运动模糊</a></p><h4 id="三、MAX-MIN滤波器"><a href="#三、MAX-MIN滤波器" class="headerlink" title="三、MAX-MIN滤波器"></a>三、MAX-MIN滤波器</h4><p>MAX-MIN滤波器使用网格内像素的最大值和最小值的差值对网格内像素重新赋值。通常用于<strong>边缘检测</strong>。边缘检测通常作用于灰度图像上。</p><script type="math/tex; mode=display">\begin{bmatrix}P_1 & P_2 & P_3\\ P_4 & P_5 & P_6\\ P_7 & P_8 & P_9 \end{bmatrix}</script><script type="math/tex; mode=display">P_5=Max(P_1,P_2,\cdots,P_9)-Min(P_1,P_2,\cdots,P_9)</script><p>图像的细节属于低频信息，图像的边缘属于高频信息。我们使用一定大小的 Max-Min  滤波器作用于图像，当滤波器作用于图像细节时，输出结果往往趋向于0（黑色）；而滤波器作用于图像边缘时，Max-Min  输出结果往往趋向于255（白色）。所以 最大-最小滤波器 能有效地用于检测图像的边缘和轮廓。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_min_filter</span><span class="params">(img, K_size=<span class="number">3</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    H, W = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># Zero padding</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    pad = K_size // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    out = np.zeros((H + pad * <span class="number">2</span>, W + pad * <span class="number">2</span>), dtype=np.float)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    out[pad: pad + H, pad: pad + W] = gray.copy().astype(np.float)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    tmp = out.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># filtering</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(H):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(W):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            out[pad + y, pad + x] = np.max(tmp[y: y + K_size, x: x + K_size]) - \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                np.min(tmp[y: y + K_size, x: x + K_size])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    out = out[pad: pad + H, pad: pad + W].astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// max min filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">max_min_filter</span><span class="params">(cv::Mat img, <span class="keyword">int</span> kernel_size)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> pad = <span class="built_in">floor</span>(kernel_size / <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> vmax = <span class="number">0</span>, vmin = <span class="number">999</span>, v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// filtering  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      vmax = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      vmin = <span class="number">999</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> dy = -pad; dy &lt; pad + <span class="number">1</span>; dy++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dx = -pad; dx &lt; pad + <span class="number">1</span>; dx++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">if</span> (((y + dy) &gt;= <span class="number">0</span>) &amp;&amp; (( x + dx) &gt;= <span class="number">0</span>) &amp;&amp; ((y + dy) &lt; <span class="built_in">height</span>) &amp;&amp; ((x + dx) &lt; <span class="built_in">width</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            v = (<span class="keyword">double</span>)img.at&lt;uchar&gt;(y + dy, x + dx);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (v &gt; vmax)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">              vmax = v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (v &lt; vmin)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">              vmin = v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;uchar&gt;(y, x) = (uchar)(vmax - vmin);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="四、差分滤波器"><a href="#四、差分滤波器" class="headerlink" title="四、差分滤波器"></a>四、差分滤波器</h4><p>差分滤波器对图像亮度急剧变化的边缘有提取效果，可以获得邻接像素的差值。</p><h5 id="4-1-简单介绍一下数字滤波器"><a href="#4-1-简单介绍一下数字滤波器" class="headerlink" title="4.1 简单介绍一下数字滤波器"></a>4.1 简单介绍一下数字滤波器</h5><ul><li><p>Analog Filter: 模拟滤波器。滤波器从模拟时代产生的一个器件。如下是一个阻容滤波器（由一个电阻、电容构成，对输入的连续信号进行频域上的修正），比如输入一个正弦信号（他有一些直流分量在上面），通过阻容滤波器将正弦信号压制下去，变成直流分量输出。</p><p><img src="/2021/06/13/Image-Process-One/1.png" alt="Image-Process-One"></p></li><li><p>Digtial Filter: 数字滤波器。连续的模拟信号输入，经过A/D Converter(模数转换器，经过采样、量化、编码)，输出数字信号，然后经过Digital filer处理输出，信号的频率特性发生改变。</p><p><img src="/2021/06/13/Image-Process-One/2.png" alt="Image-Process-On"></p><p><img src="/2021/06/13/Image-Process-One/3.png" alt="Image-Process-One"></p></li><li><p>Optical Filter: 光学滤波器，把光波的频域进行修正。</p></li></ul><h5 id="4-2-时域、频域、采样定理"><a href="#4-2-时域、频域、采样定理" class="headerlink" title="4.2 时域、频域、采样定理"></a>4.2 时域、频域、采样定理</h5><p>时域信号可以分解成为多个不同频率正弦信号的合成；在变换到频域上可以看到不同成分的幅度，在时域和频域之间进行反变换；</p><p>采样定理：  要想正确恢复一个信号，就必须高于这个信号2倍以上的采样频率才可以。</p><p><img src="/2021/06/13/Image-Process-One/4.png" alt="Image-Process-One"></p><h5 id="4-3-对图像信号而言，什么叫高频，中频，低频信号？"><a href="#4-3-对图像信号而言，什么叫高频，中频，低频信号？" class="headerlink" title="4.3 对图像信号而言，什么叫高频，中频，低频信号？"></a>4.3 对图像信号而言，什么叫高频，中频，低频信号？</h5><p>当前采用值与之前采样值，之后采样值的偏差大小&Delta;表征了信号的频率，所有以它是一个相对概念。</p><h5 id="4-4-Differentiator-差分器"><a href="#4-4-Differentiator-差分器" class="headerlink" title="4.4 Differentiator 差分器"></a>4.4 Differentiator 差分器</h5><p>输入信号和输入信号的delay(延迟)进行做差，再输出。</p><p><img src="/2021/06/13/Image-Process-One/5.png" alt="Image-Process-One"></p><p>如下图，经过差分器后，信号的高频部分被保留了下来，在图像信号上的表现是物体轮廓部分被保留下来。</p><p><img src="/2021/06/13/Image-Process-One/6.png" alt="Image-Process-One"></p><p>纵向，用于提取图像的水平线条</p><script type="math/tex; mode=display">K_1=\begin{bmatrix}0 & -1 & 0\\ 0 & 1 & 0\\ 0 & 0 & 0 \end{bmatrix}</script><p>横向，用于提取图像的垂直线条</p><script type="math/tex; mode=display">K_2=\begin{bmatrix}0 & 0 & 0\\ -1 & 1 & 0\\ 0 & 0 & 0 \end{bmatrix}</script><p>举例，利用纵向差分滤波器</p><script type="math/tex; mode=display">Input=\begin{bmatrix}0 & 0 & 0 & 0 & 0 & 0 & 0\\0 & 1 & 1 & 1 & 1 & 1 & 0\\0 & 9 & 9 & 9 & 9 & 9 & 0\\0 & 2 & 2 & 2 & 2 & 2 & 0\\0 &1 &1 & 1 & 1 &1 & 0 \\ 0 & 0 & 0 & 0 & 0 & 0 & 0\end{bmatrix}</script><p>使用K<sub>1</sub>后的输出为：（负数可以clip掉，用0替换）</p><script type="math/tex; mode=display">Output=\begin{bmatrix}1 & 1 & 1 & 1 & 1\\ 8 & 8 & 8 & 8 & 8\\ -7 & -7 & -7 & -7 & -7 \\ -1 & -1 & -1 & -1 & -1 \end{bmatrix}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># different filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">different_filter</span><span class="params">(img, K_size=<span class="number">3</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Zero padding</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">pad = K_size // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">out = np.zeros((H + pad * <span class="number">2</span>, W + pad * <span class="number">2</span>), dtype=np.float)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">out[pad: pad + H, pad: pad + W] = gray.copy().astype(np.float)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">tmp = out.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">out_v = out.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">out_h = out.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># vertical kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">Kv = [[<span class="number">0.</span>, <span class="number">-1.</span>, <span class="number">0.</span>],[<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>],[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># horizontal kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">Kh = [[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],[<span class="number">-1.</span>, <span class="number">1.</span>, <span class="number">0.</span>], [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># filtering</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(H):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(W):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">out_v[pad + y, pad + x] = np.sum(Kv * (tmp[y: y + K_size, x: x + K_size]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">out_h[pad + y, pad + x] = np.sum(Kh * (tmp[y: y + K_size, x: x + K_size]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">out_v = np.clip(out_v, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">out_h = np.clip(out_h, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">out_v = out_v[pad: pad + H, pad: pad + W].astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">out_h = out_h[pad: pad + H, pad: pad + W].astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out_v, out_h</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// max min filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">diff_filter</span><span class="params">(cv::Mat img, <span class="keyword">int</span> kernel_size, <span class="keyword">bool</span> horizontal)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> kernel[kernel_size][kernel_size] = &#123;&#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (horizontal)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    kernel[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    kernel[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> pad = <span class="built_in">floor</span>(kernel_size / <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// filtering  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">      v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> dy = -pad; dy &lt; pad + <span class="number">1</span>; dy++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dx = -pad; dx &lt; pad + <span class="number">1</span>; dx++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">if</span> (((y + dy) &gt;= <span class="number">0</span>) &amp;&amp; (( x + dx) &gt;= <span class="number">0</span>) &amp;&amp; ((y + dy) &lt; <span class="built_in">height</span>) &amp;&amp; ((x + dx) &lt; <span class="built_in">width</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">            v += img.at&lt;uchar&gt;(y + dy, x + dx) * kernel[dy + pad][dx + pad];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">      v = fmax(v, <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">      v = fmin(v, <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;uchar&gt;(y, x) = (uchar)v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>下面分别为lena的原图，以及水平、垂直差分算法得到的边缘检测图</p><center class="half">    <img src="/2021/06/13/Image-Process-One/7.jpg" width="30%">    <img src="/2021/06/13/Image-Process-One/8.jpg" width="30%">    <img src="/2021/06/13/Image-Process-One/9.jpg" width="30%"></center><h4 id="五、Sobel滤波器"><a href="#五、Sobel滤波器" class="headerlink" title="五、Sobel滤波器"></a>五、Sobel滤波器</h4><p>索贝尔算子是计算机视觉领域的一种重要处理方法。主要用于获得数字图像的一阶梯度，常见的应用和物理意义是边缘检测。该算子包含两组3x3的矩阵，分别为横向及纵向，将之与图像作平面卷积，即可分别得出横向及纵向的亮度差分近似值。在图像的任何一点使用此算子，将会产生对应的梯度矢量或是其法矢量。</p><p>如果以A代表原始图像，Gx及Gy分别代表经横向及纵向边缘检测的图像，其公式如下:</p><script type="math/tex; mode=display">G_x=\begin{bmatrix} -1 & 0 & 1\\ -2 & 0 & 2\\ -1 & 0 & 1 \end{bmatrix} \ast A \quad \quad and \quad \quad Gy=\begin{bmatrix} 1 & 2 & 1\\ 0 & 0 & 0\\ -1 & -2 & -1 \end{bmatrix}\ast A</script><p>图像的每一个像素的横向及纵向梯度近似值可用以下的公式结合，来计算梯度的大小。</p><script type="math/tex; mode=display">G=\sqrt{G_x^2+G_y^2}</script><p>梯度方向为：</p><script type="math/tex; mode=display">\theta=tan^{-1}\left(\frac{G_y}{G_x}\right)</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># sobel filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sobel_filter</span><span class="params">(img, K_size=<span class="number">3</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> len(img.shape) == <span class="number">3</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">img = np.expand_dims(img, axis=<span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Zero padding</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">pad = K_size // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">out = np.zeros((H + pad * <span class="number">2</span>, W + pad * <span class="number">2</span>), dtype=np.float)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">out[pad: pad + H, pad: pad + W] = gray.copy().astype(np.float)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">tmp = out.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">out_v = out.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">out_h = out.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## Sobel vertical</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">Kv = [[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">1.</span>],[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>], [<span class="number">-1.</span>, <span class="number">-2.</span>, <span class="number">-1.</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## Sobel horizontal</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">Kh = [[<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">-1.</span>],[<span class="number">2.</span>, <span class="number">0.</span>, <span class="number">-2.</span>],[<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">-1.</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># filtering</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(H):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(W):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">out_v[pad + y, pad + x] = np.sum(Kv * (tmp[y: y + K_size, x: x + K_size]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">out_h[pad + y, pad + x] = np.sum(Kh * (tmp[y: y + K_size, x: x + K_size]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">out_v = np.clip(out_v, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">out_h = np.clip(out_h, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">out_v = out_v[pad: pad + H, pad: pad + W].astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">out_h = out_h[pad: pad + H, pad: pad + W].astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out_v, out_h</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sobel filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">sobel_filter</span><span class="params">(cv::Mat img, <span class="keyword">int</span> kernel_size, <span class="keyword">bool</span> horizontal)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> kernel[kernel_size][kernel_size] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-1</span>&#125;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (horizontal)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    kernel[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    kernel[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    kernel[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    kernel[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">-2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> pad = <span class="built_in">floor</span>(kernel_size / <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// filtering  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">      v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> dy = -pad; dy &lt; pad + <span class="number">1</span>; dy++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dx = -pad; dx &lt; pad + <span class="number">1</span>; dx++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">if</span> (((y + dy) &gt;= <span class="number">0</span>) &amp;&amp; (( x + dx) &gt;= <span class="number">0</span>) &amp;&amp; ((y + dy) &lt; <span class="built_in">height</span>) &amp;&amp; ((x + dx) &lt; <span class="built_in">width</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">            v += img.at&lt;uchar&gt;(y + dy, x + dx) * kernel[dy + pad][dx + pad];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">      v = fmax(v, <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">      v = fmin(v, <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;uchar&gt;(y, x) = (uchar)v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sobel filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">sobel_filter</span><span class="params">(cv::Mat img, <span class="keyword">int</span> kernel_size, <span class="keyword">bool</span> horizontal)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> kernel[kernel_size][kernel_size] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-1</span>&#125;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (horizontal)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    kernel[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    kernel[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    kernel[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    kernel[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">-2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> pad = <span class="built_in">floor</span>(kernel_size / <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// filtering  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">      v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> dy = -pad; dy &lt; pad + <span class="number">1</span>; dy++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dx = -pad; dx &lt; pad + <span class="number">1</span>; dx++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">if</span> (((y + dy) &gt;= <span class="number">0</span>) &amp;&amp; (( x + dx) &gt;= <span class="number">0</span>) &amp;&amp; ((y + dy) &lt; <span class="built_in">height</span>) &amp;&amp; ((x + dx) &lt; <span class="built_in">width</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">            v += img.at&lt;uchar&gt;(y + dy, x + dx) * kernel[dy + pad][dx + pad];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">      v = fmax(v, <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">      v = fmin(v, <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;uchar&gt;(y, x) = (uchar)v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>下面分别为lena经过sobel算子，垂直、水平和叠加后的边缘检测图</p><center class="half">    <img src="/2021/06/13/Image-Process-One/10.jpg" width="30%">    <img src="/2021/06/13/Image-Process-One/11.jpg" width="30%">    <img src="/2021/06/13/Image-Process-One/12.jpg" width="30%"></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图像处理学习&quot;&gt;&lt;a href=&quot;#图像处理学习&quot; class=&quot;headerlink&quot; title=&quot;图像处理学习&quot;&gt;&lt;/a&gt;图像处理学习&lt;/h2&gt;&lt;h4 id=&quot;一、均值滤波器&quot;&gt;&lt;a href=&quot;#一、均值滤波器&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/categories/Image-Processing/"/>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/tags/Image-Processing/"/>
    
  </entry>
  
  <entry>
    <title>Image-Process-Zero-Plus</title>
    <link href="http://yoursite.com/2021/06/12/Image-Process-Zero-Plus/"/>
    <id>http://yoursite.com/2021/06/12/Image-Process-Zero-Plus/</id>
    <published>2021-06-12T15:55:47.000Z</published>
    <updated>2021-06-13T02:31:12.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像处理学习"><a href="#图像处理学习" class="headerlink" title="图像处理学习"></a>图像处理学习</h2><h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分+"></a>第一部分+</h4><h5 id="一、HSV的深探"><a href="#一、HSV的深探" class="headerlink" title="一、HSV的深探"></a>一、HSV的深探</h5><p>一般我们对RGB图像比较熟悉，那么为什么要有这么多个图像形式呢？如：HSV色彩空间，HSL颜色空间等</p><h6 id="1、RGB的局限性"><a href="#1、RGB的局限性" class="headerlink" title="1、RGB的局限性"></a>1、RGB的局限性</h6><p>1.1 RGB 是我们接触最多的颜色空间，由三个通道表示一幅图像，分别为红色(R)，绿色(G)和蓝色(B)。这三种颜色的不同组合可以形成几乎所有的其他颜色。</p><p>1.2 RGB 颜色空间是图像处理中最基本、最常用、面向硬件的颜色空间。</p><p>1.3 RGB 颜色空间利用三个颜色分量的线性组合来表示颜色，任何颜色都与这三个分量有关，而且这三个分量是高度相关的，所以连续变换颜色时并不直观，想对图像的颜色进行调整需要更改这三个分量才行。</p><p><img src="/2021/06/12/Image-Process-Zero-Plus/1.jpg" alt="Image-Process-Zero-Plus"></p><p>1.4 自然环境下获取的图像容易受自然光照、遮挡和阴影等情况的影响，即对亮度比较敏感。而 RGB 颜色空间的三个分量都与亮度密切相关，即只要亮度改变，三个分量都会随之相应地改变，而没有一种更直观的方式来表达。</p><p>1.5 人眼对于这三种颜色分量的敏感程度是不一样的，在单色中，人眼对红色最不敏感，蓝色最敏感，所以 RGB  颜色空间是一种均匀性较差的颜色空间。如果颜色的相似性直接用欧氏距离来度量，其结果与人眼视觉会有较大的偏差。对于某一种颜色，我们很难推测出较为精确的三个分量数值来表示。</p><p><strong>总结：RGB 颜色空间适合于显示系统，却并不适合于图像处理。</strong></p><h5 id="2、为什么要使用HSV"><a href="#2、为什么要使用HSV" class="headerlink" title="2、为什么要使用HSV?"></a>2、为什么要使用HSV?</h5><p>2.1 在图像处理中使用较多的是 HSV 颜色空间，它比 RGB 更接近人们对彩色的感知经验。非常直观地表达颜色的色调、鲜艳程度和明暗程度，方便进行颜色的对比。</p><p>2.2 在 HSV 颜色空间下，它比 BGR 更容易跟踪某种颜色的物体，常用于分割指定颜色的物体。</p><h5 id="3、HSV的说明"><a href="#3、HSV的说明" class="headerlink" title="3、HSV的说明"></a>3、HSV的说明</h5><p>Hue -&gt; 色调、色相；Saturation -&gt; 饱和度、色彩纯净度; Value -&gt; 明度</p><p><img src="/2021/06/12/Image-Process-Zero-Plus/2.jpg" alt="Image-Process-Zero-Plus"></p><p>这个圆柱体来表示 HSV 颜色空间，圆柱体的横截面可以看做是一个极坐标系 ，H 用极坐标的极角表示，S 用极坐标的极轴长度表示，V 用圆柱中轴的高度表示。Hue 用角度度量，取值范围为0～360°，表示色彩信息，即所处的光谱颜色的位置。</p><p><img src="/2021/06/12/Image-Process-Zero-Plus/3.jpg" alt="Image-Process-Zero-Plus"></p><p>颜色圆环上所有的颜色都是光谱上的颜色，从红色开始按逆时针方向旋转，Hue=0 表示红色，Hue=120 表示绿色，Hue=240 表示蓝色等等。</p><p>在 GRB中 颜色由三个值共同决定，比如黄色为即 (255,255,0)；在HSV中，黄色只由一个值决定，Hue=60即可。</p><p><img src="/2021/06/12/Image-Process-Zero-Plus/4.jpg" alt="Image-Process-Zero-Plus"></p><p>其中水平方向表示饱和度，饱和度表示颜色接近光谱色的程度。饱和度越高，说明颜色越深，越接近光谱色饱和度越低，说明颜色越浅，越接近白色。饱和度为0表示纯白色。取值范围为0～100%，值越大，颜色越饱和。</p><p>竖直方向表示明度，决定颜色空间中颜色的明暗程度，明度越高，表示颜色越明亮，范围是 0-100%。明度为0表示纯黑色（此时颜色最暗）。</p><p><strong>通俗的理解:</strong>在Hue一定的情况下，<em>饱和度减小</em>，就是往光谱色中添加白色，光谱色所占的比例也在减小，饱和度减为0，表示光谱色所占的比例为零，导致整个颜色呈现白色; <em>明度减小</em>，就是往光谱色中添加黑色，光谱色所占的比例也在减小，明度减为0，表示光谱色所占的比例为零，导致整个颜色呈现黑色。</p><h5 id="4、HSV的优点"><a href="#4、HSV的优点" class="headerlink" title="4、HSV的优点"></a>4、HSV的优点</h5><p>HSV  对用户来说是一种比较直观的颜色模型。我们可以很轻松地得到单一颜色，即指定颜色角H，并让V=S=1，然后通过向其中加入黑色和白色来得到我们需要的颜色。增加黑色可以减小V而S不变，同样增加白色可以减小S而V不变。例如，要得到深蓝色，V=0.4 S=1 H=240度。要得到浅蓝色，V=1 S=0.4 H=240度。</p><h5 id="5、HSV的应用"><a href="#5、HSV的应用" class="headerlink" title="5、HSV的应用"></a>5、HSV的应用</h5><p>利用颜色空间进行图像分割，如果图像的颜色特征比强度特征更好，则可以尝试将其转换为HSV，然后在H通道上进行自适应二值化处理。</p><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/2021/06/12/Image-Process-Zero-Plus/5.jpg" width="33%"></div><div class="group-picture-column" style="width: 50%;"><img src="/2021/06/12/Image-Process-Zero-Plus/6.jpg" width="33%"></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="/2021/06/12/Image-Process-Zero-Plus/7.jpg" width="33%"></div></div></div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">segImg</span><span class="params">(imagePath)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    img = cv2.imread(imagePath)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    cv2.imshow(<span class="string">'img'</span>, img)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    cv2.waitKey(<span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    cv2.destroyAllWindows()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    cv2.imwrite(<span class="string">"out_2.jpg"</span>, hsv[:,:,<span class="number">0</span>])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    cv2.imshow(<span class="string">'hsv'</span>, hsv[:,:,<span class="number">0</span>])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    cv2.waitKey(<span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    cv2.destroyAllWindows()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    (thresh, im_bw) = cv2.threshold(hsv[:,:,<span class="number">0</span>], <span class="number">0</span>, <span class="number">255</span>, cv2.THRESH_BINARY | cv2.THRESH_OTSU)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    cv2.imwrite(<span class="string">"out_3.jpg"</span>, im_bw)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    cv2.imshow(<span class="string">'otsu'</span>, im_bw)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    cv2.waitKey(<span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    cv2.destroyAllWindows()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">path = <span class="string">"./_5.jpg"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">segImg(path)</span></pre></td></tr></table></figure><h5 id="6、RGB和HSV的相互转换"><a href="#6、RGB和HSV的相互转换" class="headerlink" title="6、RGB和HSV的相互转换"></a>6、RGB和HSV的相互转换</h5><h6 id="6-1-RGB转HSV"><a href="#6-1-RGB转HSV" class="headerlink" title="6.1 RGB转HSV"></a>6.1 RGB转HSV</h6><script type="math/tex; mode=display">R^* = R/255,\quad G^*=G/255; \quad B^*=B/255</script><script type="math/tex; mode=display">Cmax=max(R^*,G^*,B^*);\quad Cmin=min(R^*,G^*,B^*)</script><script type="math/tex; mode=display">\Delta=Cmax-Cmin</script><p>H(Hue)的计算：</p><script type="math/tex; mode=display">H=\begin{cases}0^\circ,\quad \quad \quad \quad \quad\quad \quad \quad \Delta=0 \\60^\circ\times(\frac{G^*-B^*}{\Delta}+0),\quad Cmax=R^* \\60^\circ\times(\frac{B^*-R^*}{\Delta}+2),\quad Cmax=G^* \\60^\circ\times(\frac{R^*-G^*}{\Delta}+4),\quad Cmax=B^* \end{cases}</script><p>或以最小值来算</p><script type="math/tex; mode=display">H=\begin{cases}0^\circ,\quad \quad \quad \quad \quad\quad \quad \quad(if\quad Min=Max) \\60^\circ\times(\frac{G^*-B^*}{\Delta}+1),\quad (if\quad Min=B^*) \\60^\circ\times(\frac{B^*-R^*}{\Delta}+3),\quad (if\quad Min=R^*) \\60^\circ\times(\frac{R^*-G^*}{\Delta}+5),\quad (if\quad Min=G^*)\end{cases}</script><p>S(Saturation)的计算：</p><script type="math/tex; mode=display">S=\begin{cases}0, \quad \quad \quad Cmax=0\\\frac{\Delta}{Cmax}, \quad  Cmax\neq0 \end{cases}</script><p>或以最小值来算</p><script type="math/tex; mode=display">S=Cmax-Cmin</script><p>V(Value)的计算：</p><script type="math/tex; mode=display">V=Cmax</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># BGR -&gt; HSV</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BGR2HSV</span><span class="params">(_img)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">img = _img.copy() / <span class="number">255.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#输入为矩阵x,输出为形状和x一致的矩阵，其元素全部为0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">hsv = np.zeros_like(img, dtype=np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#get max min</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#np.max()返回指定轴的最大值，而np.argmax()返回指定轴的最大值对应的索引，指定哪个轴，就按哪个轴进行拆分。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">max_v = np.max(img, axis=<span class="number">2</span>).copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">min_v = np.min(img, axis=<span class="number">2</span>).copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#比如输入图像是(128,128,3) axis=2,就是分成三个128x128的面，三个面逐点比较大小得到128x128大小值位置的索引矩阵，索引值范围为[0,1,2]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">min_arg = np.argmin(img, axis=<span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># H</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">hsv[..., <span class="number">0</span>][np.where(max_v == min_v)]= <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## if min == B</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">ind = np.where(min_arg == <span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#Min = B, (G-R)/(Max-Min) BGR-&gt;[0,1,2],注意Max和Min坐标对应的索引</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">hsv[..., <span class="number">0</span>][ind] = <span class="number">60</span> * (img[..., <span class="number">1</span>][ind] - img[..., <span class="number">2</span>][ind]) / (max_v[ind] - min_v[ind]) + <span class="number">60</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## if min == R</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">ind = np.where(min_arg == <span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">hsv[..., <span class="number">0</span>][ind] = <span class="number">60</span> * (img[..., <span class="number">0</span>][ind] - img[..., <span class="number">1</span>][ind]) / (max_v[ind] - min_v[ind]) + <span class="number">180</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## if min == G</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">ind = np.where(min_arg == <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">hsv[..., <span class="number">0</span>][ind] = <span class="number">60</span> * (img[..., <span class="number">2</span>][ind] - img[..., <span class="number">0</span>][ind]) / (max_v[ind] - min_v[ind]) + <span class="number">300</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># S</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">hsv[..., <span class="number">1</span>] = max_v.copy() - min_v.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># V</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">hsv[..., <span class="number">2</span>] = max_v.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> hsv</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">HSV2BGR</span><span class="params">(_img, hsv)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">img = _img.copy() / <span class="number">255.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># get max and min</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">max_v = np.max(img, axis=<span class="number">2</span>).copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">min_v = np.min(img, axis=<span class="number">2</span>).copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">out = np.zeros_like(img)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">H = hsv[..., <span class="number">0</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">S = hsv[..., <span class="number">1</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">V = hsv[..., <span class="number">2</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">C = S</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">H_ = H / <span class="number">60.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">X = C * (<span class="number">1</span> - np.abs( H_ % <span class="number">2</span> - <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">Z = np.zeros_like(H)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">vals = [[Z,X,C], [Z,C,X], [X,C,Z], [C,X,Z], [C,Z,X], [X,Z,C]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">ind = np.where((i &lt;= H_) &amp; (H_ &lt; (i+<span class="number">1</span>)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">out[..., <span class="number">0</span>][ind] = (V - C)[ind] + vals[i][<span class="number">0</span>][ind]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">out[..., <span class="number">1</span>][ind] = (V - C)[ind] + vals[i][<span class="number">1</span>][ind]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">out[..., <span class="number">2</span>][ind] = (V - C)[ind] + vals[i][<span class="number">2</span>][ind]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">out[np.where(max_v == min_v)] = <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">out = np.clip(out, <span class="number">0</span>, <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">out = (out * <span class="number">255</span>).astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">"../imori.jpg"</span>).astype(np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># RGB &gt; HSV</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">hsv = BGR2HSV(img)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Transpose Hue</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">hsv[..., <span class="number">0</span>] = (hsv[..., <span class="number">0</span>] + <span class="number">180</span>) % <span class="number">360</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># HSV &gt; RGB</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">out = HSV2BGR(img, hsv)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Save result</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">cv2.imwrite(<span class="string">"out.jpg"</span>, out)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">cv2.imshow(<span class="string">"result"</span>, out)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">cv2.waitKey(<span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line">cv2.destroyAllWindows()</span></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_41560402/article/details/105277069" target="_blank" rel="noopener">参考资料</a></p><h5 id="6-2-HSV转RGB"><a href="#6-2-HSV转RGB" class="headerlink" title="6.2 HSV转RGB"></a>6.2 HSV转RGB</h5><script type="math/tex; mode=display">C=S;\quad H'=H/60;\quad X=C(1-|H'mod2-1|)</script><p>mod是一个求余函数，mod(exp1,exp2), 即是两个数值表达式作除法运算后的余数</p><script type="math/tex; mode=display">(R、G、B)=(V-C)(1,1,1)+\begin{cases}(0,0,0)\quad \quad (H\quad is\quad undefined) \\(C,X,0)\quad \quad (0\leq H'<1) \\(X,C,0)\quad \quad (1\leq H'<2) \\(0,C,X)\quad \quad (2\leq H'<3) \\(0,X,C)\quad \quad (3\leq H'<4) \\(X,0,C)\quad \quad (4\leq H'<5) \\(C,0,X)\quad \quad (5\leq H'<6) \end{cases}</script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// BGR -&gt; HSV</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">BGR2HSV</span><span class="params">(cv::Mat img)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get height and width</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">float</span> r, g, b;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">float</span> h, s, v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">float</span> _max, _min;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  cv::Mat hsv = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_32FC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// each y, x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// BGR -&gt; HSV</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      r = (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">2</span>] / <span class="number">255</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">      g = (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">1</span>] / <span class="number">255</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">      b = (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">0</span>] / <span class="number">255</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">      _max = fmax(r, fmax(g, b));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      _min = fmin(r, fmin(g, b));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// get Hue</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span>(_max == _min)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">      h = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_min == b) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">      h = <span class="number">60</span> * (g - r) / (_max - _min) + <span class="number">60</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_min == r) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">      h = <span class="number">60</span> * (b - g) / (_max - _min) + <span class="number">180</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_min == g) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">      h = <span class="number">60</span> * (r - b) / (_max - _min) + <span class="number">300</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// get Saturation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">      s = _max - _min;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// get Value</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">      v = _max;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">      hsv.at&lt;cv::Vec3f&gt;(y, x)[<span class="number">0</span>] = h;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">      hsv.at&lt;cv::Vec3f&gt;(y, x)[<span class="number">1</span>] = s;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">      hsv.at&lt;cv::Vec3f&gt;(y, x)[<span class="number">2</span>] = v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> hsv;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// HSV -&gt; BGR</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">HSV2BGR</span><span class="params">(cv::Mat hsv)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get height and width</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = hsv.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = hsv.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">float</span> h, s, v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> c, _h, _x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> r, g, b;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// each y, x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">      h = hsv.at&lt;cv::Vec3f&gt;(y, x)[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">      s = hsv.at&lt;cv::Vec3f&gt;(y, x)[<span class="number">1</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">      v = hsv.at&lt;cv::Vec3f&gt;(y, x)[<span class="number">2</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">      c = s;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">      _h = h / <span class="number">60</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">      _x = c * (<span class="number">1</span> - <span class="built_in">abs</span>(<span class="built_in">fmod</span>(_h, <span class="number">2</span>) - <span class="number">1</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">      r = g = b = v - c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (_h &lt; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">        r += c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">        g += _x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_h &lt; <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">        r += _x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">        g += c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_h &lt; <span class="number">3</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line">  g += c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line">  b += _x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_h &lt; <span class="number">4</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line">  g += _x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line">  b += c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_h &lt; <span class="number">5</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line">  r += _x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line">  b += c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">98</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_h &lt; <span class="number">6</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">99</span></pre></td><td class="code"><pre><span class="line">  r += c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">100</span></pre></td><td class="code"><pre><span class="line">  b += _x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">101</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">102</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">103</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">0</span>] = (uchar)(b * <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">104</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">1</span>] = (uchar)(g * <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">105</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">2</span>] = (uchar)(r * <span class="number">255</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">106</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">107</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">108</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">109</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">110</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">111</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">112</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// inverse Hue</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">113</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">inverse_hue</span><span class="params">(cv::Mat hsv)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">114</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = hsv.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">115</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = hsv.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">116</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">117</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">118</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">119</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">//hue值为[0,360], inverse Hue就是找圆上对称的那个点，181对称的就是1。类似于二值图像的反像-&gt;色相反转</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">120</span></pre></td><td class="code"><pre><span class="line">      hsv.at&lt;cv::Vec3f&gt;(y, x)[<span class="number">0</span>] = <span class="built_in">fmod</span>(hsv.at&lt;cv::Vec3f&gt;(y, x)[<span class="number">0</span>] + <span class="number">180</span>, <span class="number">360</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">121</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">122</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">123</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">124</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> hsv;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">125</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">126</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">127</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">128</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">129</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// read image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">130</span></pre></td><td class="code"><pre><span class="line">  cv::Mat img = cv::imread(<span class="string">"imori.jpg"</span>, cv::IMREAD_COLOR);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">131</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">132</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// BGR -&gt; HSV</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">133</span></pre></td><td class="code"><pre><span class="line">  cv::Mat hsv = BGR2HSV(img);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">134</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">135</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Inverse Hue</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">136</span></pre></td><td class="code"><pre><span class="line">  hsv = inverse_hue(hsv);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">137</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">138</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Gray -&gt; Binary</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">139</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = HSV2BGR(hsv);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">140</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">141</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//cv::imwrite("out.jpg", out);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">142</span></pre></td><td class="code"><pre><span class="line">  cv::imshow(<span class="string">"sample"</span>, out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">143</span></pre></td><td class="code"><pre><span class="line">  cv::waitKey(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">144</span></pre></td><td class="code"><pre><span class="line">  cv::destroyAllWindows();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">145</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">146</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr></table></figure><h4 id="二、减色处理"><a href="#二、减色处理" class="headerlink" title="二、减色处理"></a>二、减色处理</h4><h5 id="1、为什么需要艰涩处理？"><a href="#1、为什么需要艰涩处理？" class="headerlink" title="1、为什么需要艰涩处理？"></a>1、为什么需要艰涩处理？</h5><p>RGB的像素值在0~255之间，当想要用更少的内存空间表征一张图像时，可以采用减色处理。</p><h5 id="2、减色处理的说明"><a href="#2、减色处理的说明" class="headerlink" title="2、减色处理的说明"></a>2、减色处理的说明</h5><p>RGB的像素值在0~255之间，将图像用 32、96、160、224 这4个像素值表示。即将图像由256³压缩至4³，RGB的值只取{32,96,160,224}，这被称作色彩量化。</p><script type="math/tex; mode=display">val=\begin{cases}32\quad \quad \quad (0\leq var<64) \\96\quad \quad \quad (64\leq var<128) \\160\quad \quad (128\leq var<192) \\224\quad \quad (192\leq var<256) \end{cases}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dicrease color</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dicrease_color</span><span class="params">(img)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">out = img.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">out = out // <span class="number">64</span> * <span class="number">64</span> + <span class="number">32</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dedcrease color</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">decrease_color</span><span class="params">(cv::Mat img)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        out.at&lt;cv::Vec3b&gt;(y, x)[c] = (uchar)(<span class="built_in">floor</span>((<span class="keyword">double</span>)img.at&lt;cv::Vec3b&gt;(y, x)[c] / <span class="number">64</span>) * <span class="number">64</span> + <span class="number">32</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="三、平均池化"><a href="#三、平均池化" class="headerlink" title="三、平均池化"></a>三、平均池化</h4><p>将图片使用均等大小网格分割，并求网格内代表值的操作称为<strong>池化（Pooling）</strong>。</p><p>将图片分割成固定大小网格，池化后图像的像素值取每个网格内所有像素的平均值的操作成为<strong>平均池化</strong>。</p><p>池化操作是<strong>卷积神经网络（Convolution Neural Network）</strong>中重要的图像处理方式。平均池化按照下式定义：</p><script type="math/tex; mode=display">v=\frac{1}{|R|}\cdot\sum^{R}_{i = 1}{v_i}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># average pooling</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average_pooling</span><span class="params">(img, G=<span class="number">8</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    out = img.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    Nh = int(H / G)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    Nw = int(W / G)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#out = np.zeros([Nh, Nw, 3], np.uint8)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(Nh):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(Nw):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(C):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                <span class="comment">#这里out的意思是8*8的区域都用该区域的平均值赋值，输出和输入的尺寸是一样的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                <span class="comment">#正常的池化后的输出为输入的1/G,步长应该为G,但输出的效果不容易看</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                <span class="comment">#下面np.int在新版的numpy中已经被废弃，需要用int32或其他精度</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                out[G*y:G*(y+<span class="number">1</span>),G*x:G*(x+<span class="number">1</span>),c]=np.mean(out[G*y:G*(y+<span class="number">1</span>), G*x:G*(x+<span class="number">1</span>), c]).astype(np.int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#out[y, x, c] = np.mean(input[G*y:G*(y+1), G*x:G*(x+1), c]).astype(np.uint8)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// average pooling</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">average_pooling</span><span class="params">(cv::Mat img)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> r = <span class="number">8</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y+=r)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x+=r)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dy = <span class="number">0</span>; dy &lt; r; dy++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> dx = <span class="number">0</span>; dx &lt; r; dx++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            v += (<span class="keyword">double</span>)img.at&lt;cv::Vec3b&gt;(y + dy, x + dx)[c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        v /= (r * r);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dy = <span class="number">0</span>; dy &lt; r; dy++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> dx = <span class="number">0</span>; dx &lt; r; dx++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            out.at&lt;cv::Vec3b&gt;(y + dy, x + dx)[c] = (uchar)v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="四、最大池化"><a href="#四、最大池化" class="headerlink" title="四、最大池化"></a>四、最大池化</h4><p>网格内的值不取平均值，而是取网格内的最大值进行池化操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># max pooling</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pooling</span><span class="params">(img, G=<span class="number">8</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># Max Pooling</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    out = img.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    Nh = int(H / G)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    Nw = int(W / G)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(Nh):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(Nw):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(C):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                out[G*y:G*(y+<span class="number">1</span>), G*x:G*(x+<span class="number">1</span>), c] = np.max(out[G*y:G*(y+<span class="number">1</span>), G*x:G*(x+<span class="number">1</span>), c])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// max pooling</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">max_pooling</span><span class="params">(cv::Mat img)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> r = <span class="number">8</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y+=r)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x+=r)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dy = <span class="number">0</span>; dy &lt; r; dy++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> dx = <span class="number">0</span>; dx &lt; r; dx++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            v = fmax(img.at&lt;cv::Vec3b&gt;(y + dy, x + dx)[c], v);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dy = <span class="number">0</span>; dy &lt; r; dy++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> dx = <span class="number">0</span>; dx &lt; r; dx++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            out.at&lt;cv::Vec3b&gt;(y + dy, x + dx)[c] = (uchar)v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="五、高斯滤波"><a href="#五、高斯滤波" class="headerlink" title="五、高斯滤波"></a>五、高斯滤波</h4><p>高斯滤波器是一种可以使图像<strong>平滑</strong>的滤波器，用于去除<strong>噪声</strong>。可用于去除噪声的滤波器还有中值滤波器，平滑滤波器、LoG滤波器。</p><p>高斯滤波器一般使用(3x3)的卷积核。高斯滤波器将中心像素周围的像素按照高斯分布加权平均进行平滑化。这样的(二维)权值通常被称为<strong>卷积核（kernel）</strong>或者<strong>滤波器（fifilter）</strong></p><p>由于为了保持输入和输出图像的尺寸保持一致。因此，我们需要在图像的四边缘补 0。这种方法称作<strong>Zero Padding</strong>。并且权值 g(卷积核)要进行归一化操作。</p><script type="math/tex; mode=display">\sum_{}{g}=1</script><p>高斯分布公式计算权值：</p><script type="math/tex; mode=display">g(x,y,\sigma)=\frac{1}{2\cdot\pi\cdot\sigma^2}\cdot e^{-\frac{x^2+y^2}{2\sigma^2}}</script><p>标准差&sigma;=1.3的8-近邻高斯滤波器如下：</p><script type="math/tex; mode=display">K=\frac{1}{16}\begin{bmatrix}1 & 2 & 1 \\ 2 & 4 & 2\\1 & 2 & 1\end{bmatrix}</script> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gaussian filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gaussian_filter</span><span class="params">(img, K_size=<span class="number">3</span>, sigma=<span class="number">1.3</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> len(img.shape) == <span class="number">3</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">img = np.expand_dims(img, axis=<span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## Zero padding</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">pad = K_size // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#左右，上下个扩充pad个像素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">out = np.zeros((H + pad * <span class="number">2</span>, W + pad * <span class="number">2</span>, C), dtype=np.float64)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#将原始图像嵌套到扩充边的里面</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">out[pad: pad + H, pad: pad + W] = img.copy().astype(np.float64)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## prepare Kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">K = np.zeros((K_size, K_size), dtype=np.float64)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(-pad, -pad + K_size):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(-pad, -pad + K_size):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">K[y + pad, x + pad] = np.exp( -(x ** <span class="number">2</span> + y ** <span class="number">2</span>) / (<span class="number">2</span> * (sigma ** <span class="number">2</span>)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">K /= (<span class="number">2</span> * np.pi * sigma * sigma)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">K /= K.sum()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">tmp = out.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># filtering</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(H):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(W):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> range(C):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">out[pad + y, pad + x, c] = np.sum(K * tmp[y: y + K_size, x: x + K_size, c])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">out = np.clip(out, <span class="number">0</span>, <span class="number">255</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#去掉padding的部分，保持图像的原始尺寸不变</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">out = out[pad: pad + H, pad: pad + W].astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// gaussian filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">gaussian_filter</span><span class="params">(cv::Mat img, <span class="keyword">double</span> sigma, <span class="keyword">int</span> kernel_size)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> pad = <span class="built_in">floor</span>(kernel_size / <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> _x = <span class="number">0</span>, _y = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> kernel_sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get gaussian kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">float</span> kernel[kernel_size][kernel_size];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; kernel_size; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; kernel_size; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      _y = y - pad;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      _x = x - pad; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      kernel[y][x] = <span class="number">1</span> / (<span class="number">2</span> * M_PI * sigma * sigma) * <span class="built_in">exp</span>( - (_x * _x + _y * _y) / (<span class="number">2</span> * sigma * sigma));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      kernel_sum += kernel[y][x];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; kernel_size; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; kernel_size; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      kernel[y][x] /= kernel_sum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// filtering</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">      v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> dy = -pad; dy &lt; pad + <span class="number">1</span>; dy++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dx = -pad; dx &lt; pad + <span class="number">1</span>; dx++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">if</span> (((x + dx) &gt;= <span class="number">0</span>) &amp;&amp; ((y + dy) &gt;= <span class="number">0</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">            v += (<span class="keyword">double</span>)img.at&lt;cv::Vec3b&gt;(y + dy, x + dx)[c] * kernel[dy + pad][dx + pad];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(y, x)[c] = v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/2021/06/12/Image-Process-Zero-Plus/8.jpg" width="300"></div><div class="group-picture-column" style="width: 50%;"><img src="/2021/06/12/Image-Process-Zero-Plus/9.jpg" width="300"></div></div></div></div><h4 id="六、中值滤波"><a href="#六、中值滤波" class="headerlink" title="六、中值滤波"></a>六、中值滤波</h4><p>中值滤波器是一种可以使图像平滑的滤波器。中值滤波本质上是一种统计排序滤波器。对于原图像中某点（i，j），中值滤波以该点为中心的邻域内的所有像素的统计排序中值作为（i，j）点的响应。</p><p>当像素点太大或者太小时都不同意被选中，所以中值滤波对像素值比较大或者比较小的噪声滤除的效果比较好，如：椒盐噪声，对比较均匀的噪声滤除的效果一般，如：高斯噪声。同线性平滑滤波器相比，中值滤波在降噪同时引起的模糊效应较低。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Median filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">median_filter</span><span class="params">(img, K_size=<span class="number">3</span>)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    H, W, C = img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">## Zero padding</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    pad = K_size // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    out = np.zeros((H + pad*<span class="number">2</span>, W + pad*<span class="number">2</span>, C), dtype=np.float)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    out[pad:pad+H, pad:pad+W] = img.copy().astype(np.float)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    tmp = out.copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># filtering</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(H):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(W):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(C):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                out[pad+y, pad+x, c] = np.median(tmp[y:y+K_size, x:x+K_size, c])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    out = out[pad:pad+H, pad:pad+W].astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> out</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// median filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">median_filter</span><span class="params">(cv::Mat img, <span class="keyword">int</span> kernel_size)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> channel = img.channels();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC3);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare kernel</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> pad = <span class="built_in">floor</span>(kernel_size / <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// filtering</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> vs[kernel_size * kernel_size];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; channel; c++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      v = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      count = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; kernel_size * kernel_size; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        vs[i] = <span class="number">999</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// get neighbor pixels</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> dy = -pad; dy &lt; pad + <span class="number">1</span>; dy++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dx = -pad; dx &lt; pad + <span class="number">1</span>; dx++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">if</span> (((y + dy) &gt;= <span class="number">0</span>) &amp;&amp; ((x + dx) &gt;= <span class="number">0</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            vs[count++] = (<span class="keyword">int</span>)img.at&lt;cv::Vec3b&gt;(y + dy, x + dx)[c];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// get and assign median</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">      <span class="built_in">std</span>::sort(vs, vs + (kernel_size * kernel_size));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(y, x)[c] = (uchar)vs[<span class="keyword">int</span>(<span class="built_in">floor</span>(count / <span class="number">2</span>)) + <span class="number">1</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/2021/06/12/Image-Process-Zero-Plus/8.jpg" width="300"></div><div class="group-picture-column" style="width: 50%;"><img src="/2021/06/12/Image-Process-Zero-Plus/10.jpg" width="300"></div></div></div></div><p><a href="https://zhuanlan.zhihu.com/p/67930839" target="_blank" rel="noopener">参考:1</a></p><p><a href="https://zhuanlan.zhihu.com/p/116426192" target="_blank" rel="noopener">参考:2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图像处理学习&quot;&gt;&lt;a href=&quot;#图像处理学习&quot; class=&quot;headerlink&quot; title=&quot;图像处理学习&quot;&gt;&lt;/a&gt;图像处理学习&lt;/h2&gt;&lt;h4 id=&quot;第一部分&quot;&gt;&lt;a href=&quot;#第一部分&quot; class=&quot;headerlink&quot; title=&quot;第
      
    
    </summary>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/categories/Image-Processing/"/>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/tags/Image-Processing/"/>
    
  </entry>
  
  <entry>
    <title>Image-Process-Zero</title>
    <link href="http://yoursite.com/2021/06/11/Image-Process-Zero/"/>
    <id>http://yoursite.com/2021/06/11/Image-Process-Zero/</id>
    <published>2021-06-11T13:58:13.000Z</published>
    <updated>2021-07-03T15:59:46.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像处理学习"><a href="#图像处理学习" class="headerlink" title="图像处理学习"></a>图像处理学习</h2><h4 id="参考的网上链接：Image-Processing"><a href="#参考的网上链接：Image-Processing" class="headerlink" title="参考的网上链接：Image Processing"></a>参考的网上链接：<a href="https://github.com/gzr2017/ImageProcessing100Wen/tree/master" target="_blank" rel="noopener">Image Processing</a></h4><h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h4><h4 id="一、图像通道的处理"><a href="#一、图像通道的处理" class="headerlink" title="一、图像通道的处理"></a>一、图像通道的处理</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#cv2.imread()读取的是图像是按照BGR的顺序排列的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#所以BGR转RGB，需要读取每个通道，在按照R、G、B的顺序赋值进去</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> cv2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;img = cv2.imread(<span class="string">"imori.jpg"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;red = img[:,:,<span class="number">2</span>].copy() <span class="comment">#列表拷贝赋值函数，进行备份复制列表</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过print(id(red))和print(id(img[:,:,2]))可以看到id是不一样的，说明存储位置发生了变化，起到了保护原始数据的作用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;print(img)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">[[[ <span class="number">65</span> <span class="number">134</span> <span class="number">107</span>]   <span class="comment">#[ 65 134 107]这是一个像素的BGR值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">65</span> <span class="number">134</span> <span class="number">107</span>]   <span class="comment">#第二个像紿</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">65</span> <span class="number">134</span> <span class="number">107</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  ..., </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">33</span>  <span class="number">90</span>  <span class="number">69</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">33</span>  <span class="number">90</span>  <span class="number">69</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">31</span>  <span class="number">90</span>  <span class="number">69</span>]]   <span class="comment">#图像中第一行的最后一个像素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"> [[ <span class="number">64</span> <span class="number">133</span> <span class="number">106</span>]    <span class="comment">#图像中第二行的第一个像素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">64</span> <span class="number">133</span> <span class="number">106</span>]    <span class="comment">#以此类推</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">64</span> <span class="number">133</span> <span class="number">106</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  ...,             <span class="comment">#这里的...,并不表示说什么，不是分层的意思</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">17</span>  <span class="number">55</span>  <span class="number">59</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">19</span>  <span class="number">57</span>  <span class="number">61</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">20</span>  <span class="number">58</span>  <span class="number">62</span>]]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Save result</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">cv2.imwrite(<span class="string">"out.jpg"</span>, img)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">cv2.imshow(<span class="string">"result"</span>, img)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">cv2.waitKey(<span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">cv2.destroyAllWindows()</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Channel swap</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">channel_swap</span><span class="params">(cv::Mat img)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get height and width</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output, 注意height和width的顺序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC3); </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// each y, x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// R -&gt; B</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">0</span>] = img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">2</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// B -&gt; R</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">2</span>] = img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// G -&gt; G</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">1</span>] = img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">1</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;Vec3f&gt; 浮点</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;Vec3d&gt; double</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;Vec3b&gt; 8U类型的RGB彩色图像(0-255),可以看作是vector&lt;uchar,3&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于在OpenCV中，使用imread读取到的Mat图像数据，都是用uchar类型的数据存储，对于RGB三通道的图像，每个点的数据都是一个Vec3b类型的数据。可以使用at定位到每一个像素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//单通道：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//img.at&lt;uchar&gt;(x,y) = 25;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//多通道：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//img.at&lt;cv::Vec3b&gt;(x,y)[0] = 25; //B</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//img.at&lt;cv::Vec3b&gt;(x,y)[1] = 25; //G</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//img.at&lt;cv::Vec3b&gt;(x,y)[2] = 25; //R</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// read image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">  cv::Mat img = cv::imread(<span class="string">"imori.jpg"</span>, cv::IMREAD_COLOR);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// channel swap</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = channel_swap(img);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">  cv::imwrite(<span class="string">"out.jpg"</span>, out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">  cv::imshow(<span class="string">"sample"</span>, out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">  cv::waitKey(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">  cv::destroyAllWindows();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h5 id="二、图像的灰度化"><a href="#二、图像的灰度化" class="headerlink" title="二、图像的灰度化"></a>二、图像的灰度化</h5><p>灰度是一种图像亮度的表示方法，是单通道的图像，通过下式计算：</p><script type="math/tex; mode=display">Y = 0.2126\cdot R+0.7152\cdot G + 0.0722\cdot B</script><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BGR2GRAY</span><span class="params">(img)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">r = img[:,:,<span class="number">2</span>].copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">g = img[:,:,<span class="number">0</span>].copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">b = img[:,:,<span class="number">1</span>].copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">gray = <span class="number">0.2126</span> * r + <span class="number">0.7152</span> * g + <span class="number">0.0722</span> * b</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> gray.astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">"imori.jpg"</span>).astype(np.float) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># astype 转换数组的数据类型，dtype 用于说明一个数组数据类型的对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Grayscale</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">out = BGR2GRAY(img)</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">BRG2GRAY</span><span class="params">(cv::Mat img)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    cv::Mat output = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// each y, x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// BGR -&gt; Gray</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        output.at&lt;uchar&gt;(y, x) = <span class="number">0.2126</span> * (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">2</span>] \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">          + <span class="number">0.7152</span> * (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">1</span>] \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">          + <span class="number">0.0722</span> * (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// read image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  cv::Mat img = cv::imread(<span class="string">"imori.jpg"</span>, cv::IMREAD_COLOR);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//IMREAD_UNCHANGED-&gt;指定用图片的原来格式打开，即以不改变图片的方式打开，图片是彩色就是彩色，图片是灰度图像就是灰度图像</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//IMREAD_GRAYSCALE-&gt;指定用灰度图像的方式打开图片，即将原始图像转化为灰度图像再打开</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//IMREAD_COLOR-&gt;指定用彩色图像打开图片</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// BGR -&gt; Gray</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = BGR2GRAY(img);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//cv::imwrite("out.jpg", out);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  cv::imshow(<span class="string">"sample"</span>, out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  cv::waitKey(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">  cv::destroyAllWindows();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h5 id="三、图像的二值化"><a href="#三、图像的二值化" class="headerlink" title="三、图像的二值化"></a>三、图像的二值化</h5><p>二值化：将图像使用黑和白两种颜色表示的方法。</p><script type="math/tex; mode=display">y=\begin{cases}0,\quad (if \quad y <128) \\255, \quad else\end{cases}</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">def binarization(img, th&#x3D;128):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    img[img &lt; th] &#x3D; 0</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    img[img &gt;&#x3D; th] &#x3D; 255</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    return img</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gray -&gt; Binary</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">Binarize</span><span class="params">(cv::Mat gray, <span class="keyword">int</span> th)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = gray.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = gray.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// each y, x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// Binarize</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (gray.at&lt;uchar&gt;(y, x) &gt; th)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        out.at&lt;uchar&gt;(y, x) = <span class="number">255</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        out.at&lt;uchar&gt;(y, x) = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h5 id="四、大津二值化算法-Otsu"><a href="#四、大津二值化算法-Otsu" class="headerlink" title="四、大津二值化算法(Otsu)"></a>四、大津二值化算法(Otsu)</h5><p>最大类间方差法，是一种可以自动确定二值化中阈值的算法。</p><p>令{0,1,2,…,L-1}表示一副大小为<em>M x N</em>像素的数字图像中的L<em>个不同的灰度级，n<sub>i</sub> 表示灰度级为</em>i*的像素数。</p><p>图像中的像素总数为：</p><script type="math/tex; mode=display">N=n_0+n_1+...+n_{L-1}</script><p>像素的灰度级为i* 的概率为：</p><script type="math/tex; mode=display">p_i = n_i / N, \quad p_i\geq 0, \quad \displaystyle \sum^{L}_{i = 1}{p_i = 1}.\quad \quad (1)</script><p>现在假设通过一个灰度级为k的阈值将这些像素点划分为两类C<sub>0</sub>(目标)和C<sub>1</sub>(背景)，C<sub>0</sub>表示灰度级为[1,…,k]的像素点，C<sub>1</sub>表示灰度级为[k+1,…,L]的像素点。</p><p>像素被分类到C<sub>0</sub>和C<sub>1</sub>中的概率为：</p><script type="math/tex; mode=display">w_0=P_r(C_0)=\sum^{k}_{i=1}{p_i}=w(k) \quad \quad (2)</script><script type="math/tex; mode=display">w_1=P_r(C_1)=\sum^{L}_{i=k+1}{p_i}=1-w(k) \quad \quad (3)</script><p>各类的平均灰度级为：</p><script type="math/tex; mode=display">\mu_0 = \sum^{k}_{i=1}{iP_r(i|C_0)} = \sum^{k}_{i=1}{\frac{iPr(C_0|i)p(i)}{P_r(C_0)}}= \sum^{k}_{i=1}{ip_i/w_0}=\mu(k)/w(k), \quad P_r(C_0|i)=1 \quad (i=i...k)\quad \quad (4)</script><script type="math/tex; mode=display">\mu_1 = \sum^{L}_{i=k+1}{iP_r(i|C_1)} = \sum^{L}_{i=k+1}{\frac{iPr(C_1|i)p(i)}{P_r(C_1)}}= \sum^{L}_{i=k+1}{ip_i/w_1}=\frac{\mu_T-\mu(k)}{1-w(k)} \quad \quad (5)</script><p>其中：</p><script type="math/tex; mode=display">w(k)=\sum^{k}_{i=1}{p_i}\quad \quad (6) ,\quad \mu(k)=\sum^{k}_{i=1}{ip_i}\quad \quad (7)</script><p>上面分别为灰度级1到k的累积出现的概率和平均灰度级(一阶累计距)。</p><script type="math/tex; mode=display">\mu_T=\mu(L)=\sum^{L}_{i=1}{ip_i}\quad \quad (8)</script><p>上式是整幅图像的平均灰度级。可以看出，对于任意选定的k, 都有：</p><script type="math/tex; mode=display">w_0\mu_0+w_1\mu_1=\mu_T,\quad w_0+w_1=1.\quad \quad (9)</script><p>这两类的类内方差由下面的公式给出：(二阶累积距)</p><script type="math/tex; mode=display">\sigma_0^2=\sum^{k}_{i=1}{(i-\mu_0)^2P_r(i|C_0)}=\sum^{k}_{i=1}{(i-\mu_0)^2p_i/w_0}.\quad \quad (10)</script><script type="math/tex; mode=display">\sigma_1^2=\sum^{L}_{i=k+1}{(i-\mu_1)^2P_r(i|C_1)}=\sum^{L}_{i=k+1}{(i-\mu_1)^2p_i/w_1}.\quad \quad (11)</script><p>为了评价灰度级k这个阈值或门限的”好坏”的程度，我们需要引入判别式分析中使用的判别式标准来测量:</p><script type="math/tex; mode=display">\lambda=\sigma_B^2/\sigma_W^2, \quad K=\sigma_T^2/\sigma_W^2, \quad \eta=\sigma_B^2/\sigma_T^2\quad \quad (12)</script><p>其中:</p><script type="math/tex; mode=display">\sigma_W^2=w_0\sigma_0^2+w_1\sigma_1^2\quad \quad (13)</script><script type="math/tex; mode=display">\sigma_B^2=w_0(\mu_o-\mu_T)^2+w_1(\mu_1-\mu_T)^2=w_0w_1(\mu_1-\mu_0)^2\quad \quad (14)</script><p>根据公式(9)，可以得出：</p><script type="math/tex; mode=display">\sigma_T^2=\sum^{L}_{i=1}{(i-\mu_T)^2p_i} ，是一个常数\quad \quad (15)</script><p>式13是类内方差，式14是类间方差，式15是灰度级的总方差。此时的目标即便为一个优化问题，即寻找一个门限k使12)式中给出的一个目标函数取最大值。</p><p>上面给出的判别式标准是分别求取λ、κ和η的最大值。</p><script type="math/tex; mode=display">\sigma_W^2+\sigma_B^2=\sigma_T^2. \quad \sigma_W^2和\sigma_B^2是门限k的函敿</script><script type="math/tex; mode=display">\eta(k)=\sigma_B^2(k)/\sigma_T^2.\quad \sigma_B^2基于一阶统计(类均值)，比\sigma_W^2基于二阶统计(类方差)简单</script><script type="math/tex; mode=display">\sigma_B^2(k)=\frac{[\mu_Tw(k)-\mu(k)]^2}{w(k)[1-w(k)]}</script><p>最佳门限k<sup>*</sup> 为：</p><script type="math/tex; mode=display">\sigma_B^2(k^*)=arg\,\max_{1\leq k\leq L} \sigma_B^2(k)</script><p>根据公式6和7，依次选择不同的k值顺序搜索，寻找最佳门限k<sup>*</sup> 使得n取最大值。</p><p>证明类间方差：</p><script type="math/tex; mode=display">\sigma^2=w_1(\mu_1-\mu)^2+w_2(\mu_2-\mu), \quad \quad \begin{cases}w_1+w_2=1 \\w_1\mu_1+w_2\mu_2=\mu\end{cases}</script><script type="math/tex; mode=display">\sigma^2=w_1(\mu_1^2-2\mu_1\mu+\mu^2)+w_2(\mu_2^2-2\mu_2\mu+\mu^2)</script><script type="math/tex; mode=display">\sigma^2=w_1\mu_1^2-2w_1\mu_1\mu+w_1\mu^2+w_2\mu_2^2-2w_2\mu_2\mu+w_2\mu^2</script><script type="math/tex; mode=display">\sigma^2=w_1\mu_1^2+w_2\mu_2^2-2(w_1\mu_1+w_2\mu_2)\mu+(w_1+w_2)\mu^2</script><script type="math/tex; mode=display">\sigma^2=w_1\mu_1^2+w_2\mu_2^2-2(w_1\mu_1+w_2\mu_2)\mu+\mu^2=w_1\mu_1^2+w_2\mu_2^2-\mu^2</script><script type="math/tex; mode=display">\sigma^2=w_1\mu_1^2+w_2\mu_2^2-(w_1\mu_1+w_2\mu_2)^2</script><script type="math/tex; mode=display">\sigma^2=w_1\mu_1^2+w_2\mu_2^2-(w_1\mu_1)^2-2w_1\mu_1w_2\mu_2-(w_2\mu_2)^2</script><script type="math/tex; mode=display">\sigma^2=w_1w_2(\frac{1}{w_2}\mu_1^2+\frac{1}{w_1}\mu_2^2-\frac{w_1}{w_2}\mu_1^2-2\mu_1\mu_2-\frac{w_2}{w_1}\mu_2^2)</script><script type="math/tex; mode=display">\sigma^2=(\mu_1^2-w\mu_1\mu_2+\mu_2^2)=w_1w_2(\mu_1-\mu_2)^2</script><p> 大津算法的步骤：</p><ol><li><p>先转化为灰度图，计算输入图像的归一化直方图</p></li><li><p>计算像素被分配到各个类别的概率</p></li><li><p>计算各类的平均灰度值</p></li><li><p>计算全局灰度均值</p></li><li><p>计算类间方差</p></li><li><p>遍历各个灰度级，得到类间方差最大的k值。如果最大值不唯一，则取平均值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">import cv2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">import numpy as np</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"># Gray scale</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">def BGR2GRAY(img):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">b &#x3D; img[:,:,0].copy() </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">g &#x3D; img[:,:,1].copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">r &#x3D; img[:,:,2].copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">out &#x3D; 0.2126 * r + 0.7152 * g + 0.0722 * b</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">out &#x3D; out.astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">return out</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"># Otsu Binarization</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">def otus_binarization(img, th&#x3D;128):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"> max_sigma &#x3D; 0 </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"> max_th &#x3D; 0</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"> for _t in range(1, 255):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"> pix0 &#x3D; img[np.where(img &lt; _t)]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"> m0 &#x3D; np.mean(pix0) if len(pixs) &gt; 0 else 0.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"> w0 &#x3D; len(pix0) &#x2F; (H * W)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"> pix1 &#x3D; img[np.where(img &lt; _t)]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"> m1 &#x3D; np.mean(pix1) if len(pix1) &gt; 0 else 0.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"> w1 &#x3D; len(pix1) &#x2F; (H * W)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"> sigma &#x3D; w0 * w1 * ((m0 - m1) ** 2)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"> if sigma &gt; max_sigma:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"> max_sigma &#x3D; sigma</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"> max_th &#x3D; _t</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"> th &#x3D; max_th</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"> img[img &lt; th] &#x3D; 0</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"> img[out &gt;&#x3D; th] &#x3D; 255</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"> return img</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"># Read image</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">img &#x3D; cv2.imread(&quot;imori.jpg&quot;).astype(np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">H, W, C &#x3D;img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"># Grayscale</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">out &#x3D; BGR2GRAY(img)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"># Otsu&#39;s binarization</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">out &#x3D; otsu_binarization(out)</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// BGR -&gt; Gray</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">BGR2GRAY</span><span class="params">(cv::Mat img)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get height and width</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// each y, x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// BGR -&gt; Gray</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;uchar&gt;(y, x) = <span class="number">0.2126</span> * (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">2</span>] \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        + <span class="number">0.7152</span> * (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">1</span>] \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        + <span class="number">0.0722</span> * (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gray -&gt; Binary</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">Binarize_Otsu</span><span class="params">(cv::Mat gray)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = gray.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = gray.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// determine threshold</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> w0 = <span class="number">0</span>, w1 = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> m0 = <span class="number">0</span>, m1 = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> max_sb = <span class="number">0</span>, sb = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> th = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Get threshold</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">255</span>; t++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">    w0 = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">    w1 = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">    m0 = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    m1 = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">        val = (<span class="keyword">int</span>)(gray.at&lt;uchar&gt;(y, x));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (val &lt; t)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">                w0++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">                m0 += val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">                w1++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">                m1 += val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">    m0 /= w0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">    m1 /= w1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">    w0 /= (<span class="built_in">height</span> * <span class="built_in">width</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">    w1 /= (<span class="built_in">height</span> * <span class="built_in">width</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">    sb = w0 * w1 * <span class="built_in">pow</span>((m0 - m1), <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span>(sb &gt; max_sb)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">      max_sb = sb;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">      th = t;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"threshold:"</span> &lt;&lt; th &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// each y, x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// Binarize</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (gray.at&lt;uchar&gt;(y, x) &gt; th)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">        out.at&lt;uchar&gt;(y, x) = <span class="number">255</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">        out.at&lt;uchar&gt;(y, x) = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// read image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line">  cv::Mat img = cv::imread(<span class="string">"imori.jpg"</span>, cv::IMREAD_COLOR);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// BGR -&gt; Gray</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">98</span></pre></td><td class="code"><pre><span class="line">  cv::Mat gray = BGR2GRAY(img);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">99</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">100</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Gray -&gt; Binary</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">101</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = Binarize_Otsu(gray);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">102</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">103</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//cv::imwrite("out.jpg", out);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">104</span></pre></td><td class="code"><pre><span class="line">  cv::imshow(<span class="string">"sample"</span>, out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">105</span></pre></td><td class="code"><pre><span class="line">  cv::waitKey(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">106</span></pre></td><td class="code"><pre><span class="line">  cv::destroyAllWindows();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">107</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">108</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">109</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h5 id="五、HSV变换"><a href="#五、HSV变换" class="headerlink" title="五、HSV变换"></a>五、HSV变换</h5><p>HSV即使用色相(Hue)、饱和度(Saturation)、明度(Value)来表示色彩的一种方式。</p><p>色相：将颜色使用0&deg;到60&deg;表示，就是平常所说的颜色名称，如红色、蓝色。色相与数值按下表</p><p>对应。</p></li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">红</th><th style="text-align:center">黄</th><th style="text-align:center">绿</th><th style="text-align:center">青</th><th style="text-align:center">蓝</th><th style="text-align:center">品红</th><th style="text-align:center">红</th></tr></thead><tbody><tr><td style="text-align:center">0°</td><td style="text-align:center">60°</td><td style="text-align:center">120°</td><td style="text-align:center">180°</td><td style="text-align:center">240°</td><td style="text-align:center">300°</td><td style="text-align:center">360°</td></tr></tbody></table></div><p>   饱和度：是指色彩的纯度，饱和度越低则颜色越暗淡（0 &lt;=S &lt; 1)</p><p>   明度：即颜色的明暗程度。数值越高越接近白色，数值越低越接近黑色(0&lt;=V&lt;1)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图像处理学习&quot;&gt;&lt;a href=&quot;#图像处理学习&quot; class=&quot;headerlink&quot; title=&quot;图像处理学习&quot;&gt;&lt;/a&gt;图像处理学习&lt;/h2&gt;&lt;h4 id=&quot;参考的网上链接：Image-Processing&quot;&gt;&lt;a href=&quot;#参考的网上链接：Image
      
    
    </summary>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/categories/Image-Processing/"/>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/tags/Image-Processing/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-MicroService</title>
    <link href="http://yoursite.com/2021/06/11/Spring-Cloud-MicroService/"/>
    <id>http://yoursite.com/2021/06/11/Spring-Cloud-MicroService/</id>
    <published>2021-06-11T13:24:18.000Z</published>
    <updated>2021-06-11T13:34:07.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><h3 id="1、什么是微服务"><a href="#1、什么是微服务" class="headerlink" title="1、什么是微服务"></a>1、什么是微服务</h3><h4 id="集群-cluster-：同一种软件服务的多个服务节点共同为系统提供服务过程"><a href="#集群-cluster-：同一种软件服务的多个服务节点共同为系统提供服务过程" class="headerlink" title="集群(cluster)：同一种软件服务的多个服务节点共同为系统提供服务过程"></a>集群(cluster)：同一种软件服务的多个服务节点共同为系统提供服务过程</h4><h4 id="分布式-distribute-：不同软件集群共同为一个系统提供服务"><a href="#分布式-distribute-：不同软件集群共同为一个系统提供服务" class="headerlink" title="分布式(distribute)：不同软件集群共同为一个系统提供服务"></a>分布式(distribute)：不同软件集群共同为一个系统提供服务</h4><h4 id="微服务：一种新的架构，特点如下："><a href="#微服务：一种新的架构，特点如下：" class="headerlink" title="微服务：一种新的架构，特点如下："></a>微服务：一种新的架构，特点如下：</h4><ol><li><p>基于原来单个应用开发出一系列微小服务</p></li><li><p>每个服务运行在自己计算机进程里面，每个服务都是一个Spring Boot应用</p></li><li><p>每个服务基于项目的业务进行拆分</p></li><li><p>拆分出来的每个服务可以独立部署</p></li><li><p>这些服务都是基于分布式管理</p><h4 id="通俗定义：微服务是一种架构，这种架构是将单个的整体应用程序分割成更小的项目关联的独立的服务。一个服务通常实现一组独立的特性或功能，包含自己的业务逻辑和适配器。各个微服务之间的关联通过暴露api来实现。这些独立的微服务不需要部署在同一个虚拟机，同一个系统和同一个应用服务器中。"><a href="#通俗定义：微服务是一种架构，这种架构是将单个的整体应用程序分割成更小的项目关联的独立的服务。一个服务通常实现一组独立的特性或功能，包含自己的业务逻辑和适配器。各个微服务之间的关联通过暴露api来实现。这些独立的微服务不需要部署在同一个虚拟机，同一个系统和同一个应用服务器中。" class="headerlink" title="通俗定义：微服务是一种架构，这种架构是将单个的整体应用程序分割成更小的项目关联的独立的服务。一个服务通常实现一组独立的特性或功能，包含自己的业务逻辑和适配器。各个微服务之间的关联通过暴露api来实现。这些独立的微服务不需要部署在同一个虚拟机，同一个系统和同一个应用服务器中。"></a>通俗定义：微服务是一种架构，这种架构是将单个的整体应用程序分割成更小的项目关联的独立的服务。一个服务通常实现一组独立的特性或功能，包含自己的业务逻辑和适配器。各个微服务之间的关联通过暴露api来实现。这些独立的微服务不需要部署在同一个虚拟机，同一个系统和同一个应用服务器中。</h4></li></ol><h2 id="2、为什么使用微服务"><a href="#2、为什么使用微服务" class="headerlink" title="2、为什么使用微服务"></a>2、为什么使用微服务</h2><h4 id="单体应用架构"><a href="#单体应用架构" class="headerlink" title="单体应用架构"></a>单体应用架构</h4><p><img src="/2021/06/11/Spring-Cloud-MicroService/1.jpg" alt="Spring-Cloud-MicroService"></p><p><img src="/2021/06/11/Spring-Cloud-MicroService/2.jpg" alt="Spring-Cloud-MicroService"></p><h5 id="1、优点"><a href="#1、优点" class="headerlink" title="1、优点"></a>1、优点</h5><h5 id="单一架构模式在项目初期很小的时候，开发方便，测试方便，部署方便，运行良好。"><a href="#单一架构模式在项目初期很小的时候，开发方便，测试方便，部署方便，运行良好。" class="headerlink" title="单一架构模式在项目初期很小的时候，开发方便，测试方便，部署方便，运行良好。"></a>单一架构模式在项目初期很小的时候，开发方便，测试方便，部署方便，运行良好。</h5><h5 id="2、缺点"><a href="#2、缺点" class="headerlink" title="2、缺点"></a>2、缺点</h5><ul><li>​    应用随时间的推进，加入的功能越来越多，最终会变得巨大，一个项目中很可能数百万行的代码，相互之间繁琐的jar包。</li><li>开发效率低，代码维护困难。</li><li>整体架构想改变或查用新的技术，新的框架或者语言，是不可能的。</li><li>任何模块的漏洞或者错误都会影像这个应用，降低系统的可能性。</li></ul><h4 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h4><h5 id="1、优点-1"><a href="#1、优点-1" class="headerlink" title="1、优点"></a>1、优点</h5><ul><li>将服务拆分成多个单一职责的小的服务，进行单独部署，服务之间通过网络进行通信</li><li>每个服务应该有自己单独的管理团队，高度自治</li><li>服务各自有自己单独的职责，服务之间松耦合，避免因一个模块的问题导致服务奔溃</li></ul><h5 id="2、缺点-1"><a href="#2、缺点-1" class="headerlink" title="2、缺点"></a>2、缺点</h5><ul><li>开发人员要处理分布式系统的复杂性</li><li>多服务运维难度，随着服务的增加，运维的压力也在增大</li><li>服务治理和服务监控 <strong>关键</strong></li></ul><h2 id="3、架构演变过程"><a href="#3、架构演变过程" class="headerlink" title="3、架构演变过程"></a>3、架构演变过程</h2><h4 id="1、单一架构-All-In-One"><a href="#1、单一架构-All-In-One" class="headerlink" title="1、单一架构  All In One"></a>1、单一架构  All In One</h4><p>所有代码都写在一起 JSP+MySQL+Tomcat</p><p>ORM: 如何解决对象关系映射</p><h4 id="2、垂直架构"><a href="#2、垂直架构" class="headerlink" title="2、垂直架构"></a>2、垂直架构</h4><p>MVC关键： 控制器关键  springmvc springboot</p><h4 id="3、分布式服务架构"><a href="#3、分布式服务架构" class="headerlink" title="3、分布式服务架构"></a>3、分布式服务架构</h4><h5 id="tomcat-集群"><a href="#tomcat-集群" class="headerlink" title="tomcat 集群"></a>tomcat 集群</h5><h5 id="mysql-集群"><a href="#mysql-集群" class="headerlink" title="mysql 集群"></a>mysql 集群</h5><h5 id="redis-集群"><a href="#redis-集群" class="headerlink" title="redis 集群"></a>redis 集群</h5><h5 id="RPC：远程过程调用-作用：服务间通信的一种手段"><a href="#RPC：远程过程调用-作用：服务间通信的一种手段" class="headerlink" title="RPC：远程过程调用  作用：服务间通信的一种手段"></a>RPC：远程过程调用  作用：服务间通信的一种手段</h5><p>RPC比http的通信速度要快</p><p>OSI七层：物理层(传输效率高)   数据链路层   网络层   传输层(RPC)   会话层   表示层   应用层(http)</p><h4 id="4、SOA-面向服务体系架构"><a href="#4、SOA-面向服务体系架构" class="headerlink" title="4、SOA 面向服务体系架构"></a>4、SOA 面向服务体系架构</h4><p><strong>服务治理和服务监控</strong></p><h2 id="4、Spring-Cloud"><a href="#4、Spring-Cloud" class="headerlink" title="4、Spring Cloud"></a>4、Spring Cloud</h2><ol><li><h4 id="Spring-Cloud-NetFlix"><a href="#Spring-Cloud-NetFlix" class="headerlink" title="Spring Cloud NetFlix"></a>Spring Cloud NetFlix</h4><p>基于美国Netflix公司开源的组件进行封装，提供了微服务一栈式解决方案</p></li><li><h4 id="Spring-Cloud-alibaba"><a href="#Spring-Cloud-alibaba" class="headerlink" title="Spring Cloud alibaba"></a>Spring Cloud alibaba</h4><p>在Spring cloud netflix基础上封装了阿里巴巴的微服务解决方案</p></li><li><h4 id="Spring-Cloud-Spring"><a href="#Spring-Cloud-Spring" class="headerlink" title="Spring Cloud Spring"></a>Spring Cloud Spring</h4><p>目前spring官方趋势正在逐渐吸收Netflix组件的精华，并在此基础进行二次封装优化，打造Spring专有的解决方案</p></li></ol><h4 id="一、什么是Spring-Cloud"><a href="#一、什么是Spring-Cloud" class="headerlink" title="一、什么是Spring Cloud"></a>一、什么是Spring Cloud</h4><p>Spring Cloud是一个涵盖多个子项目的开发工具集，集合了众多的开源框架，它利用了Spring Boot开发的便利性实现了很多功能，如服务注册、服务注册发现、负载均衡等。</p><p><strong>通俗定义</strong>：spring cloud含有众多子项目的工具集，能够快速的帮助我们构建微服务，它是微服务工具集合，帮助我们解决微服务中遇到的各种问题。</p><h4 id="二、Spring-Cloud命名和Spring-Boot版本的关系"><a href="#二、Spring-Cloud命名和Spring-Boot版本的关系" class="headerlink" title="二、Spring Cloud命名和Spring Boot版本的关系"></a>二、Spring Cloud命名和Spring Boot版本的关系</h4><p>spring cloud是一个由众多独立子项目组成的大型综合项目，原则每个子项目上有不同的发布节奏，都维护自己发布版本号，为了更好的管理spring cloud的版本，为避免与子项目的发布号混淆，所以没有采用版本号的方式，而是采用伦敦地铁站名称的命名方式，从A-Z。<strong>但目前更新到Hoxton版本之后，开始采用版本号命名的方式</strong>。如：2020.0.2</p><p>spring cloud和spring boot版本的对应关系查看官方给出的说明</p><p><strong>spring cloud parent 管理维护依赖</strong>，不写任何代码，在maven中没有依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;!--自定义properties属性--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    &lt;spring.cloud-version&gt;Hoxton.SR6&lt;/spring.cloud-version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;/properties&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;!--维护版本--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &lt;dependencies&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &lt;version&gt;$&#123;spring.cloud-version&#125;&lt;/version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &lt;type&gt;pom&lt;/type&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &lt;/dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &lt;/dependencies&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&lt;/dependencyManagement&gt;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微服务&quot;&gt;&lt;a href=&quot;#微服务&quot; class=&quot;headerlink&quot; title=&quot;微服务&quot;&gt;&lt;/a&gt;微服务&lt;/h1&gt;&lt;h3 id=&quot;1、什么是微服务&quot;&gt;&lt;a href=&quot;#1、什么是微服务&quot; class=&quot;headerlink&quot; title=&quot;1、什么是
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Security</title>
    <link href="http://yoursite.com/2021/06/11/Spring-Security/"/>
    <id>http://yoursite.com/2021/06/11/Spring-Security/</id>
    <published>2021-06-11T12:50:44.000Z</published>
    <updated>2021-06-11T12:51:52.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Security-认证、授权"><a href="#Spring-Security-认证、授权" class="headerlink" title="Spring-Security 认证、授权"></a>Spring-Security 认证、授权</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Spring Security是一款基于Spring的安全框架，主要包含认证和授权两大安全模块，和另外一款流行的安全框架Apache Shiro相比，它拥有更为强大的功能。Spring Security也可以轻松的自定义扩展以满足各种需求，并且对常见的Web安全攻击提供了防护支持。如果你的Web框架选择的是Spring，那么在安全方面Spring Security会是一个不错的选择。<br>经典的后台框架SSM：采用SpringMVC实现web层，Spring控制业务层事务，mybatis操作数据库<br>权限管理：一般指根据系统设置的安全规则或者安全策略，用户可以访问而且只能访问自己被授权的资源。如：小明被授权订单管理操作，那么他只能操作订单管理页面，小王被授权系统管理，那么他只能操作系统管理页面。<br>权限管理几乎出现在任何系统里面，前提是需要有用户和密码认证的系统。<br><strong>认证：</strong>通过用户名和密码成功登录系统后，让系统得到当前用户的角色身份<br><strong>授权：</strong>系统根据当前用户的角色，给其授予对应可以操作的权限资源</p><h3 id="完成权限管理需要的三个对象"><a href="#完成权限管理需要的三个对象" class="headerlink" title="完成权限管理需要的三个对象"></a>完成权限管理需要的三个对象</h3><p><strong>用户：</strong>主要包括用户名、密码和当前用户的角色信息，可以实现认证操作<br><strong>角色：</strong>主要包含角色名称、角色描述和当前角色拥有的权限信息，可实现授权操作<br><strong>权限：</strong>权限可以称为菜单，主要包含当前权限名称，url地址等信息，可以实现动态展示菜单</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>1、导入依赖的jar包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.springframework.security&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;spring-security-config&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;version&gt;5.1.5.RELEASE&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr></table></figure><br>2、配置web.xml中编写spring-security的核心过滤器链<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;springSecurityFilterChain名字不能变</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;filter-name&gt;springSecurityFilterChain&lt;&#x2F;filter-name&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;&#x2F;filter-class&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;filter&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;filter-mapping&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&lt;filter-name&gt;springSecurityFilterChain&lt;&#x2F;filter-name&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;filter-mapping&gt;</span></pre></td></tr></table></figure><br>3、导入约束 spring-security.xml中添加约束<br>xml中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">xmlns:security&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schem&#x2F;security&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">xsi:schemaLocation&#x3D;&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www&#x2F;springframework.org&#x2F;schem&#x2F;security</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www&#x2F;springframework.org&#x2F;schem&#x2F;security&#x2F;spring-security.xsd&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;!--配置springSecurity--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&lt;!--</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">auto-config&#x3D;&quot;true&quot; 表示自动加载springsecurity的配置文件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">use-expressions&#x3D;&quot;true&quot; 表示使用spring的el表达式来配置springsecurity</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&lt;security:http auto-config&#x3D;&quot;true&quot; use-expressions&#x3D;&quot;true&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&lt;!--拦截资源&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&lt;!--</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">pattern&#x3D;&quot;&#x2F;**&quot; 表示拦截所有资源</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">access&#x3D;&quot;hasAnyRole(&#39;ROLE_USER&#39;)&quot; 表示只有ROLE_USER角色才能访问资源</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&lt;security:intercept-url pattern&#x3D;&quot;&#x2F;**&quot; access&#x3D;&quot;hasAnyRole(&#39;ROLE_USER&#39;)&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;security:http&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&lt;!--spring 模拟虚拟用户</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">设置Spring Security认证用户信息的来源</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">spring security默认的认证必须是加密的，加上&#123;noop&#125;表示不加密认证</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&lt;security:authentication-manager&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&lt;secutiry:authentication-provider&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&lt;security:user-service&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&lt;security:user name&#x3D;&quot;user&quot; password&#x3D;&quot;(noop)user&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">authenticaties&#x3D;&quot;ROLE_USER&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&lt;security:user name&#x3D;&quot;admin&quot; password&#x3D;&quot;(noop)admin&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">authenticaties&#x3D;&quot;ROLE_ADMIN&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;security:user-service&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;security:authentication-provider&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;security:authentication-manager&gt;</span></pre></td></tr></table></figure><br><strong>启动一个web工程，只会去加载web.xml中的信息</strong>，如何将spring-security.xml被web.xml加载<br>spring web加载后，整个工程有两个IOC容器，一个父容器Spring容器，一个子容器mvc容器。web容器中子容器可以访问父容器中的配置文件/资源，父容器不可以访问子容器中的配置文件，但外部只能通过子容器进行加载<br>spring-security容器中的内容不希望暴露出去，所以加载到父容器中通过applicationContext.xml一起加载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;在applicationContext.xml中引入spring security</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;!--引入spring security的配置文件--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;import resource&#x3D;&quot;classpath:spring-security.xml&quot;&#x2F;&gt;</span></pre></td></tr></table></figure><br>启动项目访问8080/index会访问到访问页面，但出现下面的页面<br><img src="/2021/06/11/Spring-Security/1.png" alt="Spring-Security"><br>这个页面不是自己写的index.jsp页面，这是Spring Security提供的(login)。为什么呢？<br>因为在spring security配置中，会拦截所有资源包括index页面，所以只有ROLE_USER用户才能访问到index页面，但ROLE_USER角色只有在user认证过之后才提供。因为没有认证，所以spring security会自动跳转到它提供好的登录页面<br>Spring Security中加载过滤器的过程，doFilter, init, SecurityFilterChain中加载了15个过滤器链<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;配置自己的登录页面</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;security:http auto-config&#x3D;&quot;true&quot; use-expressions&#x3D;&quot;true&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;!--让认证页面可以匿名访问,permitAll表示但仍经过后续的过滤器链，因为会出现登录失败等一些情况--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;security:intercept-url pattern&#x3D;&quot;&#x2F;login.jsp&quot; access&#x3D;&quot;permitAll()&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;!--拦截资源&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;!--</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">pattern&#x3D;&quot;&#x2F;**&quot; 表示拦截所有资源</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">access&#x3D;&quot;hasAnyRole(&#39;ROLE_USER&#39;)&quot; 表示只有ROLE_USER角色才能访问资源</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&lt;security:intercept-url pattern&#x3D;&quot;&#x2F;**&quot; access&#x3D;&quot;hasAnyRole(&#39;ROLE_USER&#39;)&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&lt;!--配置认证信息--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&lt;security:form-login login-page&#x3D;&quot;&#x2F;login.jsp&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"> login-processing-url&#x3D;&quot;&#x2F;login&quot;   &#x2F;&#x2F;跟security默认的一致</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"> default-target-url&#x3D;&quot;&#x2F;index.jsp&quot;  &#x2F;&#x2F;认证成功的跳转页面</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"> authentication-failure-url&#x3D;&quot;&#x2F;failer.jsp&quot;&#x2F;&gt;  &#x2F;&#x2F;认证失败的跳转页面</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&lt;!--配置退出登录信息--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&lt;security:logout logout-url&#x3D;&quot;&#x2F;logout&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"> logout-success-url&#x3D;&quot;&#x2F;login.jsp&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;security:http&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;但由于pattern&#x3D;&quot;&#x2F;**&quot;，会拦截所有的资源，所以静态资源在自定义的界面上显示不出来，因此需要释放，让与secutiry没有关系</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&lt;!--释放静态资源--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&lt;security:http pattern&#x3D;&quot;&#x2F;css&#x2F;**&quot; security&#x3D;&quot;none&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&lt;security:http pattern&#x3D;&quot;&#x2F;img&#x2F;**&quot; security&#x3D;&quot;none&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&lt;security:http pattern&#x3D;&quot;&#x2F;plugins&#x2F;**&quot; security&#x3D;&quot;none&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;网页启动报403错误</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&lt;security:http auto-config&#x3D;&quot;true&quot; use-expressions&#x3D;&quot;true&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&lt;!--去掉csrf拦截的过滤器--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&lt;security:csrf disabled&#x3D;&quot;true&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;security:http&gt;</span></pre></td></tr></table></figure></p><h3 id="CSRF介绍"><a href="#CSRF介绍" class="headerlink" title="CSRF介绍"></a>CSRF介绍</h3><p>CSRF(Cross-site request forgery)跨站请求伪造，是一种难以防范的网络攻击方式<br><strong>CSRF攻击</strong>：如果在同一个浏览器已经开启了一个网站，并且已经登录。如果在同一个浏览器打开了另一个网络，该网站中有csrf攻击的病毒，那么该病毒会获取该浏览器中的所有cookie信息，那么就会获取已经登录网站的用户名和密码，从而登录别的网站，让网站不安全。<br>Spring Security中有CsrfFilter过滤器，该过滤器提供了csrf的防护机制<br><strong>如何开启csrf防护</strong><br>通过查看源码，增、删和改是需要csrf验证的，GET，Header等是不需要的，所有在增、删和改的时候需要获取token信息<br>login.jsp中动态添加csrf的token信息，F12从前端开发者页面中可以看到这一项值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;%@taglib uri&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;security&#x2F;tags&quot; prefix&#x3D;&quot;security&quot;%&gt;  &#x2F;&#x2F;需要倒taglib的依赖包</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">在form中添加</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;security:csrfInput&#x2F;&gt;</span></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-Security-认证、授权&quot;&gt;&lt;a href=&quot;#Spring-Security-认证、授权&quot; class=&quot;headerlink&quot; title=&quot;Spring-Security 认证、授权&quot;&gt;&lt;/a&gt;Spring-Security 认证、授权&lt;/
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot-ThreadPoolExecutor</title>
    <link href="http://yoursite.com/2021/06/11/Spring-Boot-ThreadPoolExecutor/"/>
    <id>http://yoursite.com/2021/06/11/Spring-Boot-ThreadPoolExecutor/</id>
    <published>2021-06-11T12:49:01.000Z</published>
    <updated>2021-06-11T12:49:01.297Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring-Boot-Quartz</title>
    <link href="http://yoursite.com/2021/06/11/Spring-Boot-Quartz/"/>
    <id>http://yoursite.com/2021/06/11/Spring-Boot-Quartz/</id>
    <published>2021-06-11T12:46:56.000Z</published>
    <updated>2021-06-11T12:47:57.965Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Quartz任务调度器"><a href="#Spring-Quartz任务调度器" class="headerlink" title="Spring-Quartz任务调度器"></a>Spring-Quartz任务调度器</h3><p><strong>问题：</strong> 在Quartz的Job中@Autowired一个Spring Bean的时候报空指针异常。如下例所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">public class CancelUnpaidOrderTask implements Job &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    @Autowired</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    private AppOrderService orderService;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    public void execute(JobExecutionContext ctx) throws JobExecutionException &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>Job对象的实例化过程是在Quartz中进行的，AppOrderService是在Spring容器当中的，那么如何将他们关联到一起呢？<br><strong>分析：</strong>在Spring与Quartz集成时 用到的是org.springframework.scheduling.quartz.SchedulerFactoryBean这个类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Get Scheduler instance from SchedulerFactory.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">try &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">this.scheduler &#x3D; createScheduler(schedulerFactory, this.schedulerName);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">populateSchedulerContext();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">if (!this.jobFactorySet &amp;&amp; !(this.scheduler instanceof RemoteScheduler)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Use AdaptableJobFactory as default for a local Scheduler, unless when</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; explicitly given a null value through the &quot;jobFactory&quot; bean property.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">this.jobFactory &#x3D; new AdaptableJobFactory(); &#x2F;&#x2F;重点 如果我们不指定jobFactory，那么Spring就使用AdaptableJobFactory</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">if (this.jobFactory !&#x3D; null) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">if (this.jobFactory instanceof SchedulerContextAware) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">((SchedulerContextAware) this.jobFactory).setSchedulerContext(this.scheduler.getContext());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">this.scheduler.setJobFactory(this.jobFactory);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">package org.springframework.scheduling.quartz;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Method;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">import org.quartz.Job;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">import org.quartz.Scheduler;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">import org.quartz.SchedulerException;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">import org.quartz.spi.JobFactory;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">import org.quartz.spi.TriggerFiredBundle;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">import org.springframework.util.ReflectionUtils;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">public class AdaptableJobFactory implements JobFactory &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        return newJob(bundle);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    public Job newJob(TriggerFiredBundle bundle) throws SchedulerException &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">            Object jobObject &#x3D; createJobInstance(bundle);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">            return adaptJob(jobObject);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">        catch (Exception ex) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">            throw new SchedulerException(&quot;Job instantiation failed&quot;, ex);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">    protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">        &#x2F;&#x2F; Reflectively adapting to differences between Quartz 1.x and Quartz 2.0...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">        Method getJobDetail &#x3D; bundle.getClass().getMethod(&quot;getJobDetail&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">        Object jobDetail &#x3D; ReflectionUtils.invokeMethod(getJobDetail, bundle);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">        Method getJobClass &#x3D; jobDetail.getClass().getMethod(&quot;getJobClass&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">        Class jobClass &#x3D; (Class) ReflectionUtils.invokeMethod(getJobClass, jobDetail);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">        return jobClass.newInstance(); &#x2F;&#x2F;重点创建了一个Job，写一个类继承它，然后复写这个方法进行对Job的注入</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">    protected Job adaptJob(Object jobObject) throws Exception &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">        if (jobObject instanceof Job) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">            return (Job) jobObject;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">        else if (jobObject instanceof Runnable) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">            return new DelegatingJob((Runnable) jobObject);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">        else &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;Unable to execute job class [&quot; + jobObject.getClass().getName() +</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">                    &quot;]: only [org.quartz.Job] and [java.lang.Runnable] supported.&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br><strong>解决：</strong> 1、自定义 JobFactory，2、创建完 Job 实例之后，再将 Job 注入到 Spring 容器中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;首先自定义一个 JobFactory，通过 AutowireCapableBeanFactory 将创建好的 Job 对象交给 Spring 管理</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">@Configuration</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">public class CustomJobFactory extends AdaptableJobFactory &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;这个对象Spring会帮我们自动注入进来,也属于Spring技术范畴.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    @Autowired</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    private AutowireCapableBeanFactory autowireCapableBeanFactory;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">     * Create the job instance, populating it with property values taken</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">     * from the scheduler context, job data map and trigger data map.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">     * @param bundle</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;调用父类的方法</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        Object jobInstance &#x3D; super.createJobInstance(bundle);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;进行注入,这属于Spring的技术</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        autowireCapableBeanFactory.autowireBean(jobInstance);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        return jobInstance;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;再创建一个配置类，将自定义的 JobFactory 设置到 Schedule 中</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">@Configuration</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">public class QuartzConfig &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    @Autowired</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    private CustomJobFactory customJobFactory;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    @SneakyThrows</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    @Bean</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    public Scheduler scheduler()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        SchedulerFactory schedulerFactory &#x3D; new StdSchedulerFactory();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        Scheduler scheduler &#x3D; schedulerFactory.getScheduler();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        &#x2F;&#x2F; 自定义 JobFactory 使得在 Quartz Job 中可以使用 @Autowired</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        scheduler.setJobFactory(customJobFactory);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        scheduler.start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        return scheduler;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br><strong>Cron表达式的学习</strong></p><h4 id="字段解析"><a href="#字段解析" class="headerlink" title="字段解析"></a>字段解析</h4><p>0      0      *      *      *      ？      *<br>秒     分     时      日      月     星期   年(一般省略)</p><h4 id="符号解析"><a href="#符号解析" class="headerlink" title="符号解析"></a>符号解析</h4><ul><li>*: 表示所有可能的值,如秒、分的可能值为(0-59)，时的可能值为(0-23),天月可能值为(1-31，<em>有的月没有31</em>),月的可能值(1-12),天周可能值为(MON-SAT),年的可能值(留空 2020-2099)</li><li>/ : 表示数值的增量，简单来说，比如分写上0/5表示从0分开始，每隔5分钟 0 0/5 * * * ?</li><li>? : 仅用在天(月)和天(周)，表示不指定值，当其中一个有值时，另外一个需要设为?<h4 id="字段范围解析"><a href="#字段范围解析" class="headerlink" title="字段范围解析"></a>字段范围解析</h4>1、秒：0-59 , - * /</li></ul><ol><li>26：表示第26秒</li><li>5,16,27：表示第5秒、第16秒和第27秒</li><li>1-5：表示从1秒到5秒，就是1 2 3 4 5 秒</li><li>*：表示每一秒</li><li>2/15：表示从第2秒开始，每隔15秒，就是2 17 32 47 秒<br>2、分：0-59 , - * /<br>3、时：0-23 , - * /<br>4、日：1-31 , - * / ? L W</li><li>31：表示31号（注意有的月份是没有31号的）</li><li>5,10,15：表示5号、10号和15号</li><li>8-17：表示8号到17号</li><li>*：表示所有可能的值（当指定为星号时，天（周）需指定为?）</li><li>5/9：表示从5号开始，每隔9天</li><li>？：当天（周）指定任意值的时候，天（月）需要设置为?</li><li>L：表示一个月中的最后一天</li><li>6L：表示倒数第6天</li><li>15W：W指工作日，如果15号不是周六日，则表示15号当天；如果15号是周六，则表示14号；如果15号是周日，则表示16号；如果31W是周日，则31W表示29号（周五），不会跨月</li><li>LW：指最后一个工作日<br>5、月：1-12 , - * /<br>6、星期：MON-SAT , - * / ? L C #<br>7、留空 2020-2099 , - * /<br><a href="https://www.jianshu.com/p/b4b8950fb987" target="_blank" rel="noopener">参考资料一</a><br><a href="https://haoyongliang.gitee.io/2020/12/01/%E5%B7%A5%E5%85%B7/Cron%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%A1%A8%E8%BE%BE%E5%BC%8F/#%E5%AD%97%E7%AC%A6%E5%90%AB%E4%B9%89" target="_blank" rel="noopener">参考资料二</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring-Quartz任务调度器&quot;&gt;&lt;a href=&quot;#Spring-Quartz任务调度器&quot; class=&quot;headerlink&quot; title=&quot;Spring-Quartz任务调度器&quot;&gt;&lt;/a&gt;Spring-Quartz任务调度器&lt;/h3&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
</feed>
