<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>编辑尼撑</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-28T10:35:30.823Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Qiang Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Bilinear Interpolation</title>
    <link href="http://yoursite.com/2019/12/28/Bilinear-Interpolation/"/>
    <id>http://yoursite.com/2019/12/28/Bilinear-Interpolation/</id>
    <published>2019-12-28T08:19:45.000Z</published>
    <updated>2019-12-28T10:35:30.823Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线性插值"><a href="#线性插值" class="headerlink" title="线性插值"></a><strong>线性插值</strong></h3><p>已知两点(x0, y0), (x1, y1)求x0和x1之间某一个位置x对应的y：</p><script type="math/tex; mode=display">\frac{y-y_0}{x-x_0} = \frac{y_1-y_0}{x_1-x_0}\quad =>\quad y = \frac{x_1-x}{x_1-x_0}y_0 + \frac{x-x_0}{x_1-x_0}y_1</script><h3 id="双线性插值"><a href="#双线性插值" class="headerlink" title="双线性插值"></a>双线性插值</h3><p><img src="/home/qiangchen/Pictures/BI.png" alt="Biliner Interpolation"></p><p>核心思想是在两个方向分别进行一次线性插值。</p><p>求未知函数 f 在点 P = (x, y) 的值，假设我们已知函数 f 在 Q11 = (x1, y1)、Q12 = (x1, y2), Q21 = (x2, y1) 以及 Q22 = (x2, y2) 四个点的值。f可以是一个像素点的像素值。首先在 x 方向进行线性插值：</p><script type="math/tex; mode=display">f(R_1)\approx \frac{x_2-x}{x_2-x_1}f(Q_{11}) + \frac{x-x_1}{x_2-x_1}f(Q_{21})\quad where R_1 = (x, y_1)</script><script type="math/tex; mode=display">f(R_2)\approx \frac{x_2-x}{x_2-x_1}f(Q_{12}) + \frac{x-x_1}{x_2-x_1}f(Q_{22})\quad where R_2 = (x, y_2)</script><p>然后在y方向进行线性插值：</p><script type="math/tex; mode=display">f(P)\approx \frac{y_2-y}{y_2-y_1}f(R_{1}) + \frac{y-y_1}{y_2-y_1}f(R_{2})\quad 将f(R_1)和f(R_2)带进来</script><p>两个技巧：</p><p>一、提高插值时对像素的充分利用</p><p>二、加快计算速度(以整数代替，使用位移&gt;&gt;实现)</p><p>下面的code参考自<a href="https://blog.csdn.net/random_repick/article/details/76165851" target="_blank" rel="noopener">C++双线性插值</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">void bilinear(cv::Mat src, cv::Mat dst)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    double scale_x &#x3D; (double)(src.cols &#x2F; dst.cols)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    double scale_y &#x3D; (double)(src.rows &#x2F; dst.rows)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    for(int i &#x3D; 0; i &lt; row; ++i) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        &#x2F;&#x2F;以ptr的方式访问dst的数据 修改p极为修改dst（指针）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        uchar *p &#x3D; dst.ptr&lt;uchar&gt;(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        &#x2F;&#x2F;使两个图像的几何中心重合，采样更合理</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        &#x2F;&#x2F;将dst的坐标点映射会src</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        float y &#x3D; (i + 0.5) * scale_y - 0.5;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#x2F;&#x2F;int下取整，相当于y值左上角的整数坐标</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        int fy &#x3D; (int)y;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#x2F;&#x2F;y为坐标的小数部分</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        y -&#x3D; fy;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        fy &#x3D; std::min(fy, src.rows - 2);  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    fy &#x3D; std::max(0, fy); </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        &#x2F;&#x2F;以整数计算速度更快</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        short y1 &#x3D; (1.f - y)*2048;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        short y2 &#x3D; 2048 - y1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        for(int j &#x3D; 0; j &lt; col; ++j) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            &#x2F;&#x2F;trick</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            float x &#x3D; (j + 0.5) * scale_x - 0.5;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            int fx &#x3D; (int)x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            x -&#x3D; fx;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            if (fx &lt; 0)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            x &#x3D; 0, fx &#x3D; 0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            if (fx &gt;&#x3D; src.cols -1) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            x &#x3D; 0, fx &#x3D; src.cols -2;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">            &#x2F;&#x2F;trick</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">            short x1 &#x3D; (1.f - x) * 2048;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            short x2 &#x3D; 2048 - x1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            &#x2F;&#x2F;结果右移22位抵消2048的平方</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">            int pos &#x3D; i * dst.rows + j</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">            p[pos] &#x3D; (src.at&lt;uchar&gt;(fx,fy)*x1*y1 + src.at&lt;uchar&gt;                                        (fx+1,fy)*x2*y1+src.at&lt;uchar&gt;(fx,fy+1)*x1*y2 +                                            src.at&lt;uchar&gt;(fx+1,fy+1)*x2*y2) &gt;&gt; 22;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;线性插值&quot;&gt;&lt;a href=&quot;#线性插值&quot; class=&quot;headerlink&quot; title=&quot;线性插值&quot;&gt;&lt;/a&gt;&lt;strong&gt;线性插值&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;已知两点(x0, y0), (x1, y1)求x0和x1之间某一个位置x对应的y：&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="图像处理" scheme="http://yoursite.com/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="图像插值" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%83%8F%E6%8F%92%E5%80%BC/"/>
    
      <category term="Bilinear Interpolation" scheme="http://yoursite.com/tags/Bilinear-Interpolation/"/>
    
  </entry>
  
  <entry>
    <title>GBDT</title>
    <link href="http://yoursite.com/2019/12/22/GBDT-1/"/>
    <id>http://yoursite.com/2019/12/22/GBDT-1/</id>
    <published>2019-12-22T05:33:38.000Z</published>
    <updated>2019-12-28T09:50:23.659Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="GBDT-Gradient-Boosting-Decision-Tree-的优点"><a href="#GBDT-Gradient-Boosting-Decision-Tree-的优点" class="headerlink" title="GBDT(Gradient Boosting Decision Tree)的优点"></a>GBDT(Gradient Boosting Decision Tree)的优点</h4><ol><li>既可以用于分类，也可以用于回归</li><li>可以进行特征筛选（采用树结构）</li><li>实验效果不错<h4 id="GBDT训练过程"><a href="#GBDT训练过程" class="headerlink" title="GBDT训练过程"></a>GBDT训练过程</h4><img src="/home/qiangchen/Pictures/GBDT.png" alt="GBDT"><h5 id="gbdt通过多轮迭代产生多个足够简单的弱分类器-低方差、高偏差-，将每轮训练得到的弱分类器加权求和得到最终的分类器，并且不断的减小每轮训练过程产生的残差以实现对目标的分类或回归。"><a href="#gbdt通过多轮迭代产生多个足够简单的弱分类器-低方差、高偏差-，将每轮训练得到的弱分类器加权求和得到最终的分类器，并且不断的减小每轮训练过程产生的残差以实现对目标的分类或回归。" class="headerlink" title="gbdt通过多轮迭代产生多个足够简单的弱分类器(低方差、高偏差)，将每轮训练得到的弱分类器加权求和得到最终的分类器，并且不断的减小每轮训练过程产生的残差以实现对目标的分类或回归。"></a>gbdt通过多轮迭代产生多个足够简单的弱分类器(低方差、高偏差)，将每轮训练得到的弱分类器加权求和得到最终的分类器，并且不断的减小每轮训练过程产生的残差以实现对目标的分类或回归。</h5><strong>上图是针对单个分类，如果多分类的话（K），同时训练k个CART树，k个树相互独立，单个树的训练过程一样</strong><br><strong>对于CART树生成的过程，重点关注那个特征最合适，这个特征对应的最优特征值切分点是多少</strong><h6 id="通过对每个特征的每个特征值，计算损失值，选取其中最小分量的特征作为树的节点，最小分量对应的特征值作为最佳切分点"><a href="#通过对每个特征的每个特征值，计算损失值，选取其中最小分量的特征作为树的节点，最小分量对应的特征值作为最佳切分点" class="headerlink" title="通过对每个特征的每个特征值，计算损失值，选取其中最小分量的特征作为树的节点，最小分量对应的特征值作为最佳切分点"></a>通过对每个特征的每个特征值，计算损失值，选取其中最小分量的特征作为树的节点，最小分量对应的特征值作为最佳切分点</h6><h5 id="弱分类器一般选择分类回归树-必须符合CART模型；弱分类器的参数一般经过经验风险极小化来确定；损失函数-目标函数-有平方损失函数、0-1损失函数、对数损失函数等。"><a href="#弱分类器一般选择分类回归树-必须符合CART模型；弱分类器的参数一般经过经验风险极小化来确定；损失函数-目标函数-有平方损失函数、0-1损失函数、对数损失函数等。" class="headerlink" title="弱分类器一般选择分类回归树,必须符合CART模型；弱分类器的参数一般经过经验风险极小化来确定；损失函数(目标函数)有平方损失函数、0-1损失函数、对数损失函数等。"></a>弱分类器一般选择<em>分类回归树</em>,必须符合CART模型；弱分类器的参数一般经过经验风险极小化来确定；损失函数(目标函数)有平方损失函数、0-1损失函数、对数损失函数等。</h5></li></ol><hr><h3 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h3><hr><ol><li>假设有M个特征，从中选择一个特征j作为二叉树的第一个节点</li><li>对特征j选择一个切分点m，例如，小于m为一类，大于m为一类</li><li>依次迭代，直到特征划分完为止<br><strong>这里面的关键是如何选取最优特征和该特征对应的最优切分点。这也是之后的改进算法出现的一个切入点</strong><h3 id="如何使GBDT对数据具有非线性的拟合能力"><a href="#如何使GBDT对数据具有非线性的拟合能力" class="headerlink" title="如何使GBDT对数据具有非线性的拟合能力"></a>如何使GBDT对数据具有非线性的拟合能力</h3></li><li>CTR预估中，工业届一般使用逻辑回归，但其本身适合处理线性可分的数据</li><li>为了让逻辑回归能够处理非线性数据，可以通过组合不同的特征</li><li>传统的人工特征组合的方式，不仅耗费人力和时间，实验效果也不是很好。因此，希望通过算法自动、高效的寻找有效的特征组合，以提升模型的效果<br><strong>2014年，Facebook提出利用gbdt去产生有效的特征组合，使用GBDT生成两棵树，通过输入X得到最终的叶子节点作为新的特征与原始特征结合，然后输入逻辑回归进行训练，得到了显著的效果提升</strong></li></ol><hr><h2 id="gt-Practical-Lessons-from-Predicting-Clicks-on-Ads-at-Facebook"><a href="#gt-Practical-Lessons-from-Predicting-Clicks-on-Ads-at-Facebook" class="headerlink" title="&gt; Practical Lessons from Predicting Clicks on Ads at Facebook"></a>&gt; Practical Lessons from Predicting Clicks on Ads at Facebook</h2><h4 id="细节请参考"><a href="#细节请参考" class="headerlink" title="细节请参考"></a>细节请参考</h4><p><a href="https://www.cnblogs.com/always-fight/p/9400346.html" target="_blank" rel="noopener">Blog-GBDT</a><br><a href="https://www.jianshu.com/p/405f233ed04b" target="_blank" rel="noopener">JianShu</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;h4 id=&quot;GBDT-Gradient-Boosting-Decision-Tree-的优点&quot;&gt;&lt;a href=&quot;#GBDT-Gradient
      
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="GBDT" scheme="http://yoursite.com/tags/GBDT/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/30/hello-world/"/>
    <id>http://yoursite.com/2019/11/30/hello-world/</id>
    <published>2019-11-29T16:42:58.198Z</published>
    <updated>2019-11-29T16:42:58.198Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
