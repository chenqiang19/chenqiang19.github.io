<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>编辑尼撑</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-04-03T12:51:40.438Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Qiang Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2021/06/11/hello-world/"/>
    <id>http://yoursite.com/2021/06/11/hello-world/</id>
    <published>2021-06-11T13:59:21.101Z</published>
    <updated>2021-04-03T12:51:40.438Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-location-source-gt-post-directory"><a href="#Create-a-new-post-location-source-gt-post-directory" class="headerlink" title="Create a new post, location: source-&gt;_post directory"></a>Create a new post, location: source-&gt;_post directory</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure><h3 id="Create-a-new-draft-location-source-gt-drafts-directory"><a href="#Create-a-new-draft-location-source-gt-drafts-directory" class="headerlink" title="Create a new draft, location: source-&gt;_drafts directory"></a>Create a new draft, location: source-&gt;_drafts directory</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new  draft <span class="string">"My New Draft"</span></span></pre></td></tr></table></figure><h3 id="Preview-a-new-draft-shut-down-old-server"><a href="#Preview-a-new-draft-shut-down-old-server" class="headerlink" title="Preview a new draft (shut down old server)"></a>Preview a new draft (shut down old server)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo server --draft</span></pre></td></tr></table></figure><h3 id="publish-a-new-draft-shut-down-old-server"><a href="#publish-a-new-draft-shut-down-old-server" class="headerlink" title="publish a new draft (shut down old server)"></a>publish a new draft (shut down old server)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo publish <span class="string">"My New draft"</span></span></pre></td></tr></table></figure><h3 id="Create-a-new-normal-location-source-gt-c-directory"><a href="#Create-a-new-normal-location-source-gt-c-directory" class="headerlink" title="Create a new normal, location: source-&gt;c directory"></a>Create a new normal, location: source-&gt;c directory</h3><h4 id="normal-is-not-blog-page-it-likes-about-or-contact-us-page"><a href="#normal-is-not-blog-page-it-likes-about-or-contact-us-page" class="headerlink" title="normal is not blog page, it likes about or contact us page."></a>normal is not blog page, it likes about or contact us page.</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">"My new Normal"</span></span></pre></td></tr></table></figure><h3 id="Preview-a-new-normal"><a href="#Preview-a-new-normal" class="headerlink" title="Preview a new normal"></a>Preview a new normal</h3><p><a href="http://localhost:4000/c/" target="_blank" rel="noopener">http://localhost:4000/c/</a></p><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Clean-cache"><a href="#Clean-cache" class="headerlink" title="Clean cache"></a>Clean cache</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo clean</span></pre></td></tr></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>If you want to show Chinese, you must make sure md is saved with utf-8</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Image-Process-Zero</title>
    <link href="http://yoursite.com/2021/06/11/Image-Process-Zero/"/>
    <id>http://yoursite.com/2021/06/11/Image-Process-Zero/</id>
    <published>2021-06-11T13:58:13.000Z</published>
    <updated>2021-06-12T00:49:10.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像处理学习"><a href="#图像处理学习" class="headerlink" title="图像处理学习"></a>图像处理学习</h2><h4 id="参考的网上链接：Image-Processing"><a href="#参考的网上链接：Image-Processing" class="headerlink" title="参考的网上链接：Image Processing"></a>参考的网上链接：<a href="https://github.com/gzr2017/ImageProcessing100Wen/tree/master" target="_blank" rel="noopener">Image Processing</a></h4><h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h4><h5 id="一、图像通道的处理"><a href="#一、图像通道的处理" class="headerlink" title="一、图像通道的处理"></a>一、图像通道的处理</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#cv2.imread()读取的是图像是按照BGR的顺序排列的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#所以BGR转RGB，需要读取每个通道，在按照R、G、B的顺序赋值进去</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> cv2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;img = cv2.imread(<span class="string">"imori.jpg"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;red = img[:,:,<span class="number">2</span>].copy() <span class="comment">#列表拷贝赋值函数，进行备份复制列表</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过print(id(red))和print(id(img[:,:,2]))可以看到id是不一样的，说明存储位置发生了变化，起到了保护原始数据的作用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;print(img)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">[[[ <span class="number">65</span> <span class="number">134</span> <span class="number">107</span>]   <span class="comment">#[ 65 134 107]这是一个像素的BGR值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">65</span> <span class="number">134</span> <span class="number">107</span>]   <span class="comment">#第二个像素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">65</span> <span class="number">134</span> <span class="number">107</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  ..., </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">33</span>  <span class="number">90</span>  <span class="number">69</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">33</span>  <span class="number">90</span>  <span class="number">69</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">31</span>  <span class="number">90</span>  <span class="number">69</span>]]   <span class="comment">#图像中第一行的最后一个像素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"> [[ <span class="number">64</span> <span class="number">133</span> <span class="number">106</span>]    <span class="comment">#图像中第二行的第一个像素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">64</span> <span class="number">133</span> <span class="number">106</span>]    <span class="comment">#以此类推</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">64</span> <span class="number">133</span> <span class="number">106</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  ...,             <span class="comment">#这里的...,并不表示说什么，不是分层的意思</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">17</span>  <span class="number">55</span>  <span class="number">59</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">19</span>  <span class="number">57</span>  <span class="number">61</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  [ <span class="number">20</span>  <span class="number">58</span>  <span class="number">62</span>]]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Save result</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">cv2.imwrite(<span class="string">"out.jpg"</span>, img)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">cv2.imshow(<span class="string">"result"</span>, img)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">cv2.waitKey(<span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">cv2.destroyAllWindows()</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Channel swap</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">channel_swap</span><span class="params">(cv::Mat img)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get height and width</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output, 注意height和width的顺序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC3); </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// each y, x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// R -&gt; B</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">0</span>] = img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">2</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// B -&gt; R</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">2</span>] = img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// G -&gt; G</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">1</span>] = img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">1</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;Vec3f&gt; 浮点</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;Vec3d&gt; double</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;Vec3b&gt; 8U类型的RGB彩色图像(0-255),可以看作是vector&lt;uchar,3&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于在OpenCV中，使用imread读取到的Mat图像数据，都是用uchar类型的数据存储，对于RGB三通道的图像，每个点的数据都是一个Vec3b类型的数据。可以使用at定位到每一个像素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//单通道：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//img.at&lt;uchar&gt;(x,y) = 25;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//多通道：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//img.at&lt;cv::Vec3b&gt;(x,y)[0] = 25; //B</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//img.at&lt;cv::Vec3b&gt;(x,y)[1] = 25; //G</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//img.at&lt;cv::Vec3b&gt;(x,y)[2] = 25; //R</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// read image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">  cv::Mat img = cv::imread(<span class="string">"imori.jpg"</span>, cv::IMREAD_COLOR);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// channel swap</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = channel_swap(img);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">  cv::imwrite(<span class="string">"out.jpg"</span>, out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">  cv::imshow(<span class="string">"sample"</span>, out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">  cv::waitKey(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">  cv::destroyAllWindows();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h5 id="二、图像的灰度化"><a href="#二、图像的灰度化" class="headerlink" title="二、图像的灰度化"></a>二、图像的灰度化</h5><p>灰度是一种图像亮度的表示方法，是单通道的图像，通过下式计算：</p><script type="math/tex; mode=display">Y = 0.2126\cdot R+0.7152\cdot G + 0.0722\cdot B</script><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BGR2GRAY</span><span class="params">(img)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">r = img[:,:,<span class="number">2</span>].copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">g = img[:,:,<span class="number">0</span>].copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">b = img[:,:,<span class="number">1</span>].copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">gray = <span class="number">0.2126</span> * r + <span class="number">0.7152</span> * g + <span class="number">0.0722</span> * b</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> gray.astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">"imori.jpg"</span>).astype(np.float) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># astype 转换数组的数据类型，dtype 用于说明一个数组数据类型的对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Grayscale</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">out = BGR2GRAY(img)</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">BRG2GRAY</span><span class="params">(cv::Mat img)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    cv::Mat output = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// each y, x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// BGR -&gt; Gray</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        output.at&lt;uchar&gt;(y, x) = <span class="number">0.2126</span> * (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">2</span>] \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">          + <span class="number">0.7152</span> * (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">1</span>] \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">          + <span class="number">0.0722</span> * (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// read image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  cv::Mat img = cv::imread(<span class="string">"imori.jpg"</span>, cv::IMREAD_COLOR);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//IMREAD_UNCHANGED-&gt;指定用图片的原来格式打开，即以不改变图片的方式打开，图片是彩色就是彩色，图片是灰度图像就是灰度图像</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//IMREAD_GRAYSCALE-&gt;指定用灰度图像的方式打开图片，即将原始图像转化为灰度图像再打开</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//IMREAD_COLOR-&gt;指定用彩色图像打开图片</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// BGR -&gt; Gray</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = BGR2GRAY(img);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//cv::imwrite("out.jpg", out);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  cv::imshow(<span class="string">"sample"</span>, out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  cv::waitKey(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">  cv::destroyAllWindows();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h5 id="三、图像的二值化"><a href="#三、图像的二值化" class="headerlink" title="三、图像的二值化"></a>三、图像的二值化</h5><p>二值化：将图像使用黑和白两种颜色表示的方法。</p><script type="math/tex; mode=display">y=\begin{cases}0,\quad (if \quad y <128) \\255, \quad else\end{cases}</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">def binarization(img, th&#x3D;128):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    img[img &lt; th] &#x3D; 0</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    img[img &gt;&#x3D; th] &#x3D; 255</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    return img</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gray -&gt; Binary</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">Binarize</span><span class="params">(cv::Mat gray, <span class="keyword">int</span> th)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = gray.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = gray.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// each y, x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// Binarize</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (gray.at&lt;uchar&gt;(y, x) &gt; th)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        out.at&lt;uchar&gt;(y, x) = <span class="number">255</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        out.at&lt;uchar&gt;(y, x) = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h5 id="四、大津二值化算法-Otsu"><a href="#四、大津二值化算法-Otsu" class="headerlink" title="四、大津二值化算法(Otsu)"></a>四、大津二值化算法(Otsu)</h5><p>最大类间方差法，是一种可以自动确定二值化中阈值的算法。</p><p>令{0,1,2,…,L-1}表示一副大小为<em>M x N</em>像素的数字图像中的<em>L</em>个不同的灰度级，n<sub>i</sub> 表示灰度级为<em>i</em>的像素数。</p><p>图像中的像素总数为：</p><script type="math/tex; mode=display">N=n_0+n_1+...+n_L-1</script><p>像素的灰度级为 <em>i</em> 的概率为：</p><script type="math/tex; mode=display">p_i = n_i / N, \quad p_i\geq 0, \quad \displaystyle \sum^{L}_{i = 1}{p_i = 1}.\quad \quad (1)</script><p>现在假设通过一个灰度级为k的阈值将这些像素点划分为两类C<sub>0</sub>(目标)和C<sub>1</sub>(背景)，C<sub>0</sub>表示灰度级为[1,…,k]的像素点，C<sub>1</sub>表示灰度级为[k+1,…,L]的像素点。</p><p>像素被分类到C<sub>0</sub>和C<sub>1</sub>中的概率为：</p><script type="math/tex; mode=display">w_0=P_r(C_0)=\sum^{k}_{i=1}{p_i}=w(k) \quad \quad (2)</script><script type="math/tex; mode=display">w_1=P_r(C_1)=\sum^{L}_{i=k+1}{p_i}=1-w(k) \quad \quad (3)</script><p>各类的平均灰度级为：</p><script type="math/tex; mode=display">\mu_0 = \sum^{k}_{i=1}{iP_r(i|C_0)} = \sum^{k}_{i=1}{\frac{iPr(C_0|i)p(i)}{P_r(C_0)}}= \sum^{k}_{i=1}{ip_i/w_0}=\mu(k)/w(k), \quad P_r(C_0|i)=1 \quad (i=i...k)\quad \quad (4)</script><script type="math/tex; mode=display">\mu_1 = \sum^{L}_{i=k+1}{iP_r(i|C_1)} = \sum^{L}_{i=k+1}{\frac{iPr(C_1|i)p(i)}{P_r(C_1)}}= \sum^{L}_{i=k+1}{ip_i/w_1}=\frac{\mu_T-\mu(k)}{1-w(k)} \quad \quad (5)</script><p>其中，</p><script type="math/tex; mode=display">w(k)=\sum^{k}_{i=1}{p_i}\quad \quad (6) ,\quad \mu(k)=\sum^{k}_{i=1}{ip_i}\quad \quad (7)</script><p>上面分别为灰度级从1到k的累积出现的概率和平均灰度级(一阶累计距)。</p><script type="math/tex; mode=display">\mu_T=\mu(L)=\sum^{L}_{i=1}{ip_i}\quad \quad (8)</script><p>上式是整幅图像的平均灰度级。可以看出，对于任意选定的k, 都有：</p><script type="math/tex; mode=display">w_0\mu_0+w_1\mu_1=\mu_T,\quad w_0+w_1=1.\quad \quad (9)</script><p>这两类的类内方差由下面的公式给出：(二阶累积距)</p><script type="math/tex; mode=display">\sigma_0^2=\sum^{k}_{i=1}{(i-\mu_0)^2P_r(i|C_0)}=\sum^{k}_{i=1}{(i-\mu_0)^2p_i/w_0}.\quad \quad (10)</script><script type="math/tex; mode=display">\sigma_1^2=\sum^{L}_{i=k+1}{(i-\mu_1)^2P_r(i|C_1)}=\sum^{L}_{i=k+1}{(i-\mu_1)^2p_i/w_1}.\quad \quad (11)</script><p>为了评价灰度级k这个阈值或门限的”好坏”的程度，我们需要引入判别式分析中使用的判别式标准来测量：</p><script type="math/tex; mode=display">\lambda=\sigma_B^2/\sigma_W^2, \quad K=\sigma_T^2/\sigma_W^2, \quad \eta=\sigma_B^2/\sigma_T^2\quad \quad (12)</script><p>其中：</p><script type="math/tex; mode=display">\sigma_W^2=w_0\sigma_0^2+w_1\sigma_1^2\quad \quad (13)</script><script type="math/tex; mode=display">\sigma_B^2=w_0(\mu_o-\mu_T)^2+w_1(\mu_1-\mu_T)^2=w_0w_1(\mu_1-\mu_0)^2\quad \quad (14)</script><p>根据式(9)，可以得出：</p><script type="math/tex; mode=display">\sigma_T^2=\sum^{L}_{i=1}{(i-\mu_T)^2p_i} ，是一个常数\quad \quad (15)</script><p>式13是类内方差，式14是类间方差，式15是灰度级的总方差。此时的目标即便为一个优化问题，即寻找一个门限k使(12)式中给出的一个目标函数取最大值。</p><p>上面给出的判别式标准是分别求取λ、κ和η的最大值。</p><script type="math/tex; mode=display">\sigma_W^2+\sigma_B^2=\sigma_T^2. \quad \sigma_W^2和\sigma_B^2是门限k的函数</script><script type="math/tex; mode=display">\eta(k)=\sigma_B^2(k)/\sigma_T^2.\quad \sigma_B^2基于一阶统计(类均值)，比\sigma_W^2基于二阶统计(类方差)简单。</script><script type="math/tex; mode=display">\sigma_B^2(k)=\frac{[\mu_Tw(k)-\mu(k)]^2}{w(k)[1-w(k)]}</script><p>最佳门限k<sup>*</sup> 为：</p><script type="math/tex; mode=display">\sigma_B^2(k^*)=arg\,\max_{1\leq k\leq L} \sigma_B^2(k)</script><p>根据公式6和7，依次选择不同的k值顺序搜索，寻找最佳门限k<sup>*</sup> 使得n取最大值。</p><p>证明类间方差：</p><script type="math/tex; mode=display">\sigma^2=w_1(\mu_1-\mu)^2+w_2(\mu_2-\mu), \quad \quad \begin{cases}w_1+w_2=1 \\w_1\mu_1+w_2\mu_2=\mu\end{cases}</script><script type="math/tex; mode=display">\sigma^2=w_1(\mu_1^2-2\mu_1\mu+\mu^2)+w_2(\mu_2^2-2\mu_2\mu+\mu^2)</script><script type="math/tex; mode=display">\sigma^2=w_1\mu_1^2-2w_1\mu_1\mu+w_1\mu^2+w_2\mu_2^2-2w_2\mu_2\mu+w_2\mu^2</script><script type="math/tex; mode=display">\sigma^2=w_1\mu_1^2+w_2\mu_2^2-2(w_1\mu_1+w_2\mu_2)\mu+(w_1+w_2)\mu^2</script><script type="math/tex; mode=display">\sigma^2=w_1\mu_1^2+w_2\mu_2^2-2(w_1\mu_1+w_2\mu_2)\mu+\mu^2=w_1\mu_1^2+w_2\mu_2^2-\mu^2</script><script type="math/tex; mode=display">\sigma^2=w_1\mu_1^2+w_2\mu_2^2-(w_1\mu_1+w_2\mu_2)^2</script><script type="math/tex; mode=display">\sigma^2=w_1\mu_1^2+w_2\mu_2^2-(w_1\mu_1)^2-2w_1\mu_1w_2\mu_2-(w_2\mu_2)^2</script><script type="math/tex; mode=display">\sigma^2=w_1w_2(\frac{1}{w_2}\mu_1^2+\frac{1}{w_1}\mu_2^2-\frac{w_1}{w_2}\mu_1^2-2\mu_1\mu_2-\frac{w_2}{w_1}\mu_2^2)</script><script type="math/tex; mode=display">\sigma^2=(\mu_1^2-w\mu_1\mu_2+\mu_2^2)=w_1w_2(\mu_1-\mu_2)^2</script><p> 大津算法的步骤：</p><ol><li><p>先转化为灰度图，计算输入图像的归一化直方图</p></li><li><p>计算像素被分配到各个类别的概率</p></li><li><p>计算各类的平均灰度值</p></li><li><p>计算全局灰度均值</p></li><li><p>计算类间方差</p></li><li><p>遍历各个灰度级，得到类间方差最大的k值。如果最大值不唯一，则取平均值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">import cv2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">import numpy as np</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"># Gray scale</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">def BGR2GRAY(img):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">b &#x3D; img[:,:,0].copy() </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">g &#x3D; img[:,:,1].copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">r &#x3D; img[:,:,2].copy()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">out &#x3D; 0.2126 * r + 0.7152 * g + 0.0722 * b</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">out &#x3D; out.astype(np.uint8)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">return out</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"># Otsu Binarization</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">def otus_binarization(img, th&#x3D;128):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"> max_sigma &#x3D; 0 </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"> max_th &#x3D; 0</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"> for _t in range(1, 255):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"> pix0 &#x3D; img[np.where(img &lt; _t)]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"> m0 &#x3D; np.mean(pix0) if len(pixs) &gt; 0 else 0.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"> w0 &#x3D; len(pix0) &#x2F; (H * W)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"> pix1 &#x3D; img[np.where(img &lt; _t)]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"> m1 &#x3D; np.mean(pix1) if len(pix1) &gt; 0 else 0.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"> w1 &#x3D; len(pix1) &#x2F; (H * W)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"> sigma &#x3D; w0 * w1 * ((m0 - m1) ** 2)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"> if sigma &gt; max_sigma:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"> max_sigma &#x3D; sigma</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"> max_th &#x3D; _t</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"> th &#x3D; max_th</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"> img[img &lt; th] &#x3D; 0</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"> img[out &gt;&#x3D; th] &#x3D; 255</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"> return img</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"># Read image</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">img &#x3D; cv2.imread(&quot;imori.jpg&quot;).astype(np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">H, W, C &#x3D;img.shape</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"># Grayscale</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">out &#x3D; BGR2GRAY(img)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"># Otsu&#39;s binarization</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">out &#x3D; otsu_binarization(out)</span></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// BGR -&gt; Gray</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">BGR2GRAY</span><span class="params">(cv::Mat img)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// get height and width</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = img.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = img.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// each y, x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// BGR -&gt; Gray</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      out.at&lt;uchar&gt;(y, x) = <span class="number">0.2126</span> * (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">2</span>] \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        + <span class="number">0.7152</span> * (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">1</span>] \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        + <span class="number">0.0722</span> * (<span class="keyword">float</span>)img.at&lt;cv::Vec3b&gt;(y, x)[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gray -&gt; Binary</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">Binarize_Otsu</span><span class="params">(cv::Mat gray)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span> = gray.cols;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">height</span> = gray.rows;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// determine threshold</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> w0 = <span class="number">0</span>, w1 = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> m0 = <span class="number">0</span>, m1 = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">double</span> max_sb = <span class="number">0</span>, sb = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> th = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Get threshold</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">255</span>; t++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">    w0 = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">    w1 = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">    m0 = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    m1 = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">        val = (<span class="keyword">int</span>)(gray.at&lt;uchar&gt;(y, x));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (val &lt; t)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">                w0++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">                m0 += val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">                w1++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">                m1 += val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">    m0 /= w0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">    m1 /= w1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">    w0 /= (<span class="built_in">height</span> * <span class="built_in">width</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">    w1 /= (<span class="built_in">height</span> * <span class="built_in">width</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">    sb = w0 * w1 * <span class="built_in">pow</span>((m0 - m1), <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span>(sb &gt; max_sb)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">      max_sb = sb;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">      th = t;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"threshold:"</span> &lt;&lt; th &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// prepare output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = cv::Mat::zeros(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// each y, x</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="built_in">height</span>; y++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">width</span>; x++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// Binarize</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (gray.at&lt;uchar&gt;(y, x) &gt; th)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">        out.at&lt;uchar&gt;(y, x) = <span class="number">255</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">        out.at&lt;uchar&gt;(y, x) = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> out;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// read image</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line">  cv::Mat img = cv::imread(<span class="string">"imori.jpg"</span>, cv::IMREAD_COLOR);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// BGR -&gt; Gray</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">98</span></pre></td><td class="code"><pre><span class="line">  cv::Mat gray = BGR2GRAY(img);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">99</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">100</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Gray -&gt; Binary</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">101</span></pre></td><td class="code"><pre><span class="line">  cv::Mat out = Binarize_Otsu(gray);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">102</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">103</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//cv::imwrite("out.jpg", out);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">104</span></pre></td><td class="code"><pre><span class="line">  cv::imshow(<span class="string">"sample"</span>, out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">105</span></pre></td><td class="code"><pre><span class="line">  cv::waitKey(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">106</span></pre></td><td class="code"><pre><span class="line">  cv::destroyAllWindows();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">107</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">108</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">109</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h5 id="五、HSV变换"><a href="#五、HSV变换" class="headerlink" title="五、HSV变换"></a>五、HSV变换</h5><p>HSV即使用色相(Hue)、饱和度(Saturation)、明度(Value)来表示色彩的一种方式。</p><p>色相：将颜色使用0&deg;到360&deg;表示，就是平常所说的颜色名称，如红色、蓝色。色相与数值按下表</p><p>对应。</p><p>| 红 | 黄 | 绿 | 青 | 蓝 | 品红 | 红 |<br>| :——: | :——-: | :———: | :———: | :———: | :———: | :———: |<br>| 0&deg; | 60&deg; | 120&deg; | 180&deg; | 240&deg; | 300&deg; | 360&deg; |</p><p>饱和度：是指色彩的纯度，饱和度越低则颜色越暗淡(0 &lt;=S &lt; 1)</p><p>明度：即颜色的明暗程度。数值越高越接近白色，数值越低越接近黑色(0&lt;=V&lt;1)</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图像处理学习&quot;&gt;&lt;a href=&quot;#图像处理学习&quot; class=&quot;headerlink&quot; title=&quot;图像处理学习&quot;&gt;&lt;/a&gt;图像处理学习&lt;/h2&gt;&lt;h4 id=&quot;参考的网上链接：Image-Processing&quot;&gt;&lt;a href=&quot;#参考的网上链接：Image
      
    
    </summary>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/categories/Image-Processing/"/>
    
    
      <category term="Image Processing" scheme="http://yoursite.com/tags/Image-Processing/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-MicroService</title>
    <link href="http://yoursite.com/2021/06/11/Spring-Cloud-MicroService/"/>
    <id>http://yoursite.com/2021/06/11/Spring-Cloud-MicroService/</id>
    <published>2021-06-11T13:24:18.000Z</published>
    <updated>2021-06-11T13:34:07.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><h3 id="1、什么是微服务"><a href="#1、什么是微服务" class="headerlink" title="1、什么是微服务"></a>1、什么是微服务</h3><h4 id="集群-cluster-：同一种软件服务的多个服务节点共同为系统提供服务过程"><a href="#集群-cluster-：同一种软件服务的多个服务节点共同为系统提供服务过程" class="headerlink" title="集群(cluster)：同一种软件服务的多个服务节点共同为系统提供服务过程"></a>集群(cluster)：同一种软件服务的多个服务节点共同为系统提供服务过程</h4><h4 id="分布式-distribute-：不同软件集群共同为一个系统提供服务"><a href="#分布式-distribute-：不同软件集群共同为一个系统提供服务" class="headerlink" title="分布式(distribute)：不同软件集群共同为一个系统提供服务"></a>分布式(distribute)：不同软件集群共同为一个系统提供服务</h4><h4 id="微服务：一种新的架构，特点如下："><a href="#微服务：一种新的架构，特点如下：" class="headerlink" title="微服务：一种新的架构，特点如下："></a>微服务：一种新的架构，特点如下：</h4><ol><li><p>基于原来单个应用开发出一系列微小服务</p></li><li><p>每个服务运行在自己计算机进程里面，每个服务都是一个Spring Boot应用</p></li><li><p>每个服务基于项目的业务进行拆分</p></li><li><p>拆分出来的每个服务可以独立部署</p></li><li><p>这些服务都是基于分布式管理</p><h4 id="通俗定义：微服务是一种架构，这种架构是将单个的整体应用程序分割成更小的项目关联的独立的服务。一个服务通常实现一组独立的特性或功能，包含自己的业务逻辑和适配器。各个微服务之间的关联通过暴露api来实现。这些独立的微服务不需要部署在同一个虚拟机，同一个系统和同一个应用服务器中。"><a href="#通俗定义：微服务是一种架构，这种架构是将单个的整体应用程序分割成更小的项目关联的独立的服务。一个服务通常实现一组独立的特性或功能，包含自己的业务逻辑和适配器。各个微服务之间的关联通过暴露api来实现。这些独立的微服务不需要部署在同一个虚拟机，同一个系统和同一个应用服务器中。" class="headerlink" title="通俗定义：微服务是一种架构，这种架构是将单个的整体应用程序分割成更小的项目关联的独立的服务。一个服务通常实现一组独立的特性或功能，包含自己的业务逻辑和适配器。各个微服务之间的关联通过暴露api来实现。这些独立的微服务不需要部署在同一个虚拟机，同一个系统和同一个应用服务器中。"></a>通俗定义：微服务是一种架构，这种架构是将单个的整体应用程序分割成更小的项目关联的独立的服务。一个服务通常实现一组独立的特性或功能，包含自己的业务逻辑和适配器。各个微服务之间的关联通过暴露api来实现。这些独立的微服务不需要部署在同一个虚拟机，同一个系统和同一个应用服务器中。</h4></li></ol><h2 id="2、为什么使用微服务"><a href="#2、为什么使用微服务" class="headerlink" title="2、为什么使用微服务"></a>2、为什么使用微服务</h2><h4 id="单体应用架构"><a href="#单体应用架构" class="headerlink" title="单体应用架构"></a>单体应用架构</h4><p><img src="/2021/06/11/Spring-Cloud-MicroService/1.jpg" alt="Spring-Cloud-MicroService"></p><p><img src="/2021/06/11/Spring-Cloud-MicroService/2.jpg" alt="Spring-Cloud-MicroService"></p><h5 id="1、优点"><a href="#1、优点" class="headerlink" title="1、优点"></a>1、优点</h5><h5 id="单一架构模式在项目初期很小的时候，开发方便，测试方便，部署方便，运行良好。"><a href="#单一架构模式在项目初期很小的时候，开发方便，测试方便，部署方便，运行良好。" class="headerlink" title="单一架构模式在项目初期很小的时候，开发方便，测试方便，部署方便，运行良好。"></a>单一架构模式在项目初期很小的时候，开发方便，测试方便，部署方便，运行良好。</h5><h5 id="2、缺点"><a href="#2、缺点" class="headerlink" title="2、缺点"></a>2、缺点</h5><ul><li>​    应用随时间的推进，加入的功能越来越多，最终会变得巨大，一个项目中很可能数百万行的代码，相互之间繁琐的jar包。</li><li>开发效率低，代码维护困难。</li><li>整体架构想改变或查用新的技术，新的框架或者语言，是不可能的。</li><li>任何模块的漏洞或者错误都会影像这个应用，降低系统的可能性。</li></ul><h4 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h4><h5 id="1、优点-1"><a href="#1、优点-1" class="headerlink" title="1、优点"></a>1、优点</h5><ul><li>将服务拆分成多个单一职责的小的服务，进行单独部署，服务之间通过网络进行通信</li><li>每个服务应该有自己单独的管理团队，高度自治</li><li>服务各自有自己单独的职责，服务之间松耦合，避免因一个模块的问题导致服务奔溃</li></ul><h5 id="2、缺点-1"><a href="#2、缺点-1" class="headerlink" title="2、缺点"></a>2、缺点</h5><ul><li>开发人员要处理分布式系统的复杂性</li><li>多服务运维难度，随着服务的增加，运维的压力也在增大</li><li>服务治理和服务监控 <strong>关键</strong></li></ul><h2 id="3、架构演变过程"><a href="#3、架构演变过程" class="headerlink" title="3、架构演变过程"></a>3、架构演变过程</h2><h4 id="1、单一架构-All-In-One"><a href="#1、单一架构-All-In-One" class="headerlink" title="1、单一架构  All In One"></a>1、单一架构  All In One</h4><p>所有代码都写在一起 JSP+MySQL+Tomcat</p><p>ORM: 如何解决对象关系映射</p><h4 id="2、垂直架构"><a href="#2、垂直架构" class="headerlink" title="2、垂直架构"></a>2、垂直架构</h4><p>MVC关键： 控制器关键  springmvc springboot</p><h4 id="3、分布式服务架构"><a href="#3、分布式服务架构" class="headerlink" title="3、分布式服务架构"></a>3、分布式服务架构</h4><h5 id="tomcat-集群"><a href="#tomcat-集群" class="headerlink" title="tomcat 集群"></a>tomcat 集群</h5><h5 id="mysql-集群"><a href="#mysql-集群" class="headerlink" title="mysql 集群"></a>mysql 集群</h5><h5 id="redis-集群"><a href="#redis-集群" class="headerlink" title="redis 集群"></a>redis 集群</h5><h5 id="RPC：远程过程调用-作用：服务间通信的一种手段"><a href="#RPC：远程过程调用-作用：服务间通信的一种手段" class="headerlink" title="RPC：远程过程调用  作用：服务间通信的一种手段"></a>RPC：远程过程调用  作用：服务间通信的一种手段</h5><p>RPC比http的通信速度要快</p><p>OSI七层：物理层(传输效率高)   数据链路层   网络层   传输层(RPC)   会话层   表示层   应用层(http)</p><h4 id="4、SOA-面向服务体系架构"><a href="#4、SOA-面向服务体系架构" class="headerlink" title="4、SOA 面向服务体系架构"></a>4、SOA 面向服务体系架构</h4><p><strong>服务治理和服务监控</strong></p><h2 id="4、Spring-Cloud"><a href="#4、Spring-Cloud" class="headerlink" title="4、Spring Cloud"></a>4、Spring Cloud</h2><ol><li><h4 id="Spring-Cloud-NetFlix"><a href="#Spring-Cloud-NetFlix" class="headerlink" title="Spring Cloud NetFlix"></a>Spring Cloud NetFlix</h4><p>基于美国Netflix公司开源的组件进行封装，提供了微服务一栈式解决方案</p></li><li><h4 id="Spring-Cloud-alibaba"><a href="#Spring-Cloud-alibaba" class="headerlink" title="Spring Cloud alibaba"></a>Spring Cloud alibaba</h4><p>在Spring cloud netflix基础上封装了阿里巴巴的微服务解决方案</p></li><li><h4 id="Spring-Cloud-Spring"><a href="#Spring-Cloud-Spring" class="headerlink" title="Spring Cloud Spring"></a>Spring Cloud Spring</h4><p>目前spring官方趋势正在逐渐吸收Netflix组件的精华，并在此基础进行二次封装优化，打造Spring专有的解决方案</p></li></ol><h4 id="一、什么是Spring-Cloud"><a href="#一、什么是Spring-Cloud" class="headerlink" title="一、什么是Spring Cloud"></a>一、什么是Spring Cloud</h4><p>Spring Cloud是一个涵盖多个子项目的开发工具集，集合了众多的开源框架，它利用了Spring Boot开发的便利性实现了很多功能，如服务注册、服务注册发现、负载均衡等。</p><p><strong>通俗定义</strong>：spring cloud含有众多子项目的工具集，能够快速的帮助我们构建微服务，它是微服务工具集合，帮助我们解决微服务中遇到的各种问题。</p><h4 id="二、Spring-Cloud命名和Spring-Boot版本的关系"><a href="#二、Spring-Cloud命名和Spring-Boot版本的关系" class="headerlink" title="二、Spring Cloud命名和Spring Boot版本的关系"></a>二、Spring Cloud命名和Spring Boot版本的关系</h4><p>spring cloud是一个由众多独立子项目组成的大型综合项目，原则每个子项目上有不同的发布节奏，都维护自己发布版本号，为了更好的管理spring cloud的版本，为避免与子项目的发布号混淆，所以没有采用版本号的方式，而是采用伦敦地铁站名称的命名方式，从A-Z。<strong>但目前更新到Hoxton版本之后，开始采用版本号命名的方式</strong>。如：2020.0.2</p><p>spring cloud和spring boot版本的对应关系查看官方给出的说明</p><p><strong>spring cloud parent 管理维护依赖</strong>，不写任何代码，在maven中没有依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;!--自定义properties属性--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    &lt;spring.cloud-version&gt;Hoxton.SR6&lt;/spring.cloud-version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;/properties&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;!--维护版本--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &lt;dependencies&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &lt;version&gt;$&#123;spring.cloud-version&#125;&lt;/version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &lt;type&gt;pom&lt;/type&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &lt;/dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &lt;/dependencies&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&lt;/dependencyManagement&gt;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微服务&quot;&gt;&lt;a href=&quot;#微服务&quot; class=&quot;headerlink&quot; title=&quot;微服务&quot;&gt;&lt;/a&gt;微服务&lt;/h1&gt;&lt;h3 id=&quot;1、什么是微服务&quot;&gt;&lt;a href=&quot;#1、什么是微服务&quot; class=&quot;headerlink&quot; title=&quot;1、什么是
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Security</title>
    <link href="http://yoursite.com/2021/06/11/Spring-Security/"/>
    <id>http://yoursite.com/2021/06/11/Spring-Security/</id>
    <published>2021-06-11T12:50:44.000Z</published>
    <updated>2021-06-11T12:51:52.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Security-认证、授权"><a href="#Spring-Security-认证、授权" class="headerlink" title="Spring-Security 认证、授权"></a>Spring-Security 认证、授权</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Spring Security是一款基于Spring的安全框架，主要包含认证和授权两大安全模块，和另外一款流行的安全框架Apache Shiro相比，它拥有更为强大的功能。Spring Security也可以轻松的自定义扩展以满足各种需求，并且对常见的Web安全攻击提供了防护支持。如果你的Web框架选择的是Spring，那么在安全方面Spring Security会是一个不错的选择。<br>经典的后台框架SSM：采用SpringMVC实现web层，Spring控制业务层事务，mybatis操作数据库<br>权限管理：一般指根据系统设置的安全规则或者安全策略，用户可以访问而且只能访问自己被授权的资源。如：小明被授权订单管理操作，那么他只能操作订单管理页面，小王被授权系统管理，那么他只能操作系统管理页面。<br>权限管理几乎出现在任何系统里面，前提是需要有用户和密码认证的系统。<br><strong>认证：</strong>通过用户名和密码成功登录系统后，让系统得到当前用户的角色身份<br><strong>授权：</strong>系统根据当前用户的角色，给其授予对应可以操作的权限资源</p><h3 id="完成权限管理需要的三个对象"><a href="#完成权限管理需要的三个对象" class="headerlink" title="完成权限管理需要的三个对象"></a>完成权限管理需要的三个对象</h3><p><strong>用户：</strong>主要包括用户名、密码和当前用户的角色信息，可以实现认证操作<br><strong>角色：</strong>主要包含角色名称、角色描述和当前角色拥有的权限信息，可实现授权操作<br><strong>权限：</strong>权限可以称为菜单，主要包含当前权限名称，url地址等信息，可以实现动态展示菜单</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>1、导入依赖的jar包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.springframework.security&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;spring-security-config&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;version&gt;5.1.5.RELEASE&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr></table></figure><br>2、配置web.xml中编写spring-security的核心过滤器链<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;springSecurityFilterChain名字不能变</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;filter-name&gt;springSecurityFilterChain&lt;&#x2F;filter-name&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;&#x2F;filter-class&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;filter&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;filter-mapping&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&lt;filter-name&gt;springSecurityFilterChain&lt;&#x2F;filter-name&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;filter-mapping&gt;</span></pre></td></tr></table></figure><br>3、导入约束 spring-security.xml中添加约束<br>xml中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">xmlns:security&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schem&#x2F;security&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">xsi:schemaLocation&#x3D;&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www&#x2F;springframework.org&#x2F;schem&#x2F;security</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www&#x2F;springframework.org&#x2F;schem&#x2F;security&#x2F;spring-security.xsd&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;!--配置springSecurity--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&lt;!--</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">auto-config&#x3D;&quot;true&quot; 表示自动加载springsecurity的配置文件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">use-expressions&#x3D;&quot;true&quot; 表示使用spring的el表达式来配置springsecurity</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&lt;security:http auto-config&#x3D;&quot;true&quot; use-expressions&#x3D;&quot;true&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&lt;!--拦截资源&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&lt;!--</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">pattern&#x3D;&quot;&#x2F;**&quot; 表示拦截所有资源</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">access&#x3D;&quot;hasAnyRole(&#39;ROLE_USER&#39;)&quot; 表示只有ROLE_USER角色才能访问资源</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&lt;security:intercept-url pattern&#x3D;&quot;&#x2F;**&quot; access&#x3D;&quot;hasAnyRole(&#39;ROLE_USER&#39;)&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;security:http&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&lt;!--spring 模拟虚拟用户</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">设置Spring Security认证用户信息的来源</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">spring security默认的认证必须是加密的，加上&#123;noop&#125;表示不加密认证</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&lt;security:authentication-manager&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&lt;secutiry:authentication-provider&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&lt;security:user-service&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&lt;security:user name&#x3D;&quot;user&quot; password&#x3D;&quot;(noop)user&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">authenticaties&#x3D;&quot;ROLE_USER&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&lt;security:user name&#x3D;&quot;admin&quot; password&#x3D;&quot;(noop)admin&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">authenticaties&#x3D;&quot;ROLE_ADMIN&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;security:user-service&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;security:authentication-provider&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;security:authentication-manager&gt;</span></pre></td></tr></table></figure><br><strong>启动一个web工程，只会去加载web.xml中的信息</strong>，如何将spring-security.xml被web.xml加载<br>spring web加载后，整个工程有两个IOC容器，一个父容器Spring容器，一个子容器mvc容器。web容器中子容器可以访问父容器中的配置文件/资源，父容器不可以访问子容器中的配置文件，但外部只能通过子容器进行加载<br>spring-security容器中的内容不希望暴露出去，所以加载到父容器中通过applicationContext.xml一起加载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;在applicationContext.xml中引入spring security</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;!--引入spring security的配置文件--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;import resource&#x3D;&quot;classpath:spring-security.xml&quot;&#x2F;&gt;</span></pre></td></tr></table></figure><br>启动项目访问8080/index会访问到访问页面，但出现下面的页面<br><img src="/2021/06/11/Spring-Security/1.png" alt="Spring-Security"><br>这个页面不是自己写的index.jsp页面，这是Spring Security提供的(login)。为什么呢？<br>因为在spring security配置中，会拦截所有资源包括index页面，所以只有ROLE_USER用户才能访问到index页面，但ROLE_USER角色只有在user认证过之后才提供。因为没有认证，所以spring security会自动跳转到它提供好的登录页面<br>Spring Security中加载过滤器的过程，doFilter, init, SecurityFilterChain中加载了15个过滤器链<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;配置自己的登录页面</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;security:http auto-config&#x3D;&quot;true&quot; use-expressions&#x3D;&quot;true&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;!--让认证页面可以匿名访问,permitAll表示但仍经过后续的过滤器链，因为会出现登录失败等一些情况--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;security:intercept-url pattern&#x3D;&quot;&#x2F;login.jsp&quot; access&#x3D;&quot;permitAll()&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;!--拦截资源&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;!--</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">pattern&#x3D;&quot;&#x2F;**&quot; 表示拦截所有资源</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">access&#x3D;&quot;hasAnyRole(&#39;ROLE_USER&#39;)&quot; 表示只有ROLE_USER角色才能访问资源</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&lt;security:intercept-url pattern&#x3D;&quot;&#x2F;**&quot; access&#x3D;&quot;hasAnyRole(&#39;ROLE_USER&#39;)&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&lt;!--配置认证信息--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&lt;security:form-login login-page&#x3D;&quot;&#x2F;login.jsp&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"> login-processing-url&#x3D;&quot;&#x2F;login&quot;   &#x2F;&#x2F;跟security默认的一致</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"> default-target-url&#x3D;&quot;&#x2F;index.jsp&quot;  &#x2F;&#x2F;认证成功的跳转页面</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"> authentication-failure-url&#x3D;&quot;&#x2F;failer.jsp&quot;&#x2F;&gt;  &#x2F;&#x2F;认证失败的跳转页面</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&lt;!--配置退出登录信息--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&lt;security:logout logout-url&#x3D;&quot;&#x2F;logout&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"> logout-success-url&#x3D;&quot;&#x2F;login.jsp&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;security:http&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;但由于pattern&#x3D;&quot;&#x2F;**&quot;，会拦截所有的资源，所以静态资源在自定义的界面上显示不出来，因此需要释放，让与secutiry没有关系</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&lt;!--释放静态资源--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&lt;security:http pattern&#x3D;&quot;&#x2F;css&#x2F;**&quot; security&#x3D;&quot;none&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&lt;security:http pattern&#x3D;&quot;&#x2F;img&#x2F;**&quot; security&#x3D;&quot;none&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&lt;security:http pattern&#x3D;&quot;&#x2F;plugins&#x2F;**&quot; security&#x3D;&quot;none&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;网页启动报403错误</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&lt;security:http auto-config&#x3D;&quot;true&quot; use-expressions&#x3D;&quot;true&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&lt;!--去掉csrf拦截的过滤器--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&lt;security:csrf disabled&#x3D;&quot;true&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;security:http&gt;</span></pre></td></tr></table></figure></p><h3 id="CSRF介绍"><a href="#CSRF介绍" class="headerlink" title="CSRF介绍"></a>CSRF介绍</h3><p>CSRF(Cross-site request forgery)跨站请求伪造，是一种难以防范的网络攻击方式<br><strong>CSRF攻击</strong>：如果在同一个浏览器已经开启了一个网站，并且已经登录。如果在同一个浏览器打开了另一个网络，该网站中有csrf攻击的病毒，那么该病毒会获取该浏览器中的所有cookie信息，那么就会获取已经登录网站的用户名和密码，从而登录别的网站，让网站不安全。<br>Spring Security中有CsrfFilter过滤器，该过滤器提供了csrf的防护机制<br><strong>如何开启csrf防护</strong><br>通过查看源码，增、删和改是需要csrf验证的，GET，Header等是不需要的，所有在增、删和改的时候需要获取token信息<br>login.jsp中动态添加csrf的token信息，F12从前端开发者页面中可以看到这一项值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;%@taglib uri&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;security&#x2F;tags&quot; prefix&#x3D;&quot;security&quot;%&gt;  &#x2F;&#x2F;需要倒taglib的依赖包</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">在form中添加</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;security:csrfInput&#x2F;&gt;</span></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-Security-认证、授权&quot;&gt;&lt;a href=&quot;#Spring-Security-认证、授权&quot; class=&quot;headerlink&quot; title=&quot;Spring-Security 认证、授权&quot;&gt;&lt;/a&gt;Spring-Security 认证、授权&lt;/
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot-ThreadPoolExecutor</title>
    <link href="http://yoursite.com/2021/06/11/Spring-Boot-ThreadPoolExecutor/"/>
    <id>http://yoursite.com/2021/06/11/Spring-Boot-ThreadPoolExecutor/</id>
    <published>2021-06-11T12:49:01.000Z</published>
    <updated>2021-06-11T12:49:01.297Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring-Boot-Quartz</title>
    <link href="http://yoursite.com/2021/06/11/Spring-Boot-Quartz/"/>
    <id>http://yoursite.com/2021/06/11/Spring-Boot-Quartz/</id>
    <published>2021-06-11T12:46:56.000Z</published>
    <updated>2021-06-11T12:47:57.965Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Quartz任务调度器"><a href="#Spring-Quartz任务调度器" class="headerlink" title="Spring-Quartz任务调度器"></a>Spring-Quartz任务调度器</h3><p><strong>问题：</strong> 在Quartz的Job中@Autowired一个Spring Bean的时候报空指针异常。如下例所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">public class CancelUnpaidOrderTask implements Job &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    @Autowired</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    private AppOrderService orderService;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    public void execute(JobExecutionContext ctx) throws JobExecutionException &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>Job对象的实例化过程是在Quartz中进行的，AppOrderService是在Spring容器当中的，那么如何将他们关联到一起呢？<br><strong>分析：</strong>在Spring与Quartz集成时 用到的是org.springframework.scheduling.quartz.SchedulerFactoryBean这个类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Get Scheduler instance from SchedulerFactory.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">try &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">this.scheduler &#x3D; createScheduler(schedulerFactory, this.schedulerName);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">populateSchedulerContext();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">if (!this.jobFactorySet &amp;&amp; !(this.scheduler instanceof RemoteScheduler)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Use AdaptableJobFactory as default for a local Scheduler, unless when</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; explicitly given a null value through the &quot;jobFactory&quot; bean property.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">this.jobFactory &#x3D; new AdaptableJobFactory(); &#x2F;&#x2F;重点 如果我们不指定jobFactory，那么Spring就使用AdaptableJobFactory</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">if (this.jobFactory !&#x3D; null) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">if (this.jobFactory instanceof SchedulerContextAware) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">((SchedulerContextAware) this.jobFactory).setSchedulerContext(this.scheduler.getContext());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">this.scheduler.setJobFactory(this.jobFactory);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">package org.springframework.scheduling.quartz;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Method;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">import org.quartz.Job;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">import org.quartz.Scheduler;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">import org.quartz.SchedulerException;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">import org.quartz.spi.JobFactory;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">import org.quartz.spi.TriggerFiredBundle;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">import org.springframework.util.ReflectionUtils;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">public class AdaptableJobFactory implements JobFactory &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        return newJob(bundle);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    public Job newJob(TriggerFiredBundle bundle) throws SchedulerException &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">            Object jobObject &#x3D; createJobInstance(bundle);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">            return adaptJob(jobObject);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">        catch (Exception ex) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">            throw new SchedulerException(&quot;Job instantiation failed&quot;, ex);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">    protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">        &#x2F;&#x2F; Reflectively adapting to differences between Quartz 1.x and Quartz 2.0...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">        Method getJobDetail &#x3D; bundle.getClass().getMethod(&quot;getJobDetail&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">        Object jobDetail &#x3D; ReflectionUtils.invokeMethod(getJobDetail, bundle);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">        Method getJobClass &#x3D; jobDetail.getClass().getMethod(&quot;getJobClass&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">        Class jobClass &#x3D; (Class) ReflectionUtils.invokeMethod(getJobClass, jobDetail);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">        return jobClass.newInstance(); &#x2F;&#x2F;重点创建了一个Job，写一个类继承它，然后复写这个方法进行对Job的注入</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">    protected Job adaptJob(Object jobObject) throws Exception &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">        if (jobObject instanceof Job) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">            return (Job) jobObject;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">        else if (jobObject instanceof Runnable) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">            return new DelegatingJob((Runnable) jobObject);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">        else &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;Unable to execute job class [&quot; + jobObject.getClass().getName() +</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">                    &quot;]: only [org.quartz.Job] and [java.lang.Runnable] supported.&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br><strong>解决：</strong> 1、自定义 JobFactory，2、创建完 Job 实例之后，再将 Job 注入到 Spring 容器中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;首先自定义一个 JobFactory，通过 AutowireCapableBeanFactory 将创建好的 Job 对象交给 Spring 管理</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">@Configuration</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">public class CustomJobFactory extends AdaptableJobFactory &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;这个对象Spring会帮我们自动注入进来,也属于Spring技术范畴.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    @Autowired</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    private AutowireCapableBeanFactory autowireCapableBeanFactory;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">     * Create the job instance, populating it with property values taken</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">     * from the scheduler context, job data map and trigger data map.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">     * @param bundle</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;调用父类的方法</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        Object jobInstance &#x3D; super.createJobInstance(bundle);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;进行注入,这属于Spring的技术</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        autowireCapableBeanFactory.autowireBean(jobInstance);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        return jobInstance;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;再创建一个配置类，将自定义的 JobFactory 设置到 Schedule 中</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">@Configuration</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">public class QuartzConfig &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    @Autowired</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    private CustomJobFactory customJobFactory;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    @SneakyThrows</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    @Bean</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    public Scheduler scheduler()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        SchedulerFactory schedulerFactory &#x3D; new StdSchedulerFactory();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        Scheduler scheduler &#x3D; schedulerFactory.getScheduler();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        &#x2F;&#x2F; 自定义 JobFactory 使得在 Quartz Job 中可以使用 @Autowired</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        scheduler.setJobFactory(customJobFactory);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        scheduler.start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        return scheduler;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br><strong>Cron表达式的学习</strong></p><h4 id="字段解析"><a href="#字段解析" class="headerlink" title="字段解析"></a>字段解析</h4><p>0      0      *      *      *      ？      *<br>秒     分     时      日      月     星期   年(一般省略)</p><h4 id="符号解析"><a href="#符号解析" class="headerlink" title="符号解析"></a>符号解析</h4><ul><li>*: 表示所有可能的值,如秒、分的可能值为(0-59)，时的可能值为(0-23),天月可能值为(1-31，<em>有的月没有31</em>),月的可能值(1-12),天周可能值为(MON-SAT),年的可能值(留空 2020-2099)</li><li>/ : 表示数值的增量，简单来说，比如分写上0/5表示从0分开始，每隔5分钟 0 0/5 * * * ?</li><li>? : 仅用在天(月)和天(周)，表示不指定值，当其中一个有值时，另外一个需要设为?<h4 id="字段范围解析"><a href="#字段范围解析" class="headerlink" title="字段范围解析"></a>字段范围解析</h4>1、秒：0-59 , - * /</li></ul><ol><li>26：表示第26秒</li><li>5,16,27：表示第5秒、第16秒和第27秒</li><li>1-5：表示从1秒到5秒，就是1 2 3 4 5 秒</li><li>*：表示每一秒</li><li>2/15：表示从第2秒开始，每隔15秒，就是2 17 32 47 秒<br>2、分：0-59 , - * /<br>3、时：0-23 , - * /<br>4、日：1-31 , - * / ? L W</li><li>31：表示31号（注意有的月份是没有31号的）</li><li>5,10,15：表示5号、10号和15号</li><li>8-17：表示8号到17号</li><li>*：表示所有可能的值（当指定为星号时，天（周）需指定为?）</li><li>5/9：表示从5号开始，每隔9天</li><li>？：当天（周）指定任意值的时候，天（月）需要设置为?</li><li>L：表示一个月中的最后一天</li><li>6L：表示倒数第6天</li><li>15W：W指工作日，如果15号不是周六日，则表示15号当天；如果15号是周六，则表示14号；如果15号是周日，则表示16号；如果31W是周日，则31W表示29号（周五），不会跨月</li><li>LW：指最后一个工作日<br>5、月：1-12 , - * /<br>6、星期：MON-SAT , - * / ? L C #<br>7、留空 2020-2099 , - * /<br><a href="https://www.jianshu.com/p/b4b8950fb987" target="_blank" rel="noopener">参考资料一</a><br><a href="https://haoyongliang.gitee.io/2020/12/01/%E5%B7%A5%E5%85%B7/Cron%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%A1%A8%E8%BE%BE%E5%BC%8F/#%E5%AD%97%E7%AC%A6%E5%90%AB%E4%B9%89" target="_blank" rel="noopener">参考资料二</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring-Quartz任务调度器&quot;&gt;&lt;a href=&quot;#Spring-Quartz任务调度器&quot; class=&quot;headerlink&quot; title=&quot;Spring-Quartz任务调度器&quot;&gt;&lt;/a&gt;Spring-Quartz任务调度器&lt;/h3&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot-Problem-Two</title>
    <link href="http://yoursite.com/2021/06/11/Spring-Boot-Problem-Two/"/>
    <id>http://yoursite.com/2021/06/11/Spring-Boot-Problem-Two/</id>
    <published>2021-06-11T12:39:29.000Z</published>
    <updated>2021-06-11T13:40:24.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Boot-Problem-Two"><a href="#Spring-Boot-Problem-Two" class="headerlink" title="Spring-Boot-Problem-Two"></a>Spring-Boot-Problem-Two</h2><p><strong>问题1：</strong> 自定义exception异常:{} org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.ict.cloud.openstack.resource.mapper.OpenstackResourceMapper.insert<br><img src="/2021/06/11/Spring-Boot-Problem-Two/1.png" alt="Spring-Boot-Problem-Two"><br><strong>解决：</strong> 修改配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;修改前</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  mapper-locations: classpath:&#x2F;mapper&#x2F;*Mapper.xml</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  type-aliases-package: com.chuancey.common.entity</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;修改后</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  mapper-locations: classpath*:&#x2F;mapper&#x2F;*Mapper.xml</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  type-aliases-package: com.chuancey.common.entity</span></pre></td></tr></table></figure><br><strong>问题2：</strong>mapper找不到报错：Field xxxMapper in xxx required a bean of type ‘xxxMapper’ that could not be found<br>微服务中在别的模块中定义有service和mapper模块，但是要在别的模块中加载，所以提示找不到Mapper对应的目标<br><strong>原因：</strong>因为启动类扫描不到对应的Mapper文件，因此需要将Mapper文件对应的路径加载到启动类中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">@MapperScan(basePackages &#x3D; &#123;&quot;com.ict.cloud.quartz&quot;,&quot;com.ict.cloud.openstack.resource.mapper&quot;&#125;)</span></pre></td></tr></table></figure><br>注意：这里别的文件尽量指定到mapper这一层目录下面；另外检查pom中设置的依赖选项，一般在mybatis依赖中已经添加了下面两个依赖类，不需要在单独添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">org.mybatis:mybatis</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">org.mybatis:mybatis-spring</span></pre></td></tr></table></figure><br><strong>问题3：</strong>在Application.getBean()的时候，代码跟进去一个类注册了两个Bean，导致编译报下图的错<br><img src="/2021/06/11/Spring-Boot-Problem-Two/2.png" alt="Spring-Boot-Problem-Two"><br><strong>原因：</strong>由于上面问题2在加载别的mapper的时候，使用了@MapperScan,需要将本地的报也一起扫描进去。但是扫描的时候没有定位到mapper目录，导致将service目录中的包也一起扫描了进去<br><strong>解决：</strong>方法如下图<br><img src="/2021/06/11/Spring-Boot-Problem-Two/3.png" alt="Spring-Boot-Problem-Two"><br><strong>问题4：</strong>Caused by: org.apache.ibatis.binding.BindingException: Invalid bound statement (not found):这个问题可能与问题1<em>有关</em><br><img src="/2021/06/11/Spring-Boot-Problem-Two/4.png" alt="Spring-Boot-Problem-Two"><br>这里mapper.xml中的namespace对应的是mapper文件接口对应的位置，而不是xml所在的package位置<br>注意：mapper-locations指定的xml的位置可以写多个，type-aliases-package是数据接口所对应的位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mybatis:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  mapper-locations: classpath:mybatis&#x2F;*,classpath*:&#x2F;mybatis&#x2F;*.xml</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  type-aliases-package: com.ict.cloud.quartz.domain</span></pre></td></tr></table></figure><br><strong>问题5：</strong> openfeign提示找不到Api<br><img src="/2021/06/11/Spring-Boot-Problem-Two/5.png" alt="Spring-Boot-Problem-Two"><br><strong>原因：</strong>因为目前使用的是微服务，所以一个模块为了使用另一个模块，就需要在启动类中能够扫描到别的类的一些Bean，然后注入到容器中。一般问题有两个，一个是启动类的位置不对，另一个是扫描路径不对<br><strong>解决：</strong> 1、添加@ComponentScan、@MapperScan，2、将启动类往前移一层，个人推荐这种方式)<br><img src="/2021/06/11/Spring-Boot-Problem-Two/6.png" alt="Spring-Boot-Problem-Two"><br>如上图，之前启动类是放在了quartz目录的里面，这样的话，配置之类的很麻烦，直接将启动类放到com.ict.cloud目录则直接可以扫描到其他服务的@service和@mapper，这样更加方便<br><strong>关于找不到OpenFeign接口的问题：</strong>是因为@EnableFeignClients//(basePackageClasses = PhysicalServerInstanceApi.class)在@EnableFeignClients开启OpenFeign的时候，指定了一个服务的名称，这样别的服务是找不到的，注释掉这个路径就可以了<br><strong>问题6：</strong> Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.ict.cloud.quartz.BaseResultMap<br><img src="/2021/06/11/Spring-Boot-Problem-Two/7.png" alt="Spring-Boot-Problem-Two"><br><strong>原因：</strong>下面所示，mapper-locations定位的模块mapper路径被导入了两次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mybatis:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  mapper-locations: classpath:mybatis&#x2F;*,classpath*:&#x2F;mybatis&#x2F;*.xml</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  type-aliases-package: com.ict.cloud.quartz.domain</span></pre></td></tr></table></figure><br><strong>解决：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mybatis:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  mapper-locations: classpath*:&#x2F;mybatis&#x2F;*.xml</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  type-aliases-package: com.ict.cloud.quartz.domain</span></pre></td></tr></table></figure><br><strong>问题7：</strong>java.lang.RuntimeException: CronExpression ‘0 0/5 <em> </em> <em> ? ‘is invalid<br>明明是对的，为什么会报cron is invalid,因为字符串后面多了一个空格   —这个地方<br><em>*解决：</em></em>可以使用在线的cron生成器<br><img src="/2021/06/11/Spring-Boot-Problem-Two/8.png" alt="Spring-Boot-Problem-Two"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-Boot-Problem-Two&quot;&gt;&lt;a href=&quot;#Spring-Boot-Problem-Two&quot; class=&quot;headerlink&quot; title=&quot;Spring-Boot-Problem-Two&quot;&gt;&lt;/a&gt;Spring-Boot-Probl
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Cloud-Problem</title>
    <link href="http://yoursite.com/2021/05/21/Spring-Cloud-Problem/"/>
    <id>http://yoursite.com/2021/05/21/Spring-Cloud-Problem/</id>
    <published>2021-05-21T14:31:18.000Z</published>
    <updated>2021-05-21T14:48:16.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Cloud-Problem-Summary"><a href="#Spring-Cloud-Problem-Summary" class="headerlink" title="Spring Cloud Problem Summary"></a>Spring Cloud Problem Summary</h2><p><strong>问题1：</strong>org.apache.logging.log4j.LoggingException: log4j-slf4j-impl cannot be present with log4j-to-slf4j<br><img src="/2021/05/21/Spring-Cloud-Problem/1.png" alt="Problem Summary"><br>springcloud项目本身需要spring-boot-starter-web包，自带了spring-boot-starter-log4j2包，然后自己又引入了spring-boot-starter-log4j2包，最后发现是spring-boot-starter冲突了。<br><img src="/2021/05/21/Spring-Cloud-Problem/2.png" alt="Problem Summary"><br><strong>解决</strong> 添加下面的依赖，然后reimport<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">      &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      &lt;exclusions&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">          &lt;exclusion&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">              &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">              &lt;artifactId&gt;spring-boot-starter-logging&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">          &lt;&#x2F;exclusion&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      &lt;&#x2F;exclusions&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&lt;exclusions&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&lt;exclusion&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;spring-boot-starter-logging&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;exclusion&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;exclusions&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr></table></figure><br><strong>扩展：</strong>IDEA旗舰版和社区版还是有些差别，所以需要在社区版中setting-&gt;plugin中安装一些插件方便查看依赖冲突等问题，如maven-helper<br><strong>问题2：</strong>springboot security莫名其妙的登录界面Please sign in<br><img src="/2021/05/21/Spring-Cloud-Problem/3.png" alt="Problem Summary"><br><strong>解决</strong> security默认给我们整的一个用户认证的功能，用户名是：user，密码是在启动的控制台打印出来的：<br><img src="/2021/05/21/Spring-Cloud-Problem/4.png" alt="Problem Summary"><br><strong>扩展：</strong>需要自己添加适配器<br><strong>问题3：</strong>was not registered for synchronization because synchronization is not active. JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@418d1c03] will not be managed by Spring<br><img src="/2021/05/21/Spring-Cloud-Problem/5.png" alt="Problem Summary"><br><strong>解决</strong> 1、首先查看对应的POJO映射实体与数据表中的关系是否一致，如表中为非NULL的字段，但被插入时设置为NULL等；2、在对应的数据库语句上未添加事务管理的字段@Transactional<br>针对第二种情况可以添加@Transactional(rollbackFor = Exception.class)，实现异常回滚，避免线程或程序退出。添加的位置可以在mapper文件夹的xxxxMapper中，可以在类上，也可以在函数上。<br><img src="/2021/05/21/Spring-Cloud-Problem/6.png" alt="Problem Summary"><br><strong>问题4：</strong> 启动程序出现数据映射表错误<br><img src="/2021/05/21/Spring-Cloud-Problem/7.png" alt="Problem Summary"><br><strong>解决</strong> 需要在mapper文件中添加@Mapper注解，还有别的实现方式，如下启动类中添加@MapperScan(“com.example.demo.mapper”)<br><strong>问题5：</strong> 如何将配置文件application.yml中的值映射到实体类中,如将下列值映射到AsyncTaskProperties中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">#1、在application.yml中添加下列值</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">task:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  pool:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    # 核心线程池大小</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    core-pool-size: 10</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    # 最大线程数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    max-pool-size: 30</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    # 活跃时间</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    keep-alive-seconds: 60</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    # 队列容量</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    queue-capacity: 50</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">#2、添加@ConfigurationProperties(prefix &#x3D; &quot;task.pool&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">@Data</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">@Component</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;task.pool&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">public class AsyncTaskProperties &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    private int corePoolSize;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    private int maxPoolSize;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    private int keepAliveSeconds;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    private int queueCapacity;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br><strong>问题6：</strong> nacos服务注册发现时，一直在nacos界面上看不到任务<br>查看依赖maven-dependency结果发现虽然pom中导入了spring-cloud-starter-alibaba-nacos-discovery但是依赖列表中并没有<br><strong>解决</strong> maven-&gt;reimport重新加载一下依赖即可<br><img src="/2021/05/21/Spring-Cloud-Problem/8.png" alt="Problem Summary"><br><strong>问题7：</strong> Quartz在启动Job时出错<br>因为Job的实例是在Quartz内部创建的，与Spring管理的Service不能访问，所以需要继承JobFactory去新建一个Job，并加入Bean中<br>Job的继承者会去实现一些exector的执行逻辑，一般是在这个执行逻辑中出现了错误如下<br><img src="/2021/05/21/Spring-Cloud-Problem/9.png" alt="Problem Summary"><br><strong>问题8：</strong> feign.FeignException$ServiceUnavailable: [503 Service Unavailable] during [POST] to [<a href="http://ace-admin/client/userPubKey?clientId=ace-gate&amp;secret=123456" target="_blank" rel="noopener">http://ace-admin/client/userPubKey?clientId=ace-gate&amp;secret=123456</a>] [ServiceAuthFeign#getUserPublicKey(String,String)]: []<br>两个微服务之间通过api访问的时候，访问不到<br><strong>解决</strong> 1、检查两个微服务是否都在nacos中注册成功，2、检查OpenFeign的服务提供者和消费者的调用逻辑，3、使用http去请求<a href="http://localhost:port/api/v1/jobs(类似这种链接" target="_blank" rel="noopener">http://localhost:port/api/v1/jobs(类似这种链接</a>)<br><img src="/2021/05/21/Spring-Cloud-Problem/10.png" alt="Problem Summary"><br>API的FeignClient注解类似上面的形式<br><strong>重点</strong> 在服务调用者或消费者中使用服务提供者的业务层逻辑时，需要在类上加上@Service，<strong>@Component不起作用</strong>，应该是注册Bean时需要对应上，不能用@Component记载@Service的Bean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">@Service</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">@AllArgsConstructor</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;@Component</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">public class QuartzTasks &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    @Autowired</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    private OpenstackService serverProvider;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    private PhysicalServerInstanceApi physicalServerInstanceApi;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    public void runSyncOpenstack() throws OperationException &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        boolean valid &#x3D; serverProvider.connectOpenstack();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        if(!valid)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            throw new OperationException(&quot;Openstack Connect failed!&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        System.out.println(&quot;connect Openstack success&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        final Nova nova  &#x3D; serverProvider.getNova();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        try&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            ApiResult&lt;List&lt;String&gt;&gt; serversList &#x3D; physicalServerInstanceApi.getPhysicalServerNodes();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            List&lt;String&gt; data &#x3D; serversList.getData();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            System.out.println(data.get(0));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            for(int i&#x3D;0; i&lt;data.size(); i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                Integer operateIndex &#x3D; nova.servers.get(data.get(i)).getPowerState();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                ApiResult&lt;Integer&gt; physicalStatus &#x3D; physicalServerInstanceApi.getPhysicalServerStatusById(data.get(i));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                if(!operateIndex.equals(physicalStatus.getData()))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                    physicalServerInstanceApi.updateNodeStatusById(data.get(i),operateIndex);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            System.out.println(&quot;Success&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        &#125;catch (Exception e)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">            System.out.println(e);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">            System.out.println(&quot;Failed!&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br><strong>问题9：</strong> The injection point has the following annotations: - @org.springframework.beans.factory.annotation.<br><img src="/2021/05/21/Spring-Cloud-Problem/11.png" alt="Problem Summary"><br>Autowired 根据类型去spring容器找，找不到那个类，就会报错<br><strong>解决</strong> 在springboot启动类上添加注解 @ComponentScan(basePackages = { “com.jeff” })，<br>@ComponentScan(basePackages = {“com.ict.cloud.quartz”, “com.ict.cloud.openstack”}, excludeFilters = @ComponentScan.Filter(type = FilterType.REGEX, pattern = {“com.ict.cloud.publicmodel.alipay.<em>“}))<br>excludeFilters的意思是排除扫描的Bean类<br><em>*提示：</em></em> 将basePackages放在@SpringBootApplication(scanBasePackages = {“com.ict.cloud.quartz”, “com.ict.cloud.openstack”})上没有作用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-Cloud-Problem-Summary&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Problem Summary&quot;&gt;&lt;/a&gt;Sp
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot-Bean</title>
    <link href="http://yoursite.com/2021/05/21/Spring-Boot-Bean/"/>
    <id>http://yoursite.com/2021/05/21/Spring-Boot-Bean/</id>
    <published>2021-05-21T14:29:27.000Z</published>
    <updated>2021-05-21T14:31:06.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot-Bean解析"><a href="#SpringBoot-Bean解析" class="headerlink" title="SpringBoot Bean解析"></a>SpringBoot Bean解析</h2><h3 id="一、简述Bean"><a href="#一、简述Bean" class="headerlink" title="一、简述Bean"></a>一、简述Bean</h3><p>Spring中有两个有名的特性，依赖注入（DI）与切面（AOP），其中围绕的关键就是Bean。<br>Java语言欠缺属性、事件、多重继承功能。所以，如果要在Java程序中实现一些面向对象编程的常见需求，只能手写大量胶水代码。Java Bean正是编写这套胶水代码的惯用模式或约定。这些约定包括getXxx、setXxx、isXxx、addXxxListener、XxxEvent等。遵守上述约定的类可以用于若干工具或库。<br>java Bean是Sun公司为了代码的向后兼容性而提出的一种设计方案，一个java bean其实就是一个普通的java类，对这个类有如下的一些要求：</p><ol><li>这个类需要是public的，需要有个无参构造函数(能够new出来一个对象)</li><li>这个类的属性应该是private的，通过setXXX(), getXXX()来访问</li><li>这个类需要能支持”事件”，例如addXXXListenr(xxxEvent e),事件可以是Click事件，keyboard事件等，也可以支持自定义事件</li><li>需要提供一个反射机制，这样能在运行时查看java bean定义的类中的各种信息</li><li>这个类可以序列化，即可以把bean的状态保存在硬盘上，便于以后恢复(实现serializable接口)<br>最初的Java Bean是为了不破坏插件等的向后兼容性，比如下了一个代码，之后改变了实现逻辑，那么在别人调用升级后的版本时，就会报错。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 编译成 java-int-list_1.0.jar</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">public final class JavaIntList &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  static class Node &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    public Node next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    public int value;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  public Node head;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  public int size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">JavaIntList myList &#x3D; new JavaIntList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">System.out.println(myList.size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;如上述java实现的单链表</span></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 编译成 java-int-list_2.0.jar</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">public final class JavaIntList &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  static final class Node &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    public Node next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    public int value;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  public Node head;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  public int getSize() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    Node n &#x3D; head;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    int i &#x3D; 0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    while (n !&#x3D; null) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      n &#x3D; n.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      i++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    return i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;如果换成了2.0版本，那么别人在使用的时候就会发现size变量找不到了，会报错，兼容性很差</span></pre></td></tr></table></figure>为了考虑向后兼容性，一般会使用如下形式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">private int size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">public int getSize() &#123; return size; &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;对外开放getSize()，如何改变实现逻辑，只需改变getSize()即可</span></pre></td></tr></table></figure><h3 id="二、Bean的创建"><a href="#二、Bean的创建" class="headerlink" title="二、Bean的创建"></a>二、Bean的创建</h3>2.1、注解的方式：一般就是在类上添加@Component, @Service等注解（@Controller表示提供http接口的bean, @Configuration表示配置类Bean)<br>添加上这种注解的类，会被Spring容器扫描加载，自动生成单例的bean，一个典型的实例如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">@Component</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">public class AnoDemoBean &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    private String type &#x3D; &quot;AnoDemoBean&quot;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    public String getName(String name) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        return name + &quot; _&quot; + type;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>如果在实际测试时，发现无法获取上面的bean，就需要注意下bean的包路径，是否在被你程序的扫描路径包含,如：@SpringBootApplication(scanBasePackages = {“com.ict.cloud.*”})<br>2.2、@Bean定义方式<br>这种方式，主要是结合Configuration来定义bean，首先是声明一个配置类，然后再配置类中，通过返回bean对象的方法形式来声明bean，一般使用姿势如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">@Data</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">public class ConfigDemoBean &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    private String type &#x3D; &quot;ConfigDemoBean&quot;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    public String getName(String name) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        return name + &quot; _&quot; + type;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">@Configuration</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">public class BeanLoadConfig &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    @Bean</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    public ConfigDemoBean configDemoBean() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        return new ConfigDemoBean();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>需要说明的一点是BeanLoadConfig类本身也被Spring容器看为一个Bean<br>2.3、工厂类方式（以后再说）<h3 id="三、Bean的使用"><a href="#三、Bean的使用" class="headerlink" title="三、Bean的使用"></a>三、Bean的使用</h3>3.1、Autowired注入<br>将注解@Autowired或者@Resource添加到成员变量上，即表示这个成员变量会由Spring容器注入对应的Bean对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">@Autowired</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">private ConfigDemoBean configDemoBean;</span></pre></td></tr></table></figure>3.2、Setter方法<br>3.3、构造方法<h3 id="四、记录一些项目中需要的名称"><a href="#四、记录一些项目中需要的名称" class="headerlink" title="四、记录一些项目中需要的名称"></a>四、记录一些项目中需要的名称</h3></li></ol><ul><li>PO(persistence object):用于持久化时(例如保存到数据库或者缓存)</li><li>VO(value object):用于前端展示使用(例如放置到JSP中解析或者给前端传递数据)</li><li>DTO(data transfer object):用于接口互相调用返回,数据传输(例如很多接口调用返回值或消息队列内容)<br><a href="https://www.zhihu.com/question/19773379" target="_blank" rel="noopener">参考</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringBoot-Bean解析&quot;&gt;&lt;a href=&quot;#SpringBoot-Bean解析&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot Bean解析&quot;&gt;&lt;/a&gt;SpringBoot Bean解析&lt;/h2&gt;&lt;h3 id=&quot;一、简述B
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot-Swagger</title>
    <link href="http://yoursite.com/2021/05/21/Spring-Boot-Swagger/"/>
    <id>http://yoursite.com/2021/05/21/Spring-Boot-Swagger/</id>
    <published>2021-05-21T14:26:22.000Z</published>
    <updated>2021-05-21T14:35:22.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Boot-Spring-Cloud与Swagger2"><a href="#Spring-Boot-Spring-Cloud与Swagger2" class="headerlink" title="Spring Boot/Spring Cloud与Swagger2"></a>Spring Boot/Spring Cloud与Swagger2</h2><h3 id="一、认识Swagger"><a href="#一、认识Swagger" class="headerlink" title="一、认识Swagger"></a>一、认识Swagger</h3><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。<br><strong>作用</strong>：1、接口的文档在线自动生成；2、功能测试<br><strong>Swagger是一组开源项目，其中主要要项目如下：</strong></p><ol><li><strong>Swagger-tools:</strong>提供各种与Swagger进行集成和交互的工具。例如模式检验、Swagger 1.2文档转换成Swagger 2.0文档等功能。</li><li><strong>Swagger-core:</strong> 用于Java/Scala的的Swagger实现。与JAX-RS(Jersey、Resteasy、CXF…)、Servlets和Play框架进行集成。</li><li><strong>Swagger-js:</strong> 用于JavaScript的Swagger实现。</li><li><strong>Swagger-node-express:</strong> Swagger模块，用于node.js的Express web应用框架。</li><li><strong>Swagger-ui:</strong> 一个无依赖的HTML、JS和CSS集合，可以为Swagger兼容API动态生成优雅文档。</li><li><strong>Swagger-codegen:</strong> 一个模板驱动引擎，通过分析用户Swagger资源声明以各种语言生成客户端代码。<h3 id="二、工程创建"><a href="#二、工程创建" class="headerlink" title="二、工程创建"></a>二、工程创建</h3>1、添加Maven依赖<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &lt;version&gt;2.9.2&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &lt;version&gt;2.9.2&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr></table></figure><strong>使用swagger要求jdk1.8及以上，否则swagger2不能运行</strong><h3 id="三、Swagger2配置-目前以更新到版本3，但由于项目这里先了解Swagger2"><a href="#三、Swagger2配置-目前以更新到版本3，但由于项目这里先了解Swagger2" class="headerlink" title="三、Swagger2配置(目前以更新到版本3，但由于项目这里先了解Swagger2)"></a>三、Swagger2配置(目前以更新到版本3，但由于项目这里先了解Swagger2)</h3>在项目创建成功之后，只需要开发者自己提供一个Docket的Bean即可，如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> * Swagger2配置类</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> * 在与spring boot集成时，该配置文件放在与Application.java同级或子包下面。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> * 通过@Configuration注解，让Spring来加载该类配置。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> * 再通过@EnableSwagger2注解来启用Swagger2。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">@Configuration</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">@EnableSwagger2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">public class SwaggerConfig &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">     * 创建API应用</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">     * apiInfo() 增加API相关信息</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">     * 通过select()函数返回一个ApiSelectorBuilder实例,用来控制哪些接口暴露给Swagger来展现，</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">     * 本例采用指定扫描的包路径来定义指定要建立API的目录。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">     * @return</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    @Bean</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    public Docket createRestApi() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                .pathMapping(&quot;&#x2F;&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                .select()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.xxx.controller&quot;))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                .paths(PathSelectors.any())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">                .build()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">.apiInfo(apiInfo());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"> * 创建该API的基本信息（这些基本信息会展现在文档页面中）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"> * 访问地址：http:&#x2F;&#x2F;项目实际地址&#x2F;swagger-ui.html</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"> * @return</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">private ApiInfo apiInfo() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">return  new ApiInfoBuilder()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">.title(&quot;SpringBoot整合Swagger&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">.description(&quot;SpringBoot整合Swagger，详细信息......&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">.version(&quot;9.0&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">.contact(new Contact(&quot;你好，世界&quot;,&quot;hello world&quot;,&quot;xxx@xxx.com&quot;))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">.license(&quot;The Apache License&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">.licenseUrl(&quot;http:&#x2F;&#x2F;www.xxxx.com&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">.build()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>上述提供了一个配置类，首先通过@EnableSwagger2注解启用Swagger2，然后配置一个Docket Bean，这个Bean中，配置映射路径和要扫描的接口的位置，在apiInfo中，主要配置一下Swagger2文档网站的信息，例如网站的title，网站的描述，联系人的信息，使用的协议等等。<h3 id="四、Swagger2启动"><a href="#四、Swagger2启动" class="headerlink" title="四、Swagger2启动"></a>四、Swagger2启动</h3>输入<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a><br><img src="/2021/05/21/Spring-Boot-Swagger/1.jpg" alt="Swagger2"><h3 id="五、创建接口"><a href="#五、创建接口" class="headerlink" title="五、创建接口"></a>五、创建接口</h3>用于web展示的条目，在controller文档中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">@RestController</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">@Api(tags &#x3D; &quot;用户管理相关接口&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;user&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">public class UserController &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    @PostMapping(&quot;&#x2F;&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    @ApiOperation(&quot;添加用户的接口&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    @ApiImplicitParams(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            @ApiImplicitParam(name &#x3D; &quot;username&quot;, value &#x3D; &quot;用户名&quot;, defaultValue &#x3D; &quot;李四&quot;),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            @ApiImplicitParam(name &#x3D; &quot;address&quot;, value &#x3D; &quot;用户地址&quot;, defaultValue &#x3D; &quot;深圳&quot;, required &#x3D; true)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    public RespBean addUser(String username, @RequestParam(required &#x3D; true) String address) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        return new RespBean();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    @GetMapping(&quot;&#x2F;&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    @ApiOperation(&quot;根据id查询用户的接口&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    @ApiImplicitParam(name &#x3D; &quot;id&quot;, value &#x3D; &quot;用户id&quot;, defaultValue &#x3D; &quot;99&quot;, required &#x3D; true)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    public User getUserById(@PathVariable Integer id) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        User user &#x3D; new User();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        user.setId(id);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        return user;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    @PutMapping(&quot;&#x2F;&#123;id&#125;&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    @ApiOperation(&quot;根据id更新用户的接口&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    public User updateUserById(@RequestBody User user) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        return user;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ol><div class="table-container"><table><thead><tr><th>API</th><th>描述</th></tr></thead><tbody><tr><td>@Api</td><td>可以用来标记当前Controller的功能</td></tr><tr><td>@ApiOperation</td><td>用来标记一个方法的作用</td></tr><tr><td>@ApiImplicitParam</td><td>用来描述一个参数，可以配置参数的中文含义，也可以给参数设置默认值，这样在接口测试的时候可以避免手动输入</td></tr><tr><td>@ApiImplicitParams</td><td>如果有多个参数，则需要使用多个@ApiImplicitParam注解来描述,放在一个@ApiImplicitParams注解中</td></tr><tr><td>@ApiResponses</td><td>用于表示一组响应</td></tr><tr><td>@ApiResponse</td><td>用在@ApiResponses中，一般用于表达一个错误的响应信息code、message、response</td></tr><tr><td>@ApiModel</td><td>描述一个Model的信息（一般用在请求参数无法使用@ApiImplicitParam注解进行描述的时候）</td></tr><tr><td>@ApiModelProperty</td><td>描述一个model的属性</td></tr></tbody></table></div><p>需要注意的是，@ApiImplicitParam注解中虽然可以指定参数是必填的，但是却不能代替@RequestParam(required = true)，前者的必填只是在Swagger2框架内必填，抛弃了Swagger2，这个限制就没用了，所以假如开发者需要指定一个参数必填，@RequestParam(required = true)注解还是不能省略。<br>如果参数是一个对象（例如上文的更新接口），对于参数的描述也可以放在实体类中,如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">@ApiModel</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">public class User &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    @ApiModelProperty(value &#x3D; &quot;用户id&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    private Integer id;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    @ApiModelProperty(value &#x3D; &quot;用户名&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    private String username;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    @ApiModelProperty(value &#x3D; &quot;用户地址&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    private String address;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#x2F;&#x2F;getter&#x2F;setter 可以添加@Data注解自动添加getter，setter方法</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></p><h3 id="六、跨域配置"><a href="#六、跨域配置" class="headerlink" title="六、跨域配置"></a>六、跨域配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">package com.kmair.offical.member.config;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">import org.springframework.boot.web.servlet.FilterRegistrationBean;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">import org.springframework.context.annotation.Bean;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">import org.springframework.context.annotation.Configuration;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">import org.springframework.web.cors.CorsConfiguration;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">import org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">import org.springframework.web.filter.CorsFilter;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">@Configuration</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">public class CorsConfig &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    @Bean</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    public FilterRegistrationBean corsFilter() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        final UrlBasedCorsConfigurationSource source &#x3D; new UrlBasedCorsConfigurationSource();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        final CorsConfiguration config &#x3D; new CorsConfiguration();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        config.setAllowCredentials(true); &#x2F;&#x2F; 允许cookies跨域</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        config.addAllowedOrigin(&quot;*&quot;);&#x2F;&#x2F; #允许向该服务器提交请求的URI，*表示全部允许，在SpringMVC中，如果设成*，会自动转成当前请求头中的Origin</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        config.addAllowedHeader(&quot;*&quot;);&#x2F;&#x2F; #允许访问的头信息,*表示全部</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        config.setMaxAge(1800L);&#x2F;&#x2F; 预检请求的缓存时间（秒），即在这个时间段里，对于相同的跨域请求不会再预检了</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        config.addAllowedMethod(&quot;*&quot;);&#x2F;&#x2F; 允许提交请求的方法，*表示全部允许</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        source.registerCorsConfiguration(&quot;&#x2F;**&quot;, config);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        FilterRegistrationBean bean &#x3D; new FilterRegistrationBean(new CorsFilter(source));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        bean.setOrder(0); &#x2F;&#x2F; 跨域的过滤器要放在第一位</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        return bean;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="七、在Security中的配置"><a href="#七、在Security中的配置" class="headerlink" title="七、在Security中的配置"></a>七、在Security中的配置</h3><p>如果我们的Spring Boot项目中集成了Spring Security，那么如果不做额外配置，Swagger2文档可能会被拦截，此时只需要在Spring Security的配置类中重写configure方法，添加如下过滤即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">@Override</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">public void configure(WebSecurity web) throws Exception &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    web.ignoring()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            .antMatchers(&quot;&#x2F;swagger-ui.html&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            .antMatchers(&quot;&#x2F;v2&#x2F;**&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            .antMatchers(&quot;&#x2F;swagger-resources&#x2F;**&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></p><h3 id="八、API分组"><a href="#八、API分组" class="headerlink" title="八、API分组"></a>八、API分组</h3><p>对应于有多个微服务的来说，每个微服务都需要对应一个Swagger界面，所以就需要API分组共功能<br>一般是在每个服务中建立自己的SwaggerConfig文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">@Bean</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">public Docket docket1()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;group1&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">@Bean</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">public Docket docket1()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;group1&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br><img src="/2021/05/21/Spring-Boot-Swagger/2.png" alt="Swagger2"><br><strong>注意在正式发布的时候，关闭swagger，出于安全考虑。而且节省运行的内存</strong><br><strong>在前端调试界面的时候用到F12,一定要用chrome，获得的信息更全</strong><br><a href="https://www.cnblogs.com/luweiweicode/p/14276170.html" target="_blank" rel="noopener">参考资料-One</a><br><a href="https://www.cnblogs.com/jpfss/p/11439560.html" target="_blank" rel="noopener">参考资料-Two</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-Boot-Spring-Cloud与Swagger2&quot;&gt;&lt;a href=&quot;#Spring-Boot-Spring-Cloud与Swagger2&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot/Spring Cloud与S
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Machine-Learning-Inductive-Bias</title>
    <link href="http://yoursite.com/2021/05/15/Machine-Learning-Inductive-Bias/"/>
    <id>http://yoursite.com/2021/05/15/Machine-Learning-Inductive-Bias/</id>
    <published>2021-05-15T10:19:54.000Z</published>
    <updated>2021-05-15T10:22:22.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="机器学习中的归纳偏好"><a href="#机器学习中的归纳偏好" class="headerlink" title="机器学习中的归纳偏好"></a>机器学习中的归纳偏好</h2><p><strong>学习，摘录自周志华老师的西瓜书-机器学习</strong>，为了节省时间公式就不编辑了<br><strong>学习</strong>得到的模型对应了假设空间中的一个假设，但由于版本空间的多样性，对于新数据会面临不同的输出空间。<br>那么对于机器学习来说必须要产生一个模型，该如何选择模型呢？<br>根据学习过程中对<strong>某种类型假设的偏好</strong><br>任何一个有效的机器学习算法必须有其归纳偏好，否则它将被假设空间中看似在训练集上”等效”的假设所迷惑，而无法产生确定的学习结果。时而对，时而错，学习的结果显然没有意义。<br><strong>归纳偏好</strong>可看作学习算法自身在一个可能很庞大的假设空间中对假设进行选择的启发式或”价值观”<br>那么如何引导算法确立”正确的”偏好呢？<br><strong>奥卡姆剃刀</strong>是一种常用的，自然科学研究中最基本的原则，即”若有多个假设与观察一致，则选最简单的那个”。如：描述更简单或方程式更简单。<br>事实上，归纳偏好对应了学习算法本身所做出的关于”什么样的模型更好”的假设。在具体的现实问题中，这个假设是否成立，即算法的归纳偏好是否与问题本身匹配，大多数时候直接决定了算法能否取得好的性能。<br><img src="/2021/05/15/Machine-Learning-Inductive-Bias/1.png" alt="Inductive-Bias"><br>上图中如果没有指出对应的场景和偏好，算法A和算法B的优劣情况是一样的。<br><img src="/2021/05/15/Machine-Learning-Inductive-Bias/2.png" alt="Inductive-Bias"><br><img src="/2021/05/15/Machine-Learning-Inductive-Bias/3.png" alt="Inductive-Bias"><br>NFL定义有一个前提，所有”问题”出现的机会相同、或所有问题同等重要。但实际上，我们只关注自己正在试图解决的问题，希望为它找到一个解决方案，至于这个解决方案在别的问题、甚至相似的问题上是否为好的方案，并不关心。<br>脱离具体问题，空谈”什么学习算法更好”毫无意义，必须针对剧吐的学习问题。学习算法自身的归纳偏好与问题是否相配，往往会起到决定性的作用。</p><p><strong>从样例中学习</strong>基于神经网络的连接主义学习。<br>连接主义最大的局限性是其”试错性”，学习过程涉及大量参数，而参数的设置缺乏理论指导，主要靠手工”调参”。参数调节上失之毫厘，学习结果可能谬以千里。</p><h3 id="机器学习的应用"><a href="#机器学习的应用" class="headerlink" title="机器学习的应用"></a>机器学习的应用</h3><p>今天，在计算机科学的诸多分支学科领域中，无论是多媒体、图形学还是网络通信、软件工程乃至体系结构、芯片设计，都能找到机器学习计数的身影，尤其是在计算机视觉、自然语言处理等领域。<br><strong>大数据时代</strong>的三大关键技术：机器学习、云计算、众包(crowdsourcing)<br>大数据时代需要对数据进行收集、存储、传输、管理，目的是为了”利用”大数据。<br><strong>分析利用大数据</strong>，会想到”数据挖掘”，那么数据挖掘和机器学习的联系是怎么样的呢？<br><strong>数据挖掘</strong>领域涉及的关键技术是:数据库、机器学习、统计学。数据库提供了海量数据管理的作用；机器学习和统计学的研究为数据挖掘提供数据分析技术。但统计学的研究成果通常需要经由机器学习研究来形成有效的学习算法，所以数据挖掘的两大关键支撑是数据库和机器学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;机器学习中的归纳偏好&quot;&gt;&lt;a href=&quot;#机器学习中的归纳偏好&quot; class=&quot;headerlink&quot; title=&quot;机器学习中的归纳偏好&quot;&gt;&lt;/a&gt;机器学习中的归纳偏好&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;学习，摘录自周志华老师的西瓜书-机器学习&lt;/strong&gt;，
      
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot-Config</title>
    <link href="http://yoursite.com/2021/05/14/Spring-Boot-Config/"/>
    <id>http://yoursite.com/2021/05/14/Spring-Boot-Config/</id>
    <published>2021-05-14T13:46:03.000Z</published>
    <updated>2021-05-14T13:52:23.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot中的一些总结内容"><a href="#SpringBoot中的一些总结内容" class="headerlink" title="SpringBoot中的一些总结内容"></a>SpringBoot中的一些总结内容</h2><h3 id="1、Spring中的-Transactional-rollbackFor-Exception-class-属性详解"><a href="#1、Spring中的-Transactional-rollbackFor-Exception-class-属性详解" class="headerlink" title="1、Spring中的@Transactional(rollbackFor=Exception.class)属性详解"></a>1、Spring中的@Transactional(rollbackFor=Exception.class)属性详解</h3><p>解释：@Transactional这是一个注解。<br>异常Exception分为运行时异常RuntimeException和非运行时异常(IOException、SQLException等)<br><strong>异常会产生的问题</strong>：线程中止，主程序终止。<br>解决方法：使用try{}catch(){} 捕获异常。程序如果出现了异常数据，正常的处理应该是把异常数据舍弃，然后记录日志。不应该由于异常数据而影响对正常数据的影响。<br>为了不让程序退出或产生编译问题，那么就需要写一大堆catch块。如何能够减少这种方式呢？<br><strong>事物管理方式</strong>: 即使出现异常情况，它也可以保证数据的一致性。<br>Spring支持编程式事物管理和声明式事物管理</p><ul><li>编程式事务管理使用TransactionTemplate或者直接使用底层的PlatformTransactionManager。对于编程式事务管理，spring推荐使用TransactionTemplate。</li><li>声明式事务管理建立在AOP之上的。其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后<em>根据执行情况</em>提交或者回滚事务。<br>声明式事务管理<ul><li>基于tx和aop名字空间的xml配置文件</li><li>基于@Transactional注解</li></ul></li></ul><p><strong>声明式事物管理的使用说明</strong><br>当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。<br>在项目中，@Transactional(rollbackFor=Exception.class)，如果类加了这个注解，那么这个类里面的方法抛出异常，就会回滚，数据库里面的数据也会回滚。<br>在@Transactional注解中如果不配置rollbackFor属性,那么事物只会在遇到RuntimeException的时候才会回滚,加上rollbackFor=Exception.class,可以让事物在遇到非运行时异常时也回滚</p><div class="table-container"><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>可选的限定描述符，指定使用的事务管理器</td></tr><tr><td>propagation</td><td>enum: Propagation</td><td>可选的事务传播行为设置</td></tr><tr><td>isolation</td><td>enum: Isolation</td><td>可选的事务隔离级别设置</td></tr><tr><td>readOnly</td><td>boolean</td><td>读写或只读事务，默认读写</td></tr><tr><td>timeout</td><td>int (in seconds granularity)</td><td>事务超时时间设置</td></tr><tr><td>rollbackFor</td><td>Class对象数组，必须继承自Throwable</td><td>导致事务回滚的异常类数组</td></tr><tr><td>rollbackForClassName</td><td>类名数组，必须继承自Throwable</td><td>导致事务回滚的异常类名字数组</td></tr><tr><td>noRollbackFor</td><td>Class对象数组，必须继承自Throwable</td><td>不会导致事务回滚的异常类数组</td></tr><tr><td>noRollbackForClassName</td><td>类名数组，必须继承自Throwable</td><td>不会导致事务回滚的异常类名字数组</td></tr></tbody></table></div><h3 id="2、Spring-Boot中pom-xml中的内容详解"><a href="#2、Spring-Boot中pom-xml中的内容详解" class="headerlink" title="2、Spring Boot中pom.xml中的内容详解"></a>2、Spring Boot中pom.xml中的内容详解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;!-- 模型版本。maven2.0必须是这样写，现在是maven2唯一支持的版本 --&gt; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;!-- 项目组织的唯一标识符 ：对应JAVA的包的结构，是main目录里java的目录结构--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;cn.mg&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&lt;!-- 项目的唯一标志：项目名--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;FileManagement&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&lt;!-- 项目的版本号（简明）--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&lt;version&gt;1.0&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&lt;!-- 打包的机制  默认为jar --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&lt;!-- 让用户更加能够接受的项目名 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&lt;name&gt;FileManagement&lt;&#x2F;name&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&lt;url&gt;http:&#x2F;&#x2F;maven.apache.org&lt;&#x2F;url&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&lt;!-- 此项目继承的项目 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&lt;version&gt;1.4.2.RELEASE&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&lt;relativePath &#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;parent&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&lt;!-- 项目的基本属性配置 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&lt;!-- 编码格式 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&lt;!-- Java版本  查看方法见下方备注1--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">&lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&lt;!--Hibernate版本号--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">&lt;hibernate.version&gt;5.1.12.Final&lt;&#x2F;hibernate.version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">&lt;!--启动类--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">&lt;start-class&gt;cn.mg.file.FileManageApp&lt;&#x2F;start-class&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;properties&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">&lt;!-- 项目的依赖结构 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">&lt;!--原有配置 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">&lt;version&gt;3.8.1&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">&lt;scope&gt;test&lt;&#x2F;scope&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">&lt;!--新增：web应用基本环境配置 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">&lt;!--新增：常用配置 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">&lt;!--Tomcat支持--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">&lt;!--scope的值：详细见下方备注2--&gt;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">&lt;scope&gt;provided&lt;&#x2F;scope&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">&lt;scope&gt;test&lt;&#x2F;scope&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">&lt;!--使用JSP必要依赖-&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.apache.tomcat.embed&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;tomcat-embed-jasper&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">&lt;!--JSP标签库-&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;jstl&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">&lt;!--Spring aop支持:面向切面编程--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;spring-aop&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">&lt;!--事务控制Trancactions--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;spring-tx&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">&lt;!--对象关系映射 形成orm框架--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;spring-orm&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line">&lt;!--jdbc支持--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line">&lt;!--json支持--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">98</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">99</span></pre></td><td class="code"><pre><span class="line">&lt;version&gt;1.2.3&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">100</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">101</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependencies&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">102</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">103</span></pre></td><td class="code"><pre><span class="line"> &lt;!--构建设置，主要包含两个部分：plugins设置构建的插件和resources排除或者删除资源文件--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">104</span></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">105</span></pre></td><td class="code"><pre><span class="line">&lt;!--&lt;!--使用的插件列表  此处直接用父项目的plugins--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">106</span></pre></td><td class="code"><pre><span class="line">&lt;plugins&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">107</span></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">108</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">109</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">110</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;plugin&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">111</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;plugins&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">112</span></pre></td><td class="code"><pre><span class="line">&lt;!--项目相关的所有资源路径列表，例如和项目相关的配置文件、属性文件，这些资源被包含在最终的打包文件里。 --&gt; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">113</span></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">114</span></pre></td><td class="code"><pre><span class="line">&lt;resource&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">115</span></pre></td><td class="code"><pre><span class="line">&lt;directory&gt;src&#x2F;main&#x2F;webapp&lt;&#x2F;directory&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">116</span></pre></td><td class="code"><pre><span class="line">&lt;!--将directory文件打包到targetPath--&gt; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">117</span></pre></td><td class="code"><pre><span class="line">&lt;targetPath&gt;META-INF&#x2F;resources&lt;&#x2F;targetPath&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">118</span></pre></td><td class="code"><pre><span class="line">&lt;!--包含的模式列表--&gt; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">119</span></pre></td><td class="code"><pre><span class="line">&lt;includes&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">120</span></pre></td><td class="code"><pre><span class="line">&lt;include&gt;**&#x2F;**&lt;&#x2F;include&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">121</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;includes&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">122</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;resource&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">123</span></pre></td><td class="code"><pre><span class="line">&lt;resource&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">124</span></pre></td><td class="code"><pre><span class="line">&lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">125</span></pre></td><td class="code"><pre><span class="line">&lt;targetPath&gt;BOOT-INF&#x2F;classes&lt;&#x2F;targetPath&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">126</span></pre></td><td class="code"><pre><span class="line">&lt;includes&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">127</span></pre></td><td class="code"><pre><span class="line">&lt;include&gt;**&#x2F;**&lt;&#x2F;include&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">128</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;includes&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">129</span></pre></td><td class="code"><pre><span class="line">&lt;!--是否将资源文件中的占位符替换成对应的值  详细见下方备注3--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">130</span></pre></td><td class="code"><pre><span class="line">&lt;filtering&gt;false&lt;&#x2F;filtering&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">131</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;resource&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">132</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;resources&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">133</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;build&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">134</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;project&gt;</span></pre></td></tr></table></figure><p>scope的取值：compile(编译范围)，provided(已提供范围)，runtime(运行时范围)，test(测试范围)，system(系统范围)</p><h3 id="三、查看包：-按住Ctrl-鼠标左键点进去"><a href="#三、查看包：-按住Ctrl-鼠标左键点进去" class="headerlink" title="三、查看包： 按住Ctrl+鼠标左键点进去"></a>三、查看包： 按住Ctrl+鼠标左键点进去</h3><p>查看spring-boot-dependencies-2.1.3.RELEASE.pom<br><strong>dependencyManagement</strong></p><ul><li>定义了子项目中可能出现的各种依赖及其版本号</li><li>子项目在需要的时候引入即可使用，不在需要定义版本号了</li></ul><p><strong>spring-boot-starter-parent</strong></p><ul><li>定义了Java编译版本为1.8</li><li>使用UTF-8格式编码</li><li>继承自 spring-boot-dependencies，这个里边定义了依赖的版本</li><li>执行打包操作的配置</li><li>自动化的资源过滤</li><li>自动化的插件配置</li><li>针对application.properties 和 application.yml 的资源过滤，包括通过 profile 定义的不同环境的配置文件<br><strong>不使用parent</strong>：可以自定义parent,继承内部的parent<br>解决方法：自行定义dependencyManagement节点，然后在里面定义好版本号<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;spring-boot-dependencies&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;version&gt;2.1.4.RELEASE&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&lt;type&gt;pom&lt;&#x2F;type&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&lt;scope&gt;import&lt;&#x2F;scope&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependencies&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependencyManagement&gt;</span></pre></td></tr></table></figure><strong>注</strong>：同样关于打包的插件、编译的JDK版本、文件的编码格式都需要自己配置</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringBoot中的一些总结内容&quot;&gt;&lt;a href=&quot;#SpringBoot中的一些总结内容&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot中的一些总结内容&quot;&gt;&lt;/a&gt;SpringBoot中的一些总结内容&lt;/h2&gt;&lt;h3 id=&quot;1
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot-Mybatis</title>
    <link href="http://yoursite.com/2021/05/14/Spring-Boot-Mybatis/"/>
    <id>http://yoursite.com/2021/05/14/Spring-Boot-Mybatis/</id>
    <published>2021-05-14T13:44:34.000Z</published>
    <updated>2021-05-14T13:45:53.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Mabtis逆向工程"><a href="#Spring-Mabtis逆向工程" class="headerlink" title="Spring-Mabtis逆向工程"></a>Spring-Mabtis逆向工程</h2><p><strong>问题1</strong>: Could not create connection to database server<br>MySQL的版本号与pom配置中mysql-connector版本号不同<br>解决: SQL语句，select version() from dual;<br>修改版本号使两个版本号一致<br>将mysql的驱动改成: com.mysql.cj.jdbc.Driver</p><p><strong>问题2</strong>: The server time zone value ‘�й���׼ʱ��‘ is unrecognized<br>时区不一致，UTC是统一标准世界时间<br>解决: generatorConfig.xml中的jdbcConnect-&gt;connectionURL添加?serverTimezone=UTC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;jdbcConnection driverClass&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">connectionURL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mydata?serverTimezone&#x3D;UTC&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">userId&#x3D;&quot;root&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">password&#x3D;&quot;123456&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;jdbcConnection&gt;</span></pre></td></tr></table></figure><br>同时，application.properties中的spring.datasource.url改成如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">#配置数据源</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">spring.datasource.driverClassName&#x3D;com.mysql.cj.jdbc.Driver</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mydata?serverTimezone&#x3D;UTC</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">spring.datasource.username&#x3D;root</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">spring.datasource.password&#x3D;123456</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">#mybatis</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">#配置mybatis的mapper.xml文件所在位置</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">mybatis.mapper-locations&#x3D;classpath:com&#x2F;example&#x2F;springboot_mybaits01&#x2F;mapper&#x2F;*.xmls</span></pre></td></tr></table></figure></p><h3 id="一、逆向工程的步骤"><a href="#一、逆向工程的步骤" class="headerlink" title="一、逆向工程的步骤"></a>一、逆向工程的步骤</h3><p>1、创建generatorConfig.xml的生成器配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE generatorConfiguration</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD MyBatis Generator Configuration 1.0&#x2F;&#x2F;EN&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-generator-config_1_0.dtd&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;generatorConfiguration&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &lt;context id&#x3D;&quot;Tables&quot; targetRuntime&#x3D;&quot;MyBatis3&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &lt;!-- 批量插入插件 start 按需启用--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &lt;plugin type&#x3D;&quot;com.itfsw.mybatis.generator.plugins.BatchInsertPlugin&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            &lt;property name&#x3D;&quot;allowMultiQueries&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        &lt;&#x2F;plugin&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &lt;!-- 批量插入插件 end --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        &lt;!--重命名查询class名称--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &lt;plugin type&#x3D;&quot;org.mybatis.generator.plugins.RenameExampleClassPlugin&quot; &gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            &lt;property name&#x3D;&quot;searchString&quot; value&#x3D;&quot;Example$&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            &lt;property name&#x3D;&quot;replaceString&quot; value&#x3D;&quot;Criteria&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        &lt;&#x2F;plugin&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        &lt;!-- 查询单条数据插件 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        &lt;plugin type&#x3D;&quot;com.itfsw.mybatis.generator.plugins.SelectOneByExamplePlugin&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        &lt;!-- MySQL分页插件 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        &lt;plugin type&#x3D;&quot;com.itfsw.mybatis.generator.plugins.LimitPlugin&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            &lt;!-- 通过配置startPage影响Example中的page方法开始分页的页码，默认分页从0开始 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            &lt;property name&#x3D;&quot;startPage&quot; value&#x3D;&quot;1&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        &lt;&#x2F;plugin&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        &lt;!-- 自定义注释插件 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        &lt;plugin type&#x3D;&quot;com.itfsw.mybatis.generator.plugins.CommentPlugin&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            &lt;!-- 自定义模板路径 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">            &lt;property name&#x3D;&quot;template&quot; value&#x3D;&quot;src&#x2F;main&#x2F;resources&#x2F;mybatis-generator-comment.ftl&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        &lt;&#x2F;plugin&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        &lt;!-- Lombok插件 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        &lt;plugin type&#x3D;&quot;com.itfsw.mybatis.generator.plugins.LombokPlugin&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">            &lt;!-- @Builder 必须在 Lombok 版本 &gt;&#x3D; 1.18.2 的情况下 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">            &lt;property name&#x3D;&quot;@Builder&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">            &lt;!-- @NoArgsConstructor 和 @AllArgsConstructor 使用规则和Lombok一致 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">            &lt;property name&#x3D;&quot;@AllArgsConstructor&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">            &lt;property name&#x3D;&quot;@NoArgsConstructor&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">        &lt;&#x2F;plugin&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">        &lt;!-- xml重新生成时覆盖 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">        &lt;plugin type&#x3D;&quot;org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">        &lt;!-- 注释 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">        &lt;commentGenerator&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">            &lt;property name&#x3D;&quot;javaFileEncoding&quot; value&#x3D;&quot;UTF-8&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">        &lt;&#x2F;commentGenerator&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">        &lt;!-- JDBC连接 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">        &lt;jdbcConnection</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">                driverClass&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">                connectionURL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis_generator_demo?serverTimezone&#x3D;UTC&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">                userId&#x3D;&quot;root&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">                password&#x3D;&quot;123456&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">            &lt;!-- 针对mysql数据库 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">            &lt;property name&#x3D;&quot;useInformationSchema&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">        &lt;&#x2F;jdbcConnection&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">        &lt;!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">        &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">         NUMERIC 类型解析为java.math.BigDecimal --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">        &lt;javaTypeResolver&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">            &lt;!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">            &lt;property name&#x3D;&quot;forceBigDecimals&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">        &lt;&#x2F;javaTypeResolver&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">        &lt;!-- domain领域模型  其中targetPackage需要根据你自己创建的目录进行改动 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">        &lt;javaModelGenerator targetPackage&#x3D;&quot;com.chiaki.mybatisgeneratordemo.domain&quot; targetProject&#x3D;&quot;src&#x2F;main&#x2F;java&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">            &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">            &lt;property name&#x3D;&quot;trimStrings&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">        &lt;&#x2F;javaModelGenerator&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">        &lt;!-- mapper xml文件 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">        &lt;sqlMapGenerator targetPackage&#x3D;&quot;mapper&quot;  targetProject&#x3D;&quot;src&#x2F;main&#x2F;resources&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">        &lt;&#x2F;sqlMapGenerator&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">        &lt;!-- Mapper接口 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">        &lt;javaClientGenerator targetPackage&#x3D;&quot;com.chiaki.mybatisgeneratordemo.mapper&quot; targetProject&#x3D;&quot;src&#x2F;main&#x2F;java&quot; type&#x3D;&quot;XMLMAPPER&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">        &lt;&#x2F;javaClientGenerator&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line">        &lt;!-- 配置表信息 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line">        &lt;!-- tableName为对应的数据库表 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line">        &lt;table tableName&#x3D;&quot;student_info&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line">            &lt;property name&#x3D;&quot;useActualColumnNames&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line">            &lt;generatedKey column&#x3D;&quot;id&quot; sqlStatement&#x3D;&quot;Mysql&quot; identity&#x3D;&quot;true&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line">        &lt;&#x2F;table&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">98</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">99</span></pre></td><td class="code"><pre><span class="line">        &lt;table tableName&#x3D;&quot;class_info&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">100</span></pre></td><td class="code"><pre><span class="line">            &lt;property name&#x3D;&quot;useActualColumnNames&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">101</span></pre></td><td class="code"><pre><span class="line">            &lt;generatedKey column&#x3D;&quot;id&quot; sqlStatement&#x3D;&quot;Mysql&quot; identity&#x3D;&quot;true&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">102</span></pre></td><td class="code"><pre><span class="line">        &lt;&#x2F;table&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">103</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">104</span></pre></td><td class="code"><pre><span class="line">    &lt;&#x2F;context&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">105</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;generatorConfiguration&gt;</span></pre></td></tr></table></figure><br>2、创建启动类配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># spring配置</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">spring:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  # 数据库配置</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  datasource:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis_generator_demo?serverTimezone&#x3D;UTC</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    username: root</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    password: 123456</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">mybatis:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  # 指定xml文件的位置</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  mapper-locations: classpath:mapper&#x2F;*.xml</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  # 指定domain文件的位置</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  type-aliases-package: com.chiaki.domain</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  # 添加日志实现类以打印日志</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  configuration:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"># 服务器配置</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">server:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  # 指定端口</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  port: 8079</span></pre></td></tr></table></figure><br>3、创建数据库和表，并导入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">-- ----------------------------</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">-- Table structure for sys_quartz_job</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">-- ----------------------------</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS &#96;sys_quartz_job&#96;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;sys_quartz_job&#96; (</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &#96;job_id&#96; bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#39;ID&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  &#96;bean_name&#96; varchar(255) DEFAULT NULL COMMENT &#39;Spring Bean名称&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &#96;cron_expression&#96; varchar(255) DEFAULT NULL COMMENT &#39;cron 表达式&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  &#96;is_pause&#96; bit(1) DEFAULT NULL COMMENT &#39;状态：1暂停、0启用&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  &#96;job_name&#96; varchar(255) DEFAULT NULL COMMENT &#39;任务名称&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  &#96;method_name&#96; varchar(255) DEFAULT NULL COMMENT &#39;方法名称&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  &#96;params&#96; varchar(255) DEFAULT NULL COMMENT &#39;参数&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  &#96;description&#96; varchar(255) DEFAULT NULL COMMENT &#39;备注&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  &#96;person_in_charge&#96; varchar(100) DEFAULT NULL COMMENT &#39;负责人&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  &#96;sub_task&#96; varchar(100) DEFAULT NULL COMMENT &#39;子任务ID&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  &#96;pause_after_failure&#96; bit(1) DEFAULT NULL COMMENT &#39;任务失败后是否暂停&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  &#96;create_by&#96; varchar(255) DEFAULT NULL COMMENT &#39;创建者&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  &#96;update_by&#96; varchar(255) DEFAULT NULL COMMENT &#39;更新者&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  &#96;create_time&#96; datetime DEFAULT NULL COMMENT &#39;创建日期&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  &#96;update_time&#96; datetime DEFAULT NULL COMMENT &#39;更新时间&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  PRIMARY KEY (&#96;job_id&#96;) USING BTREE,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  KEY &#96;inx_is_pause&#96; (&#96;is_pause&#96;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;7 DEFAULT CHARSET&#x3D;utf8 ROW_FORMAT&#x3D;COMPACT COMMENT&#x3D;&#39;定时任务&#39;;</span></pre></td></tr></table></figure><br>4、添加依赖文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;version&gt;8.0.17&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        &lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">           &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">           &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">           &lt;version&gt;2.0.0&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">       &lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">       &lt;plugins&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">           &lt;plugin&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">               &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">               &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">               &lt;configuration&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                   &lt;excludes&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                       &lt;exclude&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                           &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                           &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                       &lt;&#x2F;exclude&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                   &lt;&#x2F;excludes&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">               &lt;&#x2F;configuration&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">           &lt;&#x2F;plugin&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">           &lt;plugin&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">               &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">               &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">               &lt;version&gt;1.3.7&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">               &lt;configuration&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">                   &lt;!-- 是否覆盖，true表示会替换生成的Java文件，false则不覆盖 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">                   &lt;overwrite&gt;true&lt;&#x2F;overwrite&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">                   &lt;verbose&gt;true&lt;&#x2F;verbose&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">               &lt;&#x2F;configuration&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">               &lt;dependencies&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">                   &lt;!--mysql驱动包--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">                   &lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">                       &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">                       &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">                       &lt;version&gt;8.0.17&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">                   &lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">                   &lt;!-- mybatis 生成扩展包 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">                   &lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">                       &lt;groupId&gt;com.itfsw&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">                       &lt;artifactId&gt;mybatis-generator-plugin&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">                       &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">                   &lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">               &lt;&#x2F;dependencies&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">           &lt;&#x2F;plugin&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">       &lt;&#x2F;plugins&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">   &lt;&#x2F;build&gt;</span></pre></td></tr></table></figure><br>双击: View-&gt;Tool Windows-&gt;Maven-&gt;Plugins-&gt;mybatis-generator-&gt;mybatis-generator:generate<br>产生: java目录下domain和mapper文件夹，resource下产生mapper文件夹</p><h3 id="二、逆向工程生成的方法的使用"><a href="#二、逆向工程生成的方法的使用" class="headerlink" title="二、逆向工程生成的方法的使用"></a>二、逆向工程生成的方法的使用</h3><p>如: selectByExample(example)这个example是什么，如何使用？<br><strong>说明：</strong> example用于添加条件，相当于where后面的部分<br>逆向工程生成的文件XxxExample.java中包含一个static的内部类Criteria，Criteria中的方法是定义SQL 语句where后的查询条件。<br>1、查询：selectByPrimaryKey()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">User user &#x3D; XxxMapper.selectByPrimaryKey(100); &#x2F;&#x2F;相当于select * from user where id &#x3D; 100。</span></pre></td></tr></table></figure><br>2、查询：selectByExample()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">UserExample example &#x3D; new UserExample();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Criteria criteria &#x3D; example.createCriteria();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">criteria.andUsernameEqualTo(&quot;wyw&quot;);    &#x2F;&#x2F;where条件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">criteria.andUsernameIsNull();&#x2F;&#x2F;where条件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">example.setOrderByClause(&quot;username asc,email desc&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">List&lt;?&gt;list &#x3D; XxxMapper.selectByExample(example);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;相当于：select * from user where username &#x3D; &#39;wyw&#39; and  username is null order by username asc,email desc</span></pre></td></tr></table></figure><br>3、更新数据：updateByExample()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">UserExample example &#x3D; new UserExample();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Criteria criteria &#x3D; example.createCriteria();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">criteria.andUsernameEqualTo(&quot;admin&quot;);   &#x2F;&#x2F;where条件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">User user &#x3D; new User();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">user.setPassword(&quot;wyw&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">XxxMapper.updateByPrimaryKeySelective(user,example);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;相当于：update user set password&#x3D;&#39;wyw&#39; where username&#x3D;&#39;admin&#39;</span></pre></td></tr></table></figure><br>4、删除数据：deleteByExample()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">UserExample example &#x3D; new UserExample();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Criteria criteria &#x3D; example.createCriteria();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">criteria.andUsernameEqualTo(&quot;admin&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">XxxMapper.deleteByExample(example);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;相当于：delete from user where username&#x3D;&#39;admin&#39;</span></pre></td></tr></table></figure></p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>example.setOrderByClause(“字段名ASC”)</td><td>添加升序排列条件，DESC为降序</td></tr><tr><td>example.setDistinct(false)</td><td>去除重复，boolean型，true为选择不重复的记录</td></tr><tr><td>criteria.andXxxIsNull</td><td>添加字段xxx为null的条件</td></tr><tr><td>criteria.andXxxIsNotNull</td><td>添加字段xxx不为null的条件</td></tr><tr><td>criteria.andXxxEqualTo(value)</td><td>添加xxx字段等于value条件</td></tr><tr><td>criteria.andXxxNotEqualTo(value)</td><td>添加xxx字段不等于value条件</td></tr><tr><td>criteria.andXxxGreaterThan(value)</td><td>添加xxx字段大于value条件</td></tr><tr><td>criteria.andXxxGreaterThanOrEqualTo(value)</td><td>添加xxx字段大于等于value条件</td></tr><tr><td>criteria.andXxxLessThan(value)</td><td>添加xxx字段小于value条件</td></tr><tr><td>criteria.andXxxLessThanOrEqualTo(value)</td><td>添加xxx字段小于等于value条件</td></tr><tr><td>criteria.andXxxIn(List&lt;?&gt;)</td><td>添加xxx字段值在List&lt;?&gt;条件</td></tr><tr><td>criteria.andXxxNotIn(List&lt;?&gt;)</td><td>添加xxx字段值不在List&lt;?&gt;条件</td></tr><tr><td>criteria.andXxxLike(“%”+value+”%”)</td><td>添加xxx字段值为value的模糊查询条件</td></tr><tr><td>criteria.andXxxNotLike(“%”+value+”%”)</td><td>添加xxx字段值不为value的模糊查询条件</td></tr><tr><td>criteria.andXxxBetween(value1,value2)</td><td>添加xxx字段值在value1和value2之间条件</td></tr><tr><td>criteria.andXxxNotBetween(value1,value2)</td><td>添加xxx字段值不在value1和value2之间条件</td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-Mabtis逆向工程&quot;&gt;&lt;a href=&quot;#Spring-Mabtis逆向工程&quot; class=&quot;headerlink&quot; title=&quot;Spring-Mabtis逆向工程&quot;&gt;&lt;/a&gt;Spring-Mabtis逆向工程&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;问题
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot-Maven-Plugin</title>
    <link href="http://yoursite.com/2021/05/14/Spring-Boot-Maven-Plugin/"/>
    <id>http://yoursite.com/2021/05/14/Spring-Boot-Maven-Plugin/</id>
    <published>2021-05-14T13:38:28.000Z</published>
    <updated>2021-05-14T13:43:32.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-boot-maven-plugin"><a href="#spring-boot-maven-plugin" class="headerlink" title="spring-boot-maven-plugin"></a>spring-boot-maven-plugin</h2><p>springboot框架提供了一套自己的打包机制，是通过spring-boot-maven-plugin插件来实现的。</p><h3 id="1、spring-boot-maven-plugin引入pom"><a href="#1、spring-boot-maven-plugin引入pom" class="headerlink" title="1、spring-boot-maven-plugin引入pom"></a>1、spring-boot-maven-plugin引入pom</h3><p>对于新建的一个springboot项目来说，pom中会加入插件：<br><img src="/2021/05/14/Spring-Boot-Maven-Plugin/1.png" alt="maven"><br>通过idea可以看到maven中包含了spring-boot-maven-plugin插件：<br><img src="/2021/05/14/Spring-Boot-Maven-Plugin/2.png" alt="maven"></p><ul><li>build-info：生成项目的构建信息文件 build-info.properties</li><li>repackage：这个是默认 goal，在 mvn package 执行之后，这个命令再次打包生成可执行的 jar，同时将 mvn package 生成的 jar 重命名为 *.origin</li><li>run：这个可以用来运行 Spring Boot 应用</li><li>start：这个在 mvn integration-test 阶段，进行 Spring Boot 应用生命周期的管理</li><li>stop：这个在 mvn integration-test 阶段，进行 Spring Boot 应用生命周期的管理<h3 id="2、执行打包命令"><a href="#2、执行打包命令" class="headerlink" title="2、执行打包命令"></a>2、执行打包命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mvn clean package</span></pre></td></tr></table></figure>或通过开发工具，如idea执行clean和package命令，View-&gt;Tool Windows-&gt;Maven<br><img src="/2021/05/14/Spring-Boot-Maven-Plugin/3.png" alt="maven"><br>可以生成jar包，使用java -jar xxxxx.jar启动<h3 id="3、jar内部结构"><a href="#3、jar内部结构" class="headerlink" title="3、jar内部结构"></a>3、jar内部结构</h3>解压jar文件，可以获取到如下结构：<br><img src="/2021/05/14/Spring-Boot-Maven-Plugin/4.png" alt="maven"><br>其中BOOT-INF主要是一些启动信息，包含classes和lib文件，classes文件放的是项目里生成的字节文件class和配置文件，lib文件是项目所需要的jar依赖。<br><strong>下面的POM代码段显示了如何控制在uber JAR中应该包含/排除哪些项目依赖关系：</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;project&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  &lt;build&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &lt;plugins&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      &lt;plugin&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        &lt;artifactId&gt;maven-shade-plugin&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        &lt;version&gt;3.0.0&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &lt;executions&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">          &lt;execution&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            &lt;phase&gt;package&lt;&#x2F;phase&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            &lt;goals&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">              &lt;goal&gt;shade&lt;&#x2F;goal&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            &lt;&#x2F;goals&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            &lt;configuration&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">              &lt;artifactSet&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                &lt;excludes&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                  &lt;exclude&gt;classworlds:classworlds&lt;&#x2F;exclude&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                  &lt;exclude&gt;junit:junit&lt;&#x2F;exclude&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                  &lt;exclude&gt;jmock:*&lt;&#x2F;exclude&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                  &lt;exclude&gt;*:xml-apis&lt;&#x2F;exclude&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                  &lt;exclude&gt;org.apache.maven:lib:tests&lt;&#x2F;exclude&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                  &lt;exclude&gt;log4j:log4j:jar:&lt;&#x2F;exclude&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                &lt;&#x2F;excludes&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">              &lt;&#x2F;artifactSet&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            &lt;&#x2F;configuration&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">          &lt;&#x2F;execution&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        &lt;&#x2F;executions&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      &lt;&#x2F;plugin&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    &lt;&#x2F;plugins&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  &lt;&#x2F;build&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;project&gt;</span></pre></td></tr></table></figure><a href="https://developer.aliyun.com/article/632130" target="_blank" rel="noopener">参考资料</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;spring-boot-maven-plugin&quot;&gt;&lt;a href=&quot;#spring-boot-maven-plugin&quot; class=&quot;headerlink&quot; title=&quot;spring-boot-maven-plugin&quot;&gt;&lt;/a&gt;spring-boot-ma
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Compute-Network-RDP</title>
    <link href="http://yoursite.com/2021/05/09/Compute-Network-RDP/"/>
    <id>http://yoursite.com/2021/05/09/Compute-Network-RDP/</id>
    <published>2021-05-09T11:16:58.000Z</published>
    <updated>2021-05-09T11:29:50.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="远程桌面-RDP"><a href="#远程桌面-RDP" class="headerlink" title="远程桌面(RDP)"></a>远程桌面(RDP)</h2><h3 id="RDP介绍"><a href="#RDP介绍" class="headerlink" title="RDP介绍"></a>RDP介绍</h3><p>RDP 基于 T-120 系列协议标准，是该协议的扩展。 支持多通道的协议允许单独的虚拟通道用于传输以下信息：</p><ul><li>演示文稿数据</li><li>串行设备通信</li><li>许可信息</li><li>高度加密的数据，如键盘、鼠标活动</li></ul><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>用于终端服务器和终端服务器客户端之间的通信。RDP 旨在支持许多不同类型的网络拓扑，例如 ISDN、POTS。 RDP 还设计用于支持许多 LAN 协议，例如 IPX、NetBIOS、TCP/IP。 当前版本的 RDP 将仅通过 TCP/IP 运行。 通过客户反馈，以后的版本中可能会添加其他协议支持。<br>通过 RDP 堆栈发送和接收数据所涉及的活动基本上与当今常见 LAN 网络七层 OSI 模型标准相同。 要传输的应用程序或服务的数据通过协议堆栈向下传递。 它经过分节，通过 MCS (定向到) 、加密、封装、帧、打包到网络协议，最后通过线路寻址并发送到客户端。 返回的数据的工作方式仅相反。 数据包将去除其地址，然后解包、解密等。 最后，数据呈现给应用程序供使用。 协议堆栈修改的关键部分发生在第四层和第七层之间，其中数据为：</p><ul><li>encrypted</li><li>已封装</li><li>framed</li><li>定向到频道</li><li>已设置优先级</li></ul><h3 id="RDP历程"><a href="#RDP历程" class="headerlink" title="RDP历程"></a>RDP历程</h3><p>windows从NT开始提供终端服务，它是微软买来的网络协议技术(Citrix)，服务器端要安装、配置以供客户端连接使用。终端服务使任何一台有权限的终端机，用已知的账号登录服务器，可以使用账号内的资源，包括软件，硬件资源；同时，在协议升级后，客户端连接后可以使用本地的资源，包括本地打印机、声音本地回放，本地磁盘资源和本地硬件接口。所有的计算都在服务器端进行，客户端只需要处理网络连接、接收数据、界面显示和设备数据输出。</p><h3 id="RDP协议层次"><a href="#RDP协议层次" class="headerlink" title="RDP协议层次"></a>RDP协议层次</h3><div class="table-container"><table><thead><tr><th>层次名称</th><th>描述</th></tr></thead><tbody><tr><td>网络连接层</td><td>RDP协议建立在TCP/IP协议之上，由于传输的数据量比较大，因此在协议的底层首先定义一层网络连接层。它定义了一个完整的RDP数据逻辑包，以避免由于网络包长度过长而被分割使数据丢失。</td></tr><tr><td>ISO数据层</td><td>在网络连接层之上是ISO数据层，它表示RDP数据的正常连接通信。</td></tr><tr><td>虚拟通道层</td><td>在ISO数据层之上，RDP协议定义一个虚拟通道层，用以拆分标示不同虚拟通道的数据，加快客户端处理速度，节省占用网络接口的时间。</td></tr><tr><td>加密解密层</td><td>在虚拟通道层之上，RDP定义一个数据加密解密层。此层用于对所有的功能数据进行加密、解密处理。</td></tr><tr><td>功能数据层</td><td>在加密解密层之上是功能数据，画面信息，本地资源转换，声音数据，打印数据等所有的功能数据信息都在此层进行处理。另外，根据数据类型的不同，这些数据都有各自不同层次的分割，他们的内部层次结构将在各个功能模块中进行阐述。</td></tr></tbody></table></div><p><strong>连接过程</strong></p><ol><li>客户端连接服务器</li><li>ISO数据层建立连接</li><li>发送初始协议相关信息，接受加密、解密密钥</li><li>虚拟通道申请</li><li>加密形式发送客户端系统信息，同时验证加密协议</li><li>平台软件证书验证</li><li>各功能建立连接，各功能数据传输，功能实现</li></ol><h3 id="RDP个模块说明"><a href="#RDP个模块说明" class="headerlink" title="RDP个模块说明"></a>RDP个模块说明</h3><ol><li>ISO连接模块:在客户端与服务器的网络套接口建立之后，需要首先建立RDP协议底层连接，得到连接确认后才能正常通信。</li><li>协议信息初始模块:当基本的RDP连接建立后，需要进行客户端与服务器的系统环境、RDP连接环境的信息交流与连接确认。</li><li>通道申请模块:各种功能数据都是通过单独的虚拟通道传输的。初始连接后，在进一步的信息通信之前，需要开辟相应的通道<ul><li>根据当前我们所掌握的信息，RDP协议将图像信息、声音信息、设备信息、剪贴板内容都各自以单一的虚拟通道进行传送，而打印机映射，磁盘映射，端口映射都做为设备信息的内容进行处理</li></ul></li><li>系统初始连接模块:当通道申请各部分通过后，开始系统登录的初始连接。从此数据包开始,所以虚拟通道层以上的网络数据都需要加密。</li><li>图形连接模块:在图形数据发送之前，服务器需要对此功能模块验证，验证内容是所有与图形相关的信息，包括鼠标设置、键盘输入、字体类型、画图命令格式、图形显示的各种类型。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;远程桌面-RDP&quot;&gt;&lt;a href=&quot;#远程桌面-RDP&quot; class=&quot;headerlink&quot; title=&quot;远程桌面(RDP)&quot;&gt;&lt;/a&gt;远程桌面(RDP)&lt;/h2&gt;&lt;h3 id=&quot;RDP介绍&quot;&gt;&lt;a href=&quot;#RDP介绍&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Compute-Network" scheme="http://yoursite.com/categories/Compute-Network/"/>
    
    
      <category term="Compute-Network" scheme="http://yoursite.com/tags/Compute-Network/"/>
    
  </entry>
  
  <entry>
    <title>Spring-WebSocket</title>
    <link href="http://yoursite.com/2021/05/09/Spring-WebSocket/"/>
    <id>http://yoursite.com/2021/05/09/Spring-WebSocket/</id>
    <published>2021-05-09T11:13:31.000Z</published>
    <updated>2021-05-09T11:50:05.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><h3 id="为什么需要WebSocket"><a href="#为什么需要WebSocket" class="headerlink" title="为什么需要WebSocket"></a>为什么需要WebSocket</h3><ol><li>HTTP 协议是一种无状态的、无连接的、单向的应用层协议。它采用了请求/响应模型。通信请求只能由客户端发起，服务端对请求做出应答处理。这种通信模型有一个弊端：HTTP 协议无法实现服务器主动向客户端发起消息。</li><li>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</li><li>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</li><li>HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。</li><li>浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。</li></ol><h3 id="WebSocket与Html的对比"><a href="#WebSocket与Html的对比" class="headerlink" title="WebSocket与Html的对比"></a>WebSocket与Html的对比</h3><ul><li>WebSocket是一种通信协议，区别于HTTP协议，HTTP协议只能实现客户端请求，服务端响应的这种单项通信。</li><li>现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</li></ul><h3 id="几种与服务端实时通信的方法"><a href="#几种与服务端实时通信的方法" class="headerlink" title="几种与服务端实时通信的方法"></a>几种与服务端实时通信的方法</h3><p>在不使用WebSocket与服务器实时交互时，一般，使用AJAX轮询和Long Polling长轮询<br>AJAX轮询也就是定时发送请求，也就是普通的客户端与服务端通信过程。每次都需要新建连接，服务器响应后连接关闭，十分的耗费资源。Long Polling长轮询在服务端带有阻塞。客户端发起一个Long Polling,服务端如果没有数据返回的话，会blocking住请求，等有数据时返回给客户端，单次连接结束。客户端在向服务端建立连接。重复。。。<br><img src="/2021/05/09/Spring-WebSocket/1.png" alt="WebSocket"></p><h3 id="WebSocket连接过程"><a href="#WebSocket连接过程" class="headerlink" title="WebSocket连接过程"></a>WebSocket连接过程</h3><p>客户端发起HTTP握手，告诉服务端进行WebSocket协议通讯，并告知WebSocket协议版本。服务端确认协议版本，升级为WebSocket协议。之后如果有数据需要推送，会主动推送给客户端。<br>连接开始时，客户端使用HTTP协议和服务端升级协议，升级完成后，后续数据交换遵循WebSocket协议。我们看看Request Headers<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Accept-Encoding: gzip, deflate, br</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Accept-Language: zh,zh-TW;q&#x3D;0.9,en-US;q&#x3D;0.8,en;q&#x3D;0.7,zh-CN;q&#x3D;0.6</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Cache-Control: no-cache</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Connection: Upgrade</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Host: 127.0.0.1:3000</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">Origin: http:&#x2F;&#x2F;localhost:3000</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">Pragma: no-cache</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">Sec-WebSocket-Key: bwb9SFiJONXhQ&#x2F;A4pLaXIg&#x3D;&#x3D;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">Sec-WebSocket-Version: 13</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">Upgrade: websocket</span></pre></td></tr></table></figure><br>重点的描述信息：</p><ul><li>Connection: Upgrade 表示要升级协议</li><li>Upgrade: websocket 要升级协议到websocket协议</li><li>Sec-WebSocket-Version 表示websocket的版本。如果服务端不支持该版本，需要返回一个Sec-WebSocket-Versionheader，里面包含服务端支持的版本号。</li><li>Sec-WebSocket-Key 对应服务端响应头的Sec-WebSocket-Accept，由于没有同源限制，websocket客户端可任意连接支持websocket的服务。这个就相当于一个钥匙一把锁，避免多余的，无意义的连接。</li></ul><p>服务端响应：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Connection: Upgrade</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Sec-WebSocket-Accept: 2jrbCWSCPlzPtxarlGTp4Y8XD20&#x3D;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Upgrade: websocket</span></pre></td></tr></table></figure></p><ul><li>Sec-WebSocket-Accept: 用来告知客服端，服务器愿意发起一个websocket连接， 值根据客户端请求头的Sec-WebSocket-Key计算出来</li></ul><h3 id="WebSocket的用法"><a href="#WebSocket的用法" class="headerlink" title="WebSocket的用法"></a>WebSocket的用法</h3><p>当你获取 Web Socket 连接后，你可以通过<strong>send()</strong>方法来向服务器发送数据，并通过<strong>onmessage</strong>事件来接收服务器返回的数据。WebSocket 对象提供了用于创建和管理 WebSocket 连接，以及可以通过该连接发送和接收数据的 API。<br>使用 WebSocket() 构造函数来构造一个 WebSocket。</p><p>构造函数: WebSocket(url[, protocols]),返回一个WebSocket对象。</p><div class="table-container"><table><thead><tr><th>Constant</th><th>Value</th><th>解释</th></tr></thead><tbody><tr><td>WebSocket.CONNECTING</td><td>0</td><td>表示连接尚未建立</td></tr><tr><td>WebSocket.OPEN</td><td>1</td><td>表示连接已建立，可以进行通信</td></tr><tr><td>WebSocket.CLOSING</td><td>2</td><td>表示连接正在进行关闭</td></tr><tr><td>WebSocket.CLOSED</td><td>3</td><td>表示连接已经关闭或者连接不能打开</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>WebSocket.binaryType</td><td>使用二进制的数据类型连接</td></tr><tr><td>WebSocket.bufferedAmount</td><td>未发送至服务器的字节数</td></tr><tr><td>WebSocket.extensions</td><td>服务器选择的扩展</td></tr><tr><td>WebSocket.onclose</td><td>用于指定连接关闭后的回调函数</td></tr><tr><td>WebSocket.onerror</td><td>用于指定连接失败后的回调函数</td></tr><tr><td>WebSocket.onmessage</td><td>用于指定当从服务器接受到信息时的回调函数</td></tr><tr><td>WebSocket.onopen</td><td>用于指定连接成功后的回调函数</td></tr><tr><td>WebSocket.protocol</td><td>服务器选择的下属协议(只读)</td></tr><tr><td>WebSocket.readyState</td><td>当前的链接状态只读)</td></tr><tr><td>WebSocket.url</td><td>WebSocket 的绝对路径只读)</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>WebSocket.close([code[, reason]])</td><td>关闭当前链接</td></tr><tr><td>WebSocket.send(data)</td><td>对要传输的数据进行排队</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>事件</th><th>事件处理程序</th><th>描述</th></tr></thead><tbody><tr><td>open</td><td>Socket.onopen</td><td>连接建立时触发</td></tr><tr><td>message</td><td>Socket.onmessage</td><td>客户端接收服务端数据时触发</td></tr><tr><td>error</td><td>Socket.onerror</td><td>通信发生错误时触发</td></tr><tr><td>close</td><td>Socket.onclose</td><td>连接关闭时触发</td></tr></tbody></table></div><p><em>也可以使用addEventListener()来监听上面的事件</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Create WebSocket connection.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">const socket &#x3D; new WebSocket(&#39;ws:&#x2F;&#x2F;localhost:8080&#39;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Connection opened</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">socket.addEventListener(&#39;open&#39;, function (event) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    socket.send(&#39;Hello Server!&#39;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Listen for messages</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">socket.addEventListener(&#39;message&#39;, function (event) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    console.log(&#39;Message from server &#39;, event.data);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure></p><h3 id="WebSocket实例"><a href="#WebSocket实例" class="headerlink" title="WebSocket实例"></a>WebSocket实例</h3><p>WebSocket 协议本质上是一个基于 TCP 的协议。</p><p>为了建立一个 WebSocket 连接，客户端浏览器首先要向服务器发起一个 HTTP 请求，这个请求和通常的 HTTP 请求不同，包含了一些附加头信息，其中附加头信息”Upgrade: WebSocket”表明这是一个申请协议<strong>升级</strong>的 HTTP 请求，服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的 WebSocket 连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接。</p><h3 id="客户端的HTML和JavaScript"><a href="#客户端的HTML和JavaScript" class="headerlink" title="客户端的HTML和JavaScript"></a>客户端的HTML和JavaScript</h3><p>目前大部分浏览器支持 WebSocket() 接口，你可以在以下浏览器中尝试实例： Chrome, Mozilla, Opera 和 Safari。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   &lt;head&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   &lt;title&gt;菜鸟教程(runoob.com)&lt;&#x2F;title&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">         function WebSocketTest()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">         &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            if (&quot;WebSocket&quot; in window)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">               alert(&quot;您的浏览器支持 WebSocket!&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">               </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">               &#x2F;&#x2F; 打开一个 web socket</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">               var ws &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;localhost:9998&#x2F;echo&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">               ws.onopen &#x3D; function()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">               &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                  &#x2F;&#x2F; Web Socket 已连接上，使用 send() 方法发送数据</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                  ws.send(&quot;发送数据&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                  alert(&quot;数据发送中...&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">               &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">               ws.onmessage &#x3D; function (evt) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">               &#123; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">                  var received_msg &#x3D; evt.data;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">                  alert(&quot;数据已接收...&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">               &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">                </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">               ws.onclose &#x3D; function()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">               &#123; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">                  &#x2F;&#x2F; 关闭 websocket</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">                  alert(&quot;连接已关闭...&quot;); </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">               &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">            else</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">               &#x2F;&#x2F; 浏览器不支持 WebSocket</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">               alert(&quot;您的浏览器不支持 WebSocket!&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">         &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">      &lt;&#x2F;script&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">   &lt;&#x2F;head&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">   &lt;body&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">      &lt;div id&#x3D;&quot;sse&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">         &lt;a href&#x3D;&quot;javascript:WebSocketTest()&quot;&gt;运行 WebSocket&lt;&#x2F;a&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">      &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">   &lt;&#x2F;body&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;html&gt;</span></pre></td></tr></table></figure></p><h3 id="Spring中WebSocket的使用"><a href="#Spring中WebSocket的使用" class="headerlink" title="Spring中WebSocket的使用"></a>Spring中WebSocket的使用</h3><p>1、添加jar包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  &lt;artifactId&gt;spring-websocket&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr></table></figure><br>2、如何使用WebSocket<br>2.1 创建WebSocket处理器<br>扩展<strong>TextWebSocketHandler</strong>或<strong>BinaryWebSocketHandler</strong>,或实现<strong>WebSocketHandler</strong>,覆盖指定的方法。Spring在收到WebSocket事件时，会自动调用事件对应的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">import org.springframework.web.socket.WebSocketHandler;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">import org.springframework.web.socket.WebSocketSession;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">import org.springframework.web.socket.TextMessage;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">public class MyHandler extends TextWebSocketHandler &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    public void handleTextMessage(WebSocketSession session, TextMessage message) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &#x2F;&#x2F; ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">public interface WebSocketHandler &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">   &#x2F;**</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    * 建立连接后触发的回调</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    *&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">   void afterConnectionEstablished(WebSocketSession session) throws Exception;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">   &#x2F;**</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    * 收到消息时触发的回调</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    *&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">   void handleMessage(WebSocketSession session, WebSocketMessage&lt;?&gt; message) throws Exception;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">   &#x2F;**</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    * 传输消息出错时触发的回调</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    *&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">   void handleTransportError(WebSocketSession session, Throwable exception) throws Exception;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">   &#x2F;**</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    * 断开连接后触发的回调</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    *&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">   void afterConnectionClosed(WebSocketSession session, CloseStatus closeStatus) throws Exception;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">   &#x2F;**</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    * 是否处理分片消息</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    *&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">   boolean supportsPartialMessages();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>2.2 配置WebSocket<br>两种方式：注解和xml,作用是将WebSocket处理器添加到注册中心<br>1、注解的方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">import org.springframework.web.socket.config.annotation.EnableWebSocket;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">import org.springframework.web.socket.config.annotation.WebSocketConfigurer;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">@Configuration</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">@EnableWebSocket</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">public class WebSocketConfig implements WebSocketConfigurer &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        registry.addHandler(myHandler(), &quot;&#x2F;myHandler&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    @Bean</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    public WebSocketHandler myHandler() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        return new MyHandler();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>2、xml方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    xmlns:websocket&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;websocket&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    xsi:schemaLocation&#x3D;&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;websocket</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;websocket&#x2F;spring-websocket.xsd&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &lt;websocket:handlers&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &lt;websocket:mapping path&#x3D;&quot;&#x2F;myHandler&quot; handler&#x3D;&quot;myHandler&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &lt;&#x2F;websocket:handlers&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &lt;bean id&#x3D;&quot;myHandler&quot; class&#x3D;&quot;org.springframework.samples.MyHandler&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;beans&gt;</span></pre></td></tr></table></figure><br><strong>重点:在启动类中添加注解@EnableWebSocket</strong></p><p><a href="https://www.runoob.com/html/html5-websocket.html" target="_blank" rel="noopener">reference</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WebSocket&quot;&gt;&lt;a href=&quot;#WebSocket&quot; class=&quot;headerlink&quot; title=&quot;WebSocket&quot;&gt;&lt;/a&gt;WebSocket&lt;/h2&gt;&lt;h3 id=&quot;为什么需要WebSocket&quot;&gt;&lt;a href=&quot;#为什么需要WebSoc
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Spring-MVC</title>
    <link href="http://yoursite.com/2021/05/09/Spring-MVC/"/>
    <id>http://yoursite.com/2021/05/09/Spring-MVC/</id>
    <published>2021-05-09T11:13:23.000Z</published>
    <updated>2021-05-09T11:44:40.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVC设计概述"><a href="#MVC设计概述" class="headerlink" title="MVC设计概述"></a>MVC设计概述</h2><p>在早期 Java Web 的开发中，统一把显示层、控制层、数据层的操作全部交给 JSP 或者 JavaBean 来进行处理，我们称之为 Model1：<br><img src="/2021/05/09/Spring-MVC/m1.png" alt="mvc"></p><ul><li><strong>出现的弊端：</strong></li><li>SP 和 Java Bean 之间严重耦合，Java 代码和 HTML 代码也耦合在了一起</li><li>要求开发者不仅要掌握 Java ，还要有高超的前端水平</li><li>前端和后端相互依赖，前端需要等待后端完成，后端也依赖前端完成，才能进行有效的测试</li><li>代码难以复用<br>正因为上面的种种弊端，所以很快这种方式就被 Servlet + JSP + Java Bean 所替代了，早期的 MVC 模型（Model2）如下图：<br><img src="/2021/05/09/Spring-MVC/2.png" alt="mvc"><br>首先用户的请求会到达 Servlet，然后根据请求调用相应的 Java Bean，并把所有的显示结果交给 JSP 去完成，这样的模式我们就称为 MVC 模式<br><strong>M 代表 模型（Model）</strong><br>  模型是什么呢？ 模型就是数据，就是 dao,bean<br><strong>V 代表 视图（View）</strong><br>  视图是什么呢？ 就是网页, JSP，用来展示模型中的数据<br><strong>C 代表 控制器（controller)</strong><br>  控制器是什么？ 控制器的作用就是把不同的数据(Model)，显示在不同的视图(View)上，Servlet 扮演的就是这样的角色<h3 id="Spring-MVC-的架构"><a href="#Spring-MVC-的架构" class="headerlink" title="Spring MVC 的架构"></a>Spring MVC 的架构</h3>为解决持久层中一直未处理好的数据库事务的编程，又为了迎合 NoSQL 的强势崛起，Spring MVC 给出了方案：<br><img src="/2021/05/09/Spring-MVC/3.png" alt="mvc"><br><strong>传统的模型层被拆分为了业务层(Service)和数据访问层（DAO,Data Access Object）</strong>。 在 Service 下可以通过 Spring 的声明式事务操作数据访问层，而在service上还允许我们访问 NoSQL，这样就能够满足异军突起的 NoSQL 的使用了，它可以大大提高互联网系统的性能。<br><strong>优点：</strong>1、结构松散，几乎可以在 Spring MVC 中使用各类视图；2、松耦合，各个模块分离；3、与 Spring 无缝集成<h3 id="创建一个Spring-MVC-demo"><a href="#创建一个Spring-MVC-demo" class="headerlink" title="创建一个Spring MVC demo"></a>创建一个Spring MVC demo</h3><h4 id="第一步：在-IDEA-中新建-Spring-MVC-项目"><a href="#第一步：在-IDEA-中新建-Spring-MVC-项目" class="headerlink" title="第一步：在 IDEA 中新建 Spring MVC 项目"></a>第一步：在 IDEA 中新建 Spring MVC 项目</h4><strong>根据IDEA的不同版本会有不同的创建方式</strong><br>1、IDEA2020的创建方式：File-&gt;New-&gt;Project-&gt;Java-&gt;Next-&gt;Next-&gt;Project name-&gt;Finish<br>2、添加Spring MVC,右击工程名-&gt;Add Framework Support-&gt;Spring-&gt;Spring MVC-&gt;Download-&gt;OK<br><img src="/2021/05/09/Spring-MVC/4-0.png" alt="mvc"><br><img src="/2021/05/09/Spring-MVC/4-1.png" alt="mvc"><br>3、会多出一个lib文件夹(存放Spring MVC的依赖包)和web文件夹<br><img src="/2021/05/09/Spring-MVC/4-2.png" alt="mvc"><br>4、点击idea的File=&gt;选择项目结构（Project Structure）-&gt;点击Artifacts=&gt;Fix(在右下角)-&gt;add以下两个依赖<br><img src="/2021/05/09/Spring-MVC/5-1.png" alt="mvc"><br>5、都添加完之后：Fix会消失，最后一定要点击Apply然后点击ok即可<br>6、添加成功后：项目目录会多出两个配置文件<br><img src="/2021/05/09/Spring-MVC/5-2.png" alt="mvc"><br>目录结构为：<br><img src="/2021/05/09/Spring-MVC/6.png" alt="mvc"><h4 id="第二步：修改-web-xml"><a href="#第二步：修改-web-xml" class="headerlink" title="第二步：修改 web.xml"></a>第二步：修改 web.xml</h4><img src="/2021/05/09/Spring-MVC/7.png" alt="mvc"><br>把<url-pattern>元素的值改为 / ，表示要拦截所有的请求，并交由Spring MVC的后台控制器来处理<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;servlet-name&gt;dispatcher&lt;&#x2F;servlet-name&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;servlet-mapping&gt;</span></pre></td></tr></table></figure><h4 id="第三步：编辑-dispatcher-servlet-xml"><a href="#第三步：编辑-dispatcher-servlet-xml" class="headerlink" title="第三步：编辑 dispatcher-servlet.xml"></a>第三步：编辑 dispatcher-servlet.xml</h4>这个文件名的开头dispatcher 与上面web.xml中的<servlet-name>元素配置的dispatcher对应，这是Spring MVC的映射配置文件（xxx-servlet.xml），我们编辑如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &lt;bean id&#x3D;&quot;simpleUrlHandlerMapping&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">          class&#x3D;&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;mappings&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            &lt;props&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                &lt;!-- &#x2F;hello 路径的请求交给 id 为 helloController 的控制器处理--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                &lt;prop key&#x3D;&quot;&#x2F;hello&quot;&gt;helloController&lt;&#x2F;prop&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            &lt;&#x2F;props&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        &lt;&#x2F;property&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &lt;&#x2F;bean&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &lt;bean id&#x3D;&quot;helloController&quot; class&#x3D;&quot;controller.HelloController&quot;&gt;&lt;&#x2F;bean&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;beans&gt;</span></pre></td></tr></table></figure><h4 id="第四步：编写-HelloController"><a href="#第四步：编写-HelloController" class="headerlink" title="第四步：编写 HelloController"></a>第四步：编写 HelloController</h4>在 Package【controller】下创建 【HelloController】类，并实现 org.springframework.web.servlet.mvc.Controller 接口：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">package controller;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">import org.springframework.web.servlet.ModelAndView;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">import org.springframework.web.servlet.mvc.Controller;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">public class HelloController implements Controller&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    public ModelAndView handleRequest(javax.servlet.http.HttpServletRequest httpServletRequest, javax.servlet.http.HttpServletResponse httpServletResponse) throws Exception &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        return null;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>Spring MVC 通过 ModelAndView 对象把模型和视图结合在一起<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">package controller;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">import org.springframework.web.servlet.ModelAndView;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">import org.springframework.web.servlet.mvc.Controller;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">public class HelloController implements Controller &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    public ModelAndView handleRequest(javax.servlet.http.HttpServletRequest httpServletRequest, javax.servlet.http.HttpServletResponse httpServletResponse) throws Exception &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        ModelAndView mav &#x3D; new ModelAndView(&quot;index.jsp&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        mav.addObject(&quot;message&quot;, &quot;Hello Spring MVC&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        return mav;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>这里表示视图的是index.jsp，模型数据的是 message，内容是 “Hello Spring MVC”<h4 id="第五步：准备-index-jsp"><a href="#第五步：准备-index-jsp" class="headerlink" title="第五步：准备 index.jsp"></a>第五步：准备 index.jsp</h4>将 index.jsp 的内容修改为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    pageEncoding&#x3D;&quot;UTF-8&quot; isELIgnored&#x3D;&quot;false&quot;%&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;$&#123;message&#125;&lt;&#x2F;h1&gt;</span></pre></td></tr></table></figure><h4 id="第六步：部署-Tomcat-及相关环境"><a href="#第六步：部署-Tomcat-及相关环境" class="headerlink" title="第六步：部署 Tomcat 及相关环境"></a>第六步：部署 Tomcat 及相关环境</h4>在【Run】菜单项下找到【Edit Configurations】<br><img src="/2021/05/09/Spring-MVC/8.png" alt="mvc"><br>配置 Tomcat 环境：<br><img src="/2021/05/09/Spring-MVC/9.png" alt="mvc"><br>选择好本地的 Tomcat 服务器，并改好名字：<br><img src="/2021/05/09/Spring-MVC/10.png" alt="mvc"><br>在 Deployment 标签页下完成如下操作：<br><img src="/2021/05/09/Spring-MVC/11.png" alt="mvc"><h4 id="第七步：重启服务器"><a href="#第七步：重启服务器" class="headerlink" title="第七步：重启服务器"></a>第七步：重启服务器</h4>重启服务器，输入地址：localhost/hello<br><img src="/2021/05/09/Spring-MVC/12.png" alt="mvc"><h3 id="跟踪-Spring-MVC-的请求"><a href="#跟踪-Spring-MVC-的请求" class="headerlink" title="跟踪 Spring MVC 的请求"></a>跟踪 Spring MVC 的请求</h3>每当用户在 Web 浏览器中点击链接或者提交表单的时候，请求就开始工作了，像是邮递员一样，从离开浏览器开始到获取响应返回，它会经历很多站点，在每一个站点都会留下一些信息同时也会带上其他信息，下图为 Spring MVC 的请求流程<br><img src="/2021/05/09/Spring-MVC/13.png" alt="mvc"><br><img src="/2021/05/09/Spring-MVC/00.png" alt="mvc"><h4 id="第一站：DispatcherServlet"><a href="#第一站：DispatcherServlet" class="headerlink" title="第一站：DispatcherServlet"></a>第一站：DispatcherServlet</h4>从请求离开浏览器以后，第一站到达的就是 DispatcherServlet，看名字这是一个 Servlet，通过 J2EE 的学习，我们知道 Servlet 可以拦截并处理 HTTP 请求，DispatcherServlet 会拦截所有的请求，并且将这些请求发送给 Spring MVC 控制器。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    &lt;servlet-name&gt;dispatcher&lt;&#x2F;servlet-name&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;servlet&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &lt;servlet-name&gt;dispatcher&lt;&#x2F;servlet-name&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &lt;!-- 拦截所有的请求 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;servlet-mapping&gt;</span></pre></td></tr></table></figure><strong>DispatcherServlet 的任务就是拦截请求发送给 Spring MVC 控制器。</strong><h4 id="第二站：处理器映射（HandlerMapping）"><a href="#第二站：处理器映射（HandlerMapping）" class="headerlink" title="第二站：处理器映射（HandlerMapping）"></a>第二站：处理器映射（HandlerMapping）</h4><strong>问题：</strong>典型的应用程序中可能会有多个控制器，这些请求到底应该发给哪一个控制器呢？<br>所以 DispatcherServlet 会查询一个或多个处理器映射来确定请求的下一站在哪里，处理器映射会根据请求所携带的 URL 信息来进行决策，例如上面的例子中，我们通过配置 simpleUrlHandlerMapping 来将 /hello 地址交给 helloController 处理：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;simpleUrlHandlerMapping&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">      class&#x3D;&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    &lt;property name&#x3D;&quot;mappings&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        &lt;props&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            &lt;!-- &#x2F;hello 路径的请求交给 id 为 helloController 的控制器处理--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            &lt;prop key&#x3D;&quot;&#x2F;hello&quot;&gt;helloController&lt;&#x2F;prop&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        &lt;&#x2F;props&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &lt;&#x2F;property&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;bean&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;helloController&quot; class&#x3D;&quot;controller.HelloController&quot;&gt;&lt;&#x2F;bean&gt;</span></pre></td></tr></table></figure><h4 id="第三站：控制器"><a href="#第三站：控制器" class="headerlink" title="第三站：控制器"></a>第三站：控制器</h4>一旦选择了合适的控制器， DispatcherServlet 会将请求发送给选中的控制器，到了控制器，请求会卸下其负载（用户提交的请求）等待控制器处理完这些信息：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">public ModelAndView handleRequest(javax.servlet.http.HttpServletRequest httpServletRequest, javax.servlet.http.HttpServletResponse httpServletResponse) throws Exception &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    &#x2F;&#x2F; 处理逻辑</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    ....</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="第四站：返回-DispatcherServlet"><a href="#第四站：返回-DispatcherServlet" class="headerlink" title="第四站：返回 DispatcherServlet"></a>第四站：返回 DispatcherServlet</h4>当控制器在完成逻辑处理后，通常会产生一些信息，这些信息就是需要返回给用户并在浏览器上显示的信息，它们被称为模型（Model）。仅仅返回原始的信息时不够的——这些信息需要以用户友好的方式进行格式化，一般会是 HTML，所以，信息需要发送给一个视图（view），通常会是 JSP。<br>控制器所做的最后一件事就是将模型数据打包，并且表示出用于渲染输出的视图名（逻辑视图名）。它接下来会将请求连同模型和视图名发送回 DispatcherServlet。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">public ModelAndView handleRequest(javax.servlet.http.HttpServletRequest httpServletRequest, javax.servlet.http.HttpServletResponse httpServletResponse) throws Exception &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    &#x2F;&#x2F; 处理逻辑</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    ....</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#x2F;&#x2F; 返回给 DispatcherServlet</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    return mav;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="第五站：视图解析器"><a href="#第五站：视图解析器" class="headerlink" title="第五站：视图解析器"></a>第五站：视图解析器</h4>这样以来，控制器就不会和特定的视图相耦合，传递给 DispatcherServlet 的视图名并不直接表示某个特定的 JSP。（实际上，它甚至不能确定视图就是 JSP）相反，它传递的仅仅是一个逻辑名称，这个名称将会用来查找产生结果的真正视图。<br>DispatcherServlet 将会使用视图解析器（view resolver）来将逻辑视图名匹配为一个特定的视图实现，它可能是也可能不是 JSP<blockquote><p>上面的例子是直接绑定到了 index.jsp 视图</p><h4 id="第六站：视图"><a href="#第六站：视图" class="headerlink" title="第六站：视图"></a>第六站：视图</h4><p>它的最后一站是视图的实现，在这里它交付模型数据，请求的任务也就完成了。视图使用模型数据渲染出结果，这个输出结果会通过响应对象传递给客户端。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">         pageEncoding&#x3D;&quot;UTF-8&quot; isELIgnored&#x3D;&quot;false&quot;%&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;$&#123;message&#125;&lt;&#x2F;h1&gt;</span></pre></td></tr></table></figure><h3 id="使用注解配置-Spring-MVC"><a href="#使用注解配置-Spring-MVC" class="headerlink" title="使用注解配置 Spring MVC"></a>使用注解配置 Spring MVC</h3><p>上面我们已经对 Spring MVC 有了一定的了解，并且通过 XML 配置的方式创建了第一个 Spring MVC 程序，我们来看看基于注解应该怎么完成上述程序的配置：</p><h4 id="第一步：为-HelloController-添加注解"><a href="#第一步：为-HelloController-添加注解" class="headerlink" title="第一步：为 HelloController 添加注解"></a>第一步：为 HelloController 添加注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">package controller;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">import org.springframework.web.servlet.ModelAndView;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">@Controller</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">public class HelloController&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    @RequestMapping(&quot;&#x2F;hello&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    public ModelAndView handleRequest(javax.servlet.http.HttpServletRequest httpServletRequest, javax.servlet.http.HttpServletResponse httpServletResponse) throws Exception &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        ModelAndView mav &#x3D; new ModelAndView(&quot;index.jsp&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        mav.addObject(&quot;message&quot;, &quot;Hello Spring MVC&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        return mav;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></blockquote></servlet-name></url-pattern></li><li>@Controller 注解：用来声明控制器</li><li>@RequestMapping 注解：表示路径 /hello 会映射到该方法上<h4 id="第二步：取消之前的-XML-注释"><a href="#第二步：取消之前的-XML-注释" class="headerlink" title="第二步：取消之前的 XML 注释"></a>第二步：取消之前的 XML 注释</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &lt;!--&lt;bean id&#x3D;&quot;simpleUrlHandlerMapping&quot;--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                                        &lt;!--class&#x3D;&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;&gt;--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &lt;!--&lt;property name&#x3D;&quot;mappings&quot;&gt;--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            &lt;!--&lt;props&gt;--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                &lt;!--&lt;!&amp;ndash; &#x2F;hello 路径的请求交给 id 为 helloController 的控制器处理&amp;ndash;&gt;--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                &lt;!--&lt;prop key&#x3D;&quot;&#x2F;hello&quot;&gt;helloController&lt;&#x2F;prop&gt;--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            &lt;!--&lt;&#x2F;props&gt;--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &lt;!--&lt;&#x2F;property&gt;--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &lt;!--&lt;&#x2F;bean&gt;--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &lt;!--&lt;bean id&#x3D;&quot;helloController&quot; class&#x3D;&quot;controller.HelloController&quot;&gt;&lt;&#x2F;bean&gt;--&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &lt;!-- 扫描controller下的组件 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;controller&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;beans&gt;</span></pre></td></tr></table></figure>在 dispatcher-servlet.xml 文件中，注释掉之前的配置，然后增加一句组件扫描。<h4 id="第三步：重启服务器"><a href="#第三步：重启服务器" class="headerlink" title="第三步：重启服务器"></a>第三步：重启服务器</h4>浏览器输入:localhost/hello<h3 id="简述Model-gt-View中的View"><a href="#简述Model-gt-View中的View" class="headerlink" title="简述Model-&gt;View中的View"></a>简述Model-&gt;View中的View</h3>对于不同的表示技术，Spring MVC 支持许多类型的视图。这些包括 JSP、HTML、PDF、Excel 工作表、XML、Velocity 模板、XSLT、JSON、Atom 和 RSS 提要、JasperReports 等等。但我们最常使用利用 JSTL 编写的 JSP 模板。一般存放在/WEB-INF/目录下<br>JSP全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以&lt;%开头以%&gt;结束。 JSP标签有多种功能，比如访问数据库、记录用户选择信息、访问JavaBeans组件等，还可以在不同的网页中传递控制信息和共享信息。<br><em>哎，学的不过瘾，待下篇记录前后端交互与jsp的关系吧</em><br><a href="https://www.jianshu.com/p/91a2d0a1e45a" target="_blank" rel="noopener">Spring MVC参考资料</a><br>(Spring MVC安装资料)[<a href="https://blog.csdn.net/qq_36890370/article/details/113815490" target="_blank" rel="noopener">https://blog.csdn.net/qq_36890370/article/details/113815490</a>]</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MVC设计概述&quot;&gt;&lt;a href=&quot;#MVC设计概述&quot; class=&quot;headerlink&quot; title=&quot;MVC设计概述&quot;&gt;&lt;/a&gt;MVC设计概述&lt;/h2&gt;&lt;p&gt;在早期 Java Web 的开发中，统一把显示层、控制层、数据层的操作全部交给 JSP 或者 Jav
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Http-Html-Jsp</title>
    <link href="http://yoursite.com/2021/05/09/Http-Html-Jsp/"/>
    <id>http://yoursite.com/2021/05/09/Http-Html-Jsp/</id>
    <published>2021-05-09T11:09:59.000Z</published>
    <updated>2021-05-09T11:52:36.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前后端交互中的一些宏观知识"><a href="#前后端交互中的一些宏观知识" class="headerlink" title="前后端交互中的一些宏观知识"></a>前后端交互中的一些宏观知识</h2><h3 id="一、浏览器中界面如何渲染"><a href="#一、浏览器中界面如何渲染" class="headerlink" title="一、浏览器中界面如何渲染"></a>一、浏览器中界面如何渲染</h3><p>浏览器能通过解析html语句渲染出页面<br><img src="/2021/05/09/Http-Html-Jsp/n1.jpg" alt="html"><br><strong>问题：</strong>浏览器解析所需的html语句怎么来的？<br>1、简述一下这个过程<br>浏览器通过http请求某个页面，服务器根据请求做响应的处理，将处理的结果包装成html返回给浏览器，浏览器解析。<br>问题：服务器响应一般是java写的，如何包装成html的形式呢？<br>答案：使用Servlet，如下所示为Servlet的默认模板<br><img src="/2021/05/09/Http-Html-Jsp/n2.jpg" alt="html"><br>在web开发早期，通常情况是美工写好html静态页面后，丢给Java程序员。Java开发人员在Servlet中调用Service拿到数据后，逐句复制html静态页面上的html语句到Servlet的中，根据情况将后端的数据与html片段拼接在一起。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">out.println(&quot;&lt;span&gt;用户名是：&quot;+user.age+&lt;&quot;&#x2F;span&gt;&quot;);</span></pre></td></tr></table></figure><br><img src="/2021/05/09/Http-Html-Jsp/n3.jpg" alt="html"><br><strong>为了提高效率</strong>，PHP和ASP.Net在html页面中嵌入相应语言来引入动态数据，避免了手动拷贝html片段输出的尴尬局面<br><img src="/2021/05/09/Http-Html-Jsp/n4.jpg" alt="html"><br><strong>主要目的就是希望在最终输出的html的代码中嵌入后台数据</strong>，除了把html语句拿出来在Servlet里拼接好再输出这种方式外，我们也可以直接在JSP之类的动态模板文件中的HTML语句中写入动态数据<br><strong>JSP是SUN公司为了和PHP一样，高校开发前端动态页面而生产的一门语言</strong></p><h3 id="二、简述JSP"><a href="#二、简述JSP" class="headerlink" title="二、简述JSP"></a>二、简述JSP</h3><p>JSP全称Java Server Page，直译就是“运行在服务器端的页面”。上面已经介绍过，我们可以直接在JSP文件里写HTML代码，使用上把它当做HTML文件。而且JSP中HTML/CSS/JS等的写法和HTML文件中的写法是一模一样的。但它毕竟不是HTML，而且本质差了十万八千里。因为我们还可以把Java代码内嵌在JSP页面中，很方便地把动态数据渲染成静态页面。这一点，HTML打死都做不到。<br>当有人请求JSP时，服务器内部会经历一次动态资源（JSP）到静态资源（HTML）的转化，服务器会自动帮我们把JSP中的HTML片段和数据拼接成静态资源响应给浏览器<br>也就是说JSP是运行在服务器端，但最终发给客户端的都已经是转换好的HTML静态页面（在响应体里）。JSP本质是一个Java类（Servlet），是在服务器端运行的，只不过它输出结果是HTML。<br><img src="/2021/05/09/Http-Html-Jsp/n5.jpg" alt="html"></p><h4 id="JSP执行过程"><a href="#JSP执行过程" class="headerlink" title="JSP执行过程"></a>JSP执行过程</h4><p><img src="/2021/05/09/Http-Html-Jsp/n6.jpg" alt="html"><br>Web浏览器发http请求到Web容器，WEB容器接收到以.jsp为扩展名的URL的访问请求时，它将把该请求交给JSP引擎去处理。Tomcat中的JSP引擎就是一个Servlet程序，它负责解释和执行JSP页面。<br>每个JSP 页面在第一次被访问时，JSP引擎将它翻译成一个Servlet源程序，接着再把这个Servlet源程序编译成Servlet的class类文件，然后再由WEB容器像调用普通Servlet程序一样的方式来装载和解释执行这个由JSP页面翻译成的Servlet程序。 </p><h3 id="三、MVC模式与JAVAEE三层架构"><a href="#三、MVC模式与JAVAEE三层架构" class="headerlink" title="三、MVC模式与JAVAEE三层架构"></a>三、MVC模式与JAVAEE三层架构</h3><p><img src="/2021/05/09/Http-Html-Jsp/n7.jpg" alt="html"><br>参考资料：<br>[浅谈JSP]<a href="https://zhuanlan.zhihu.com/p/42343690" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/42343690</a><br>[JavaScript学习]<a href="https://www.w3school.com.cn/js/js_window.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/js/js_window.asp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前后端交互中的一些宏观知识&quot;&gt;&lt;a href=&quot;#前后端交互中的一些宏观知识&quot; class=&quot;headerlink&quot; title=&quot;前后端交互中的一些宏观知识&quot;&gt;&lt;/a&gt;前后端交互中的一些宏观知识&lt;/h2&gt;&lt;h3 id=&quot;一、浏览器中界面如何渲染&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/categories/Cloud-Compute/"/>
    
    
      <category term="Cloud Compute" scheme="http://yoursite.com/tags/Cloud-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow-Step-One</title>
    <link href="http://yoursite.com/2021/05/04/Tensorflow-Step-One/"/>
    <id>http://yoursite.com/2021/05/04/Tensorflow-Step-One/</id>
    <published>2021-05-03T16:31:41.000Z</published>
    <updated>2021-05-03T16:43:40.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TensorFlow源码学习-初探一"><a href="#TensorFlow源码学习-初探一" class="headerlink" title="TensorFlow源码学习-初探一"></a>TensorFlow源码学习-初探一</h2><h3 id="一、Debugging-Tensorflow’s-C-code-behind-the-SWIG-interface"><a href="#一、Debugging-Tensorflow’s-C-code-behind-the-SWIG-interface" class="headerlink" title="一、Debugging Tensorflow’s C++ code behind the SWIG interface"></a>一、Debugging Tensorflow’s C++ code behind the SWIG interface</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">#启动一个python程序</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ python</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import tensorflow as tf</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import os</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.getpid()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">28671 #这里给出该python程序的进程号pid</span></pre></td></tr></table></figure><p><strong>使用gdb设置断点，并调试程序</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ gdb -p 28671</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">(gdb) break TF_Session #设置断点，简化操作-&gt;b TF_Session</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Breakpoint 1 at 0x7f15f450a4d0</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(gdb) continue</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Continuing.</span></pre></td></tr></table></figure><br><strong>在第一步python程序中创建一个Session</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">#tf.Session是tf.v1的版本，根据不同的tensorflow可以写不同的创建语句</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sess&#x3D;tf.Session()</span></pre></td></tr></table></figure><br><strong>在gdb调试处获得如下输出</strong><br><img src="/2021/05/04/Tensorflow-Step-One/1.png" alt="Tensorflow"><br><strong>如果上面的gdb attach进程时出现，Could not attach to process</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">#解决方法</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;sysctl.d&#x2F;10-ptrace.conf</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">将kernel.yama.ptrace_scope&#x3D;1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">改为kernel.yama.ptrace_scope&#x3D;0</span></pre></td></tr></table></figure><br><strong>Tensorflow中python代码跟踪：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;sess &#x3D; tf.Session()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;Class Session(BaseSession)-&gt;super(Session, self).__init__(target, graph, config&#x3D;config)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;Class BaseSession(SessionInterface),文件在&#x2F;anaconda3&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;tensorflow_core&#x2F;python&#x2F;client&#x2F;session.python</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;self._graph&#x3D;ops.get_default_graph() #ops来自于from tensorflow.python.framework import ops</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">#ops.py位于&#x2F;anaconda3&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;tensorflow_core&#x2F;python&#x2F;framework&#x2F;ops.python</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;class _DefaultGraphStack(_DefaultStack)-&gt;_GetGlobalDefaultGraph()-&gt;Graph()</span></pre></td></tr></table></figure><br>可以看出tf.Session就是为了去创建一个graph<br>在使用tensorflowd的操作的时候，例如变量和占位符的时候，都会在graph进行相应参数的设置<br>前端Session与C_API的交互是在pywrap_tensorflow.py中导入的，而pywrap_tensorflow.py中导入了swig生成的pywrap_tensorflow_internal.py文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;from tensorflow.python import pywrap_tensorflow as c_api</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;c_api.TFE_Py_UID()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;c_api.TF_GraphGetTensorShapeHelper()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;c_api.TF_OperationOutputType(tf_output) #等等</span></pre></td></tr></table></figure><br><strong>前端Session的阶段</strong>：<br>1、创建：tf.Session(),系统资源分配，graph引用计数加1;<br>2、运行：tf.Session.run()触发计算执行，client会将graph传递给master;<br>3、关闭：通过tf.Session.close()关闭,系统回收，graph引用计数减1;<br>4、销毁：python垃圾回收器GC调用tf.Session.<strong>del</strong>()回收;<br><strong>用于调试的Tensorflow代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">import numpy as np</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">def add_layer(inputs, in_size, out_size, activation_function&#x3D;None):  # inputs.shape&#x3D;[None,1],in_size.shape&#x3D;1,out_size&#x3D;10 |inputs.shape&#x3D;[None,10]，in_size.shape&#x3D;10,out_size&#x3D;1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    with tf.name_scope(&#39;layer&#39;):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        with tf.name_scope(&#39;weights&#39;):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            Weights &#x3D; tf.Variable(tf.random_normal([in_size, out_size]), name&#x3D;&#39;w&#39;)  # [1,10] | [10,1]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        with tf.name_scope(&#39;bias&#39;):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            biases &#x3D; tf.Variable(tf.zeros([1, out_size]) + 0.1, name&#x3D;&#39;b&#39;)  # [1,10]，这个1跟上面那个1貌似不是一个意思 | [1,1]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        with tf.name_scope(&#39;wx_plus_b&#39;):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            Wx_plus_b &#x3D; tf.matmul(inputs, Weights) + biases  # 注意这里顺序，inputs在前。[None,1]×[1,10]+[1,10]（python广播）&#x3D;[None,10] | [None,10]×[10,1]+[1,1]（python广播）&#x3D;[None,1]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        if activation_function is None:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            outputs &#x3D; Wx_plus_b</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        else:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            outputs &#x3D; activation_function(Wx_plus_b)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        return outputs</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"># 训练集数据和标签</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">train_data_x &#x3D; np.linspace(-1,1,300, dtype&#x3D;np.float32)[:, np.newaxis]  # shape&#x3D;(300,1)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">noise &#x3D; np.random.normal(0, 0.05, train_data_x.shape).astype(np.float32)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">label_y &#x3D; np.square(train_data_x) - 0.5 + noise</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">with tf.name_scope(&#39;inputs&#39;):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    inputer_x &#x3D; tf.placeholder(tf.float32, [None, 1], name&#x3D;&#39;inputer_x&#39;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    inputer_y &#x3D; tf.placeholder(tf.float32, [None, 1], name&#x3D;&#39;inputer_y&#39;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"># 设计的网络结构是1-10-1的</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">l1 &#x3D; add_layer(inputer_x, 1, 10, activation_function&#x3D;tf.nn.relu)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">prediction &#x3D; add_layer(l1, 10, 1, activation_function&#x3D;None)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">with tf.name_scope(&#39;loss&#39;):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    loss &#x3D; tf.reduce_mean(tf.reduce_sum(tf.square(inputer_y-prediction), reduction_indices&#x3D;[1]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">with tf.name_scope(&#39;train_scope&#39;):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    train_step &#x3D; tf.train.GradientDescentOptimizer(0.1).minimize(loss)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">sess &#x3D; tf.Session()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">init &#x3D; tf.global_variables_initializer()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">sess.run(init)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">writer &#x3D; tf.summary.FileWriter(&quot;logs&quot;, sess.graph)  # 文件写在该.py文件同级，在命令行中，用tensorboard --logdir&#x3D;.打开</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">for i in range(1000):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    # training</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    sess.run(train_step, feed_dict&#x3D;&#123;inputer_x: train_data_x, inputer_y: label_y&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">    if i % 50 &#x3D;&#x3D; 0:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">        # to see the step improvement</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">        print(sess.run(loss, feed_dict&#x3D;&#123;inputer_x: train_data_x, inputer_y: label_y&#125;))</span></pre></td></tr></table></figure><br><a href="https://www.cnblogs.com/yao62995/p/5773578.html" target="_blank" rel="noopener">参考</a><br><a href="https://blog.csdn.net/lllxxq141592654/article/details/85289812" target="_blank" rel="noopener">code</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TensorFlow源码学习-初探一&quot;&gt;&lt;a href=&quot;#TensorFlow源码学习-初探一&quot; class=&quot;headerlink&quot; title=&quot;TensorFlow源码学习-初探一&quot;&gt;&lt;/a&gt;TensorFlow源码学习-初探一&lt;/h2&gt;&lt;h3 id=&quot;一
      
    
    </summary>
    
    
      <category term="Tensorflow" scheme="http://yoursite.com/categories/Tensorflow/"/>
    
    
      <category term="Tensorflow" scheme="http://yoursite.com/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Volumes</title>
    <link href="http://yoursite.com/2021/05/03/Docker-Volumes/"/>
    <id>http://yoursite.com/2021/05/03/Docker-Volumes/</id>
    <published>2021-05-02T16:44:33.000Z</published>
    <updated>2021-05-02T16:58:43.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker目录挂载和映射以及一些常用的docker指令"><a href="#Docker目录挂载和映射以及一些常用的docker指令" class="headerlink" title="Docker目录挂载和映射以及一些常用的docker指令"></a>Docker目录挂载和映射以及一些常用的docker指令</h2><p><strong>docker和docker-compose可以通过-v参数指定</strong><br>一、启动一个centos容器，并映射主机到容器，/home/xxxx/test:/root/soft<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$docker run --name test_volumes -it --privileged -v &#x2F;home&#x2F;xxxx&#x2F;test:&#x2F;root&#x2F;soft centos:6 &#x2F;bin&#x2F;bash</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#--privileged&#x3D;true关闭安全权限，否者在容器内新建目录或文件及在文件中写内容会出现没有权限</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">#-v挂载目录，主机容:容器目录，在创建前容器是没有指定目录时，docker 容器会自己创建</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">#-p可以指定端口映射，格式为：主机(宿主)端口:容器端口</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">#容器内将自动创建soft目录</span></pre></td></tr></table></figure><br><strong>容器目录不能为相对路径</strong>否则会出现”invalid mount config for type bind:invalid mount path:’soft’ mount path must be absolute”。<br>重点:当设置了—privileged后，在容器的soft下面创建文件夹以及文件并在文件内输入信息，都可在宿主目录映射的目录下可以找到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$docker inspect [OPTIONS] NAME|ID [NAME|ID...] #提供了Docker控制容器的详细信息</span></pre></td></tr></table></figure><p>通过Mounts可以查看目录的映射关系<br>如果宿主机目录的属主和属组发生了变化，容器销毁后，宿主机目录的属主和属组不会恢复到挂载之前的状态<br>二、docker常用命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$docker ps &#x2F;&#x2F;查看所有正在运行的容器</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$docker ps -a &#x2F;&#x2F;查看所有容器，包括已经停止的容器</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">$docker stop containerID|containerName &#x2F;&#x2F;暂停容器</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">$docker stop $(docker ps -a -q) &#x2F;&#x2F;停止所有容器</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">$docker rm $(docker ps -a -q) &#x2F;&#x2F;删除所有容器</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">$dockers restart containerID &#x2F;&#x2F;重启容器</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">$docker run -p 8080:80 --name test -it -d centos:6 &#x2F;bin&#x2F;bash &#x2F;&#x2F;创建一个新的docker实例 —&gt;&#x2F;bin&#x2F;bash打开一个bash会话</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">$docker exec [options] container command [arg...] &#x2F;&#x2F;在运行的容器内执行命令</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">#设置环境变量 -e</span></pre></td></tr></table></figure><br>三、简单介绍一下镜像<br>镜像内部是一个精简的操作系统（OS），同时还包含应用运行所必须的文件和依赖包。镜像构建时通常裁剪掉了不必要的部分。镜像中不包括内核所有容器共享Docker宿主机的内核。<br>镜像可以启动一个或多个容器，通常使用docker container run和docker service create命令从某个镜像启动一个或多个容器。一旦容器从镜像启动后，二者之间就变成了互相依赖的关系。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">#拉取镜像</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">docker image pull xxx:xxx #命名:标签</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">#查看镜像</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">docker image ls</span></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker目录挂载和映射以及一些常用的docker指令&quot;&gt;&lt;a href=&quot;#Docker目录挂载和映射以及一些常用的docker指令&quot; class=&quot;headerlink&quot; title=&quot;Docker目录挂载和映射以及一些常用的docker指令&quot;&gt;&lt;/a&gt;Do
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
</feed>
